package WorldLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Adhesiveness;
  private ConceptPresentation props_Float_Declaration;
  private ConceptPresentation props_Gradient;
  private ConceptPresentation props_GradientFunctionDeclaration;
  private ConceptPresentation props_Gradient_Shape;
  private ConceptPresentation props_Gradient_Shape_Cuboidal;
  private ConceptPresentation props_Gradient_Shape_Point;
  private ConceptPresentation props_Gradient_Shape_SinkAndSource;
  private ConceptPresentation props_Gradient_Type;
  private ConceptPresentation props_Gradient_Type_Constant;
  private ConceptPresentation props_Gradient_Type_Custom;
  private ConceptPresentation props_Gradient_Type_Exponential;
  private ConceptPresentation props_Gradient_Type_Linear;
  private ConceptPresentation props_Grid;
  private ConceptPresentation props_Sink;
  private ConceptPresentation props_SinkAndSource;
  private ConceptPresentation props_Source;
  private ConceptPresentation props_Substrate;
  private ConceptPresentation props_Substrate_Shape;
  private ConceptPresentation props_Substrate_Shape_Cuboid;
  private ConceptPresentation props_Substrate_Shape_Triangular;
  private ConceptPresentation props_VariableReference;
  private ConceptPresentation props_Vertex;
  private ConceptPresentation props_World_Container;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Adhesiveness:
        if (props_Adhesiveness == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Adhesiveness");
          props_Adhesiveness = cpb.create();
        }
        return props_Adhesiveness;
      case LanguageConceptSwitch.Float_Declaration:
        if (props_Float_Declaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Float_Declaration");
          props_Float_Declaration = cpb.create();
        }
        return props_Float_Declaration;
      case LanguageConceptSwitch.Gradient:
        if (props_Gradient == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Describes a protein gradient within the simulation world.");
          cpb.presentationByName();
          props_Gradient = cpb.create();
        }
        return props_Gradient;
      case LanguageConceptSwitch.GradientFunctionDeclaration:
        if (props_GradientFunctionDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GradientFunctionDeclaration");
          props_GradientFunctionDeclaration = cpb.create();
        }
        return props_GradientFunctionDeclaration;
      case LanguageConceptSwitch.Gradient_Shape:
        if (props_Gradient_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Describes the shape of a gradient.");
          props_Gradient_Shape = cpb.create();
        }
        return props_Gradient_Shape;
      case LanguageConceptSwitch.Gradient_Shape_Cuboidal:
        if (props_Gradient_Shape_Cuboidal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Gradient confined to a cuboidal area.");
          cpb.rawPresentation("Constrained");
          props_Gradient_Shape_Cuboidal = cpb.create();
        }
        return props_Gradient_Shape_Cuboidal;
      case LanguageConceptSwitch.Gradient_Shape_Point:
        if (props_Gradient_Shape_Point == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Gradient extending out in a spherical shape.");
          cpb.rawPresentation("Point");
          props_Gradient_Shape_Point = cpb.create();
        }
        return props_Gradient_Shape_Point;
      case LanguageConceptSwitch.Gradient_Shape_SinkAndSource:
        if (props_Gradient_Shape_SinkAndSource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Define a gradient's location and direction using two coordinate points.");
          cpb.rawPresentation("Sink and Source");
          props_Gradient_Shape_SinkAndSource = cpb.create();
        }
        return props_Gradient_Shape_SinkAndSource;
      case LanguageConceptSwitch.Gradient_Type:
        if (props_Gradient_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Describes how the gradient varies in space.");
          props_Gradient_Type = cpb.create();
        }
        return props_Gradient_Type;
      case LanguageConceptSwitch.Gradient_Type_Constant:
        if (props_Gradient_Type_Constant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Non-varying gradient.");
          cpb.rawPresentation("Constant");
          props_Gradient_Type_Constant = cpb.create();
        }
        return props_Gradient_Type_Constant;
      case LanguageConceptSwitch.Gradient_Type_Custom:
        if (props_Gradient_Type_Custom == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("User-defined gradient - takes a mathematical description to calculate the protein level at a given point.");
          cpb.rawPresentation("Custom");
          props_Gradient_Type_Custom = cpb.create();
        }
        return props_Gradient_Type_Custom;
      case LanguageConceptSwitch.Gradient_Type_Exponential:
        if (props_Gradient_Type_Exponential == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Exponentially varying gradient.");
          cpb.rawPresentation("Exponential");
          props_Gradient_Type_Exponential = cpb.create();
        }
        return props_Gradient_Type_Exponential;
      case LanguageConceptSwitch.Gradient_Type_Linear:
        if (props_Gradient_Type_Linear == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Linearly varying gradient.");
          cpb.rawPresentation("Linear");
          props_Gradient_Type_Linear = cpb.create();
        }
        return props_Gradient_Type_Linear;
      case LanguageConceptSwitch.Grid:
        if (props_Grid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the base properties of the simulation world environment.");
          cpb.rawPresentation("Grid");
          props_Grid = cpb.create();
        }
        return props_Grid;
      case LanguageConceptSwitch.Sink:
        if (props_Sink == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the location of where a gradient ends.");
          cpb.rawPresentation("Sink");
          props_Sink = cpb.create();
        }
        return props_Sink;
      case LanguageConceptSwitch.SinkAndSource:
        if (props_SinkAndSource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SinkAndSource");
          props_SinkAndSource = cpb.create();
        }
        return props_SinkAndSource;
      case LanguageConceptSwitch.Source:
        if (props_Source == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the starting location of a gradient.");
          cpb.rawPresentation("Source");
          props_Source = cpb.create();
        }
        return props_Source;
      case LanguageConceptSwitch.Substrate:
        if (props_Substrate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a cellular substrate that cells can grow on.");
          cpb.presentationByName();
          props_Substrate = cpb.create();
        }
        return props_Substrate;
      case LanguageConceptSwitch.Substrate_Shape:
        if (props_Substrate_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract concept for storing the shape of a substrate.");
          props_Substrate_Shape = cpb.create();
        }
        return props_Substrate_Shape;
      case LanguageConceptSwitch.Substrate_Shape_Cuboid:
        if (props_Substrate_Shape_Cuboid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a cuboidal substrate.");
          cpb.rawPresentation("Cuboidal");
          props_Substrate_Shape_Cuboid = cpb.create();
        }
        return props_Substrate_Shape_Cuboid;
      case LanguageConceptSwitch.Substrate_Shape_Triangular:
        if (props_Substrate_Shape_Triangular == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a substrate in the shape of a triangular prism.");
          cpb.rawPresentation("Triangular Prism");
          props_Substrate_Shape_Triangular = cpb.create();
        }
        return props_Substrate_Shape_Triangular;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x276cd304748c4d5dL, 0xaad04b34e2a42cedL, 0x4c33c9dac8771740L, 0x4c33c9dac8771754L, "VariableReference", "", "");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
      case LanguageConceptSwitch.Vertex:
        if (props_Vertex == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Vertex concept for a triangle.");
          cpb.rawPresentation("Vertex");
          props_Vertex = cpb.create();
        }
        return props_Vertex;
      case LanguageConceptSwitch.World_Container:
        if (props_World_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the gradients, substrate and properties of a simulation world.");
          cpb.presentationByName();
          props_World_Container = cpb.create();
        }
        return props_World_Container;
    }
    return null;
  }
}
