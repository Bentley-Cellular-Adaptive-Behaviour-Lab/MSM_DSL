package Units.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Centimetre;
  private ConceptPresentation props_Distance;
  private ConceptPresentation props_Distance_Expression;
  private ConceptPresentation props_Gridpoints_Dist;
  private ConceptPresentation props_Micrometre;
  private ConceptPresentation props_Millimetre;
  private ConceptPresentation props_Nanometre;
  private ConceptPresentation props_Unit;
  private ConceptPresentation props_Unit_Area;
  private ConceptPresentation props_Unit_Concentration;
  private ConceptPresentation props_Unit_Distance;
  private ConceptPresentation props_Unit_Volume;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Centimetre:
        if (props_Centimetre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Centimetres");
          cpb.rawPresentation("cm");
          props_Centimetre = cpb.create();
        }
        return props_Centimetre;
      case LanguageConceptSwitch.Distance:
        if (props_Distance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Distance");
          props_Distance = cpb.create();
        }
        return props_Distance;
      case LanguageConceptSwitch.Distance_Expression:
        if (props_Distance_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Distance_Expression");
          props_Distance_Expression = cpb.create();
        }
        return props_Distance_Expression;
      case LanguageConceptSwitch.Gridpoints_Dist:
        if (props_Gridpoints_Dist == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("coordinate gridpoints");
          cpb.rawPresentation("gridpoints");
          props_Gridpoints_Dist = cpb.create();
        }
        return props_Gridpoints_Dist;
      case LanguageConceptSwitch.Micrometre:
        if (props_Micrometre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Micrometres");
          cpb.rawPresentation("um");
          props_Micrometre = cpb.create();
        }
        return props_Micrometre;
      case LanguageConceptSwitch.Millimetre:
        if (props_Millimetre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Millimetres");
          cpb.rawPresentation("mm");
          props_Millimetre = cpb.create();
        }
        return props_Millimetre;
      case LanguageConceptSwitch.Nanometre:
        if (props_Nanometre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Nanometres");
          cpb.rawPresentation("nm");
          props_Nanometre = cpb.create();
        }
        return props_Nanometre;
      case LanguageConceptSwitch.Unit:
        if (props_Unit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit = cpb.create();
        }
        return props_Unit;
      case LanguageConceptSwitch.Unit_Area:
        if (props_Unit_Area == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Area = cpb.create();
        }
        return props_Unit_Area;
      case LanguageConceptSwitch.Unit_Concentration:
        if (props_Unit_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Unit_Concentration");
          props_Unit_Concentration = cpb.create();
        }
        return props_Unit_Concentration;
      case LanguageConceptSwitch.Unit_Distance:
        if (props_Unit_Distance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Distance = cpb.create();
        }
        return props_Unit_Distance;
      case LanguageConceptSwitch.Unit_Volume:
        if (props_Unit_Volume == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Unit_Volume");
          props_Unit_Volume = cpb.create();
        }
        return props_Unit_Volume;
    }
    return null;
  }
}
