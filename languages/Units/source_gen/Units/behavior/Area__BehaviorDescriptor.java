package Units.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.math.BigDecimal;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.behavior.IETS3ExprEvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.BigInteger;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Area__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c7L, "Units.structure.Area");

  public static final SMethod<BigDecimal> convert_from_to_id7Eknud9YL5h = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("convert_from_to").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YL5h").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> get_unit_val_id7Eknud9YL7c = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.class)).name("get_unit_val").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YL7c").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<BigDecimal> get_area_value_decimal_id7Eknud9YL80 = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("get_area_value_decimal").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YL80").build();
  public static final SMethod<Boolean> is_less_than_zero_id7Eknud9YL8e = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("is_less_than_zero").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YL8e").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(convert_from_to_id7Eknud9YL5h, get_unit_val_id7Eknud9YL7c, get_area_value_decimal_id7Eknud9YL80, is_less_than_zero_id7Eknud9YL8e);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static BigDecimal convert_from_to_id7Eknud9YL5h(@NotNull SNode __thisNode__, SNode current_unit, SNode target_unit) {
    BigDecimal target_value = Area__BehaviorDescriptor.get_area_value_decimal_id7Eknud9YL80.invoke(__thisNode__);
    int current_unit_val = Area__BehaviorDescriptor.get_unit_val_id7Eknud9YL7c.invoke(__thisNode__, current_unit);
    int target_unit_val = Area__BehaviorDescriptor.get_unit_val_id7Eknud9YL7c.invoke(__thisNode__, target_unit);

    int conversion_steps = target_unit_val - current_unit_val;

    // When conversion steps is zero, no change is needed. This shouldn't be called in that instance, but just in case. 
    if (conversion_steps > 0) {
      // Converting is going up in units, so divide the current value by 1000000 for each conversion step. 
      for (int i = 0; i < conversion_steps; i++) {
        target_value = target_value.divide(BigDecimal.valueOf(1000000));
      }
    } else if (conversion_steps < 0) {
      // Converting is going down in units, so multiply the current value by 1000000 for each conversion step. 
      for (int i = 0; i < -conversion_steps; i++) {
        target_value = target_value.multiply(BigDecimal.valueOf(1000000));
      }
    }
    return target_value;
  }
  /*package*/ static Integer get_unit_val_id7Eknud9YL7c(@NotNull SNode __thisNode__, SNode unit) {
    int val = -1;
    if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Millimetres_Squared$sv)) {
      val = 1;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Micrometres_Squared$sY)) {
      val = 2;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Nanometres_Squared$tt)) {
      val = 3;
    }
    return val;
  }
  /*package*/ static BigDecimal get_area_value_decimal_id7Eknud9YL80(@NotNull SNode __thisNode__) {
    Object value = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.value$WXRI), LINKS.expr$5vb2));
    if (value.getClass() == BigDecimal.class) {
      return ((BigDecimal) value);
    } else if (value.getClass() == BigInteger.class) {
      return new BigDecimal(((BigInteger) value));
    }
    return new BigDecimal(((BigInteger) value));
  }
  /*package*/ static boolean is_less_than_zero_id7Eknud9YL8e(@NotNull SNode __thisNode__) {
    BigDecimal value = Area__BehaviorDescriptor.get_area_value_decimal_id7Eknud9YL80.invoke(__thisNode__);
    // Is the value less than zero? 
    if (value.compareTo(BigDecimal.valueOf(0)) == -1) {
      return true;
    }
    return false;
  }

  /*package*/ Area__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((BigDecimal) convert_from_to_id7Eknud9YL5h(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 1:
        return (T) ((Integer) get_unit_val_id7Eknud9YL7c(node, (SNode) parameters[0]));
      case 2:
        return (T) ((BigDecimal) get_area_value_decimal_id7Eknud9YL80(node));
      case 3:
        return (T) ((Boolean) is_less_than_zero_id7Eknud9YL8e(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Millimetres_Squared$sv = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bbL, "Units.structure.Millimetres_Squared");
    /*package*/ static final SConcept Micrometres_Squared$sY = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bcL, "Units.structure.Micrometres_Squared");
    /*package*/ static final SConcept Nanometres_Squared$tt = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bdL, "Units.structure.Nanometres_Squared");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$WXRI = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c7L, 0x622035beb7ca54f2L, "value");
    /*package*/ static final SContainmentLink expr$5vb2 = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c8L, 0xb839ee2c0e6f5deL, "expr");
  }
}
