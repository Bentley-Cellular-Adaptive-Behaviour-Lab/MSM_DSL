package Units.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.math.BigDecimal;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.behavior.IETS3ExprEvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Amount__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5abL, "Units.structure.Amount");

  public static final SMethod<BigDecimal> convert_from_to_id7Eknud9YBnj = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("convert_from_to").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YBnj").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> get_unit_val_id7Eknud9YBpe = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.class)).name("get_unit_val").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YBpe").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<BigDecimal> get_amount_value_decimal_id7Eknud9YBqP = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("get_amount_value_decimal").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YBqP").build();
  public static final SMethod<Boolean> is_less_than_zero_id7Eknud9YBr3 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("is_less_than_zero").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Eknud9YBr3").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(convert_from_to_id7Eknud9YBnj, get_unit_val_id7Eknud9YBpe, get_amount_value_decimal_id7Eknud9YBqP, is_less_than_zero_id7Eknud9YBr3);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static BigDecimal convert_from_to_id7Eknud9YBnj(@NotNull SNode __thisNode__, SNode current_unit, SNode target_unit) {
    BigDecimal target_value = Amount__BehaviorDescriptor.get_amount_value_decimal_id7Eknud9YBqP.invoke(__thisNode__);
    int current_unit_val = Amount__BehaviorDescriptor.get_unit_val_id7Eknud9YBpe.invoke(__thisNode__, current_unit);
    int target_unit_val = Amount__BehaviorDescriptor.get_unit_val_id7Eknud9YBpe.invoke(__thisNode__, target_unit);

    int conversion_steps = target_unit_val - current_unit_val;

    // When conversion steps is zero, no change is needed. This shouldn't be called in that instance, but just in case. 
    if (conversion_steps > 0) {
      // Converting is going up in units, so divide the current value by 1000 for each conversion step. 
      for (int i = 0; i < conversion_steps; i++) {
        target_value = target_value.divide(BigDecimal.valueOf(1000));
      }
    } else if (conversion_steps < 0) {
      // Converting is going down in units, so multiply the current value by 1000 for each conversion step. 
      for (int i = 0; i < -conversion_steps; i++) {
        target_value = target_value.multiply(BigDecimal.valueOf(1000));
      }
    }
    return target_value;
  }
  /*package*/ static Integer get_unit_val_id7Eknud9YBpe(@NotNull SNode __thisNode__, SNode unit) {
    int val = -1;
    if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Moles$YW)) {
      val = 1;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Millimoles$Zr)) {
      val = 2;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Micromoles$dO)) {
      val = 3;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Nanomoles$ej)) {
      val = 4;
    }
    return val;
  }
  /*package*/ static BigDecimal get_amount_value_decimal_id7Eknud9YBqP(@NotNull SNode __thisNode__) {
    return ((BigDecimal) IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.value$WLFS), LINKS.expr$l_ge)));
  }
  /*package*/ static boolean is_less_than_zero_id7Eknud9YBr3(@NotNull SNode __thisNode__) {
    BigDecimal value = Amount__BehaviorDescriptor.get_amount_value_decimal_id7Eknud9YBqP.invoke(__thisNode__);
    // Is the value less than zero? 
    if (value.compareTo(BigDecimal.valueOf(0)) == -1) {
      return true;
    }
    return false;
  }

  /*package*/ Amount__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((BigDecimal) convert_from_to_id7Eknud9YBnj(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 1:
        return (T) ((Integer) get_unit_val_id7Eknud9YBpe(node, (SNode) parameters[0]));
      case 2:
        return (T) ((BigDecimal) get_amount_value_decimal_id7Eknud9YBqP(node));
      case 3:
        return (T) ((Boolean) is_less_than_zero_id7Eknud9YBr3(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Moles$YW = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a8L, "Units.structure.Moles");
    /*package*/ static final SConcept Millimoles$Zr = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a9L, "Units.structure.Millimoles");
    /*package*/ static final SConcept Micromoles$dO = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f0L, "Units.structure.Micromoles");
    /*package*/ static final SConcept Nanomoles$ej = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f1L, "Units.structure.Nanomoles");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$WLFS = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5abL, 0x622035beb7ca54ebL, "value");
    /*package*/ static final SContainmentLink expr$l_ge = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f8L, 0x622035beb7ca54f9L, "expr");
  }
}
