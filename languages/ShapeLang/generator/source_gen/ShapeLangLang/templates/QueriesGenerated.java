package ShapeLangLang.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import ShapeLang.behavior.Protrusion__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import ShapeLang.behavior.CytoskeletalProtein__BehaviorDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import SpeciesLang.behavior.Species__BehaviorDescriptor;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_4(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.followsEnvSpecies$tHoE), LINKS.target$26Ka), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_5(final PropertyMacroContext _context) {
    return String.valueOf((long) Protrusion__BehaviorDescriptor.getMaxLength_id5CquPnW$zcI.invoke(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_1_6(final PropertyMacroContext _context) {
    return String.valueOf((long) Protrusion__BehaviorDescriptor.getThicknessValue_id5CquPnWzI0o.invoke(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_1_7(final PropertyMacroContext _context) {
    return String.valueOf((double) Protrusion__BehaviorDescriptor.getSensitivityValue_id5CquPnW$Qqr.invoke(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_1_8(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Protrusion$iC), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_9(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$26Ka), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_10(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.targetProtrusion$e4o_), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_11(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.targetSpecies$nL6b), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_12(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Protrusion$iC), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_13(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_14(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_15(final PropertyMacroContext _context) {
    return String.valueOf((float) CytoskeletalProtein__BehaviorDescriptor.getStartConcentrationValue_id3fk35jmCFN3.invoke(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_1_16(final PropertyMacroContext _context) {
    return String.valueOf((float) CytoskeletalProtein__BehaviorDescriptor.getRequiredConcentrationValue_id5CquPnWzgKu.invoke(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_1_17(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.CytoskeletalProtein$hP), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_18(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.Cell_Type_Reference$_I4X), PROPS.name$MnvL);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.protrusions$PVwU);
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.cytoskeletalProteins$lMJb);
  }
  public static Iterable<SNode> sourceNodesQuery_1_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.protrusions$PVwU);
  }
  public static Iterable<SNode> sourceNodesQuery_1_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.collectMany(SLinkOperations.getChildren(_context.getNode(), LINKS.protrusions$PVwU), LINKS.allowedProteins$3xiY);
  }
  public static Iterable<SNode> sourceNodesQuery_1_4(final SourceSubstituteMacroNodesContext _context) {
    // TODO: Find a better way of doing this.
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> allowedSpecies = ListSequence.fromList(new ArrayList<SNode>());

    for (SNode protrusion : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.protrusions$PVwU))) {
      // Get all possible species that can be sent to the filopodia.
      for (SNode speciesRef : ListSequence.fromList(SLinkOperations.getChildren(protrusion, LINKS.allowedProteins$3xiY))) {
        ListSequence.fromList(allowedSpecies).addSequence(ListSequence.fromList(Species__BehaviorDescriptor.getReactionPartnerSpecies_id3FNuJRsgPNT.invoke(SLinkOperations.getTarget(speciesRef, LINKS.target$26Ka))));
      }

      // Construct a species bin for each unique entry if they are located at the membrane.
      for (SNode species : ListSequence.fromList(allowedSpecies).distinct()) {
        if (!(Objects.equals(SPropertyOperations.getEnum(species, PROPS.Location$Gx$s), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesLang.structure.SpeciesLocation"), 0x2b6159d0ceed39a8L, "LOCATION_EXTRACELLULAR_ENVIRONMENT")))) {
          SNode newBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, "SpeciesLang.structure.SpeciesBin"));
          // These values are not used.
          SPropertyOperations.assign(newBin, PROPS.targetUsesCellValue$6tnC, false);
          SPropertyOperations.assign(newBin, PROPS.targetUsesNeighbourValue$xIQB, false);
          SPropertyOperations.assign(newBin, PROPS.binIndex$nKRa, 0);

          SLinkOperations.setTarget(newBin, LINKS.targetSpecies$nL6b, species);
          SLinkOperations.setTarget(newBin, LINKS.targetProtrusion$e4o_, protrusion);
          ListSequence.fromList(bins).addElement(newBin);

        }
      }
    }

    return bins;
  }
  public static Iterable<SNode> sourceNodesQuery_1_5(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.protrusions$PVwU);
  }
  public static Iterable<SNode> sourceNodesQuery_1_6(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.allowedCellTypes$tyMh);
  }
  public static Iterable<SNode> sourceNodesQuery_1_7(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.cytoskeletalProteins$lMJb);
  }
  public static Iterable<SNode> sourceNodesQuery_1_8(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.collectMany(SLinkOperations.getChildren(_context.getNode(), LINKS.cytoskeletalProteins$lMJb), LINKS.FoundInCellTypes$Cg3P);
  }
  public static Iterable<SNode> sourceNodesQuery_1_9(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.cytoskeletalProteins$lMJb);
  }
  public static void mappingScript_CodeBlock_3(final MappingScriptContext _context) {
    List<SNode> containers = SModelOperations.nodes(_context.getModel(), CONCEPTS.ShapeContainer$mS);
    for (SNode container : ListSequence.fromList(containers)) {
      for (SNode cytoprotein : ListSequence.fromList(SLinkOperations.getChildren(container, LINKS.cytoskeletalProteins$lMJb))) {
        SNode targetProtrusion = SLinkOperations.getTarget(SLinkOperations.getTarget(cytoprotein, LINKS.TriggersProtrusion$OeeV), LINKS.target$LDpb);
        for (SNode cellTypeRef : ListSequence.fromList(SLinkOperations.getChildren(targetProtrusion, LINKS.allowedCellTypes$tyMh))) {
          ListSequence.fromList(SLinkOperations.getChildren(cytoprotein, LINKS.FoundInCellTypes$Cg3P)).addElement(cellTypeRef);
        }
      }
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("1734463937091693638", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_3(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("1734463937091426600", new SNsQ(i++));
    snsqMethods.put("1734463937091426950", new SNsQ(i++));
    snsqMethods.put("4247874104281205975", new SNsQ(i++));
    snsqMethods.put("4247874104282558459", new SNsQ(i++));
    snsqMethods.put("4247874104283041107", new SNsQ(i++));
    snsqMethods.put("4247874104281179067", new SNsQ(i++));
    snsqMethods.put("6492637422049025846", new SNsQ(i++));
    snsqMethods.put("1734463937091609390", new SNsQ(i++));
    snsqMethods.put("1734463937091609750", new SNsQ(i++));
    snsqMethods.put("6492637422047554629", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_2(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_3(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_4(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_5(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_6(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_7(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_8(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_9(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("1734463937091429546", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTRUSION"));
    pvqMethods.put("1734463937091435993", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CYTOPROTEIN"));
    pvqMethods.put("4247874104281207604", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTRUSION"));
    pvqMethods.put("6492637422048287060", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTRUSION_NAME"));
    pvqMethods.put("1734463937091423654", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "TARGET_PROTEIN_NAME"));
    pvqMethods.put("6492637422048044302", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "MAX_LENGTH"));
    pvqMethods.put("6492637422048043538", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "THICKNESS"));
    pvqMethods.put("6492637422048044797", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "SENSITIVITY"));
    pvqMethods.put("4247874104282561878", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTRUSION"));
    pvqMethods.put("4247874104282587526", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTEIN_NAME"));
    pvqMethods.put("4247874104284277074", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTRUSION"));
    pvqMethods.put("4247874104284270911", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTEIN_NAME"));
    pvqMethods.put("4247874104281200843", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTRUSION"));
    pvqMethods.put("1734463937091616318", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CYTOPROTEIN"));
    pvqMethods.put("1734463937091619771", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CYTOPROTEIN_NAME"));
    pvqMethods.put("6492637422047018483", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "START_LEVEL"));
    pvqMethods.put("6492637422047543294", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "REQUIRED_AMOUNT"));
    pvqMethods.put("1734463937091685795", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CYTOPROTEIN"));
    pvqMethods.put("1734463937091689326", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_1_3(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_1_4(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_1_5(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_1_6(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_1_7(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_1_8(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_1_9(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_1_10(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_1_11(ctx);
        case 12:
          return QueriesGenerated.propertyMacro_GetValue_1_12(ctx);
        case 13:
          return QueriesGenerated.propertyMacro_GetValue_1_13(ctx);
        case 14:
          return QueriesGenerated.propertyMacro_GetValue_1_14(ctx);
        case 15:
          return QueriesGenerated.propertyMacro_GetValue_1_15(ctx);
        case 16:
          return QueriesGenerated.propertyMacro_GetValue_1_16(ctx);
        case 17:
          return QueriesGenerated.propertyMacro_GetValue_1_17(ctx);
        case 18:
          return QueriesGenerated.propertyMacro_GetValue_1_18(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty targetUsesCellValue$6tnC = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x851f9bbb9f4171eL, "targetUsesCellValue");
    /*package*/ static final SProperty targetUsesNeighbourValue$xIQB = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x851f9bbb9efd229L, "targetUsesNeighbourValue");
    /*package*/ static final SProperty binIndex$nKRa = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x34479ff5091e5407L, "binIndex");
    /*package*/ static final SProperty Location$Gx$s = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed5ea1L, "Location");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink followsEnvSpecies$tHoE = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0x2bcf88441a8eaf5dL, "followsEnvSpecies");
    /*package*/ static final SReferenceLink target$26Ka = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x10098a905c7a298aL, 0x10098a905c7a298bL, "target");
    /*package*/ static final SReferenceLink targetProtrusion$e4o_ = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x3af37afddc4ee4e0L, "targetProtrusion");
    /*package*/ static final SReferenceLink targetSpecies$nL6b = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x34479ff5091e5408L, "targetSpecies");
    /*package*/ static final SReferenceLink Cell_Type_Reference$_I4X = MetaAdapterFactory.getReferenceLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x18c0ec6efa1c0357L, 0x18c0ec6efa1eac4eL, "Cell_Type_Reference");
    /*package*/ static final SContainmentLink protrusions$PVwU = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1004aL, 0xd8d2758eaa1048aL, "protrusions");
    /*package*/ static final SContainmentLink cytoskeletalProteins$lMJb = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1004aL, 0xd8d2758eaa1451bL, "cytoskeletalProteins");
    /*package*/ static final SContainmentLink allowedProteins$3xiY = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0xd8d2758eaa104ecL, "allowedProteins");
    /*package*/ static final SContainmentLink allowedCellTypes$tyMh = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0x24293eb426b649b8L, "allowedCellTypes");
    /*package*/ static final SContainmentLink FoundInCellTypes$Cg3P = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa100dcL, 0x18120dc2de136552L, "FoundInCellTypes");
    /*package*/ static final SContainmentLink TriggersProtrusion$OeeV = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa100dcL, 0x2bcf88441a904a29L, "TriggersProtrusion");
    /*package*/ static final SReferenceLink target$LDpb = MetaAdapterFactory.getReferenceLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0x2bcf88441a902404L, 0x2bcf88441a902420L, "target");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Protrusion$iC = MetaAdapterFactory.getConcept(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, "ShapeLang.structure.Protrusion");
    /*package*/ static final SConcept CytoskeletalProtein$hP = MetaAdapterFactory.getConcept(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa100dcL, "ShapeLang.structure.CytoskeletalProtein");
    /*package*/ static final SConcept ShapeContainer$mS = MetaAdapterFactory.getConcept(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1004aL, "ShapeLang.structure.ShapeContainer");
  }
}
