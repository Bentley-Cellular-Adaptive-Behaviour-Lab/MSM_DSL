package ShapeLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import UnitLang.behavior.Distance__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.BigDecimal;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_ValidSensitivity_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ValidSensitivity_NonTypesystemRule() {
  }
  public void applyRule(final SNode protrusion, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (Distance__BehaviorDescriptor.get_distance_value_decimal_id3wWy5vw4PXg.invoke(SLinkOperations.getTarget(protrusion, LINKS.sensitivity$940a)).compareTo(BigDecimal.ZERO) == -1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(protrusion, LINKS.thickness$s$zc), "Sensitivty cannot be less than zero.", "r:ec855cb5-c31b-4763-b37e-8c6813331837(ShapeLang.typesystem)", "3156891689895006300", null, errorTarget);
      }
    } else if (Distance__BehaviorDescriptor.get_distance_value_decimal_id3wWy5vw4PXg.invoke(SLinkOperations.getTarget(protrusion, LINKS.thickness$s$zc)).compareTo(BigDecimal.ONE) == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(protrusion, LINKS.thickness$s$zc), "Sensitivity cannot be greater than one.", "r:ec855cb5-c31b-4763-b37e-8c6813331837(ShapeLang.typesystem)", "3156891689895017213", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Protrusion$iC;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink thickness$s$zc = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0x2bcf88441a8ef8ceL, "thickness");
    /*package*/ static final SContainmentLink sensitivity$940a = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0xd8d2758eaa10b75L, "sensitivity");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Protrusion$iC = MetaAdapterFactory.getConcept(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, "ShapeLang.structure.Protrusion");
  }
}
