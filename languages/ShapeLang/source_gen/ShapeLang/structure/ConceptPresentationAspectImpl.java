package ShapeLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CytoskeletalProtein;
  private ConceptPresentation props_Protrusion;
  private ConceptPresentation props_ShapeContainer;
  private ConceptPresentation props_Shuffling;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CytoskeletalProtein:
        if (props_CytoskeletalProtein == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CytoskeletalProtein = cpb.create();
        }
        return props_CytoskeletalProtein;
      case LanguageConceptSwitch.Protrusion:
        if (props_Protrusion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Protrusion = cpb.create();
        }
        return props_Protrusion;
      case LanguageConceptSwitch.ShapeContainer:
        if (props_ShapeContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ShapeContainer");
          props_ShapeContainer = cpb.create();
        }
        return props_ShapeContainer;
      case LanguageConceptSwitch.Shuffling:
        if (props_Shuffling == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Shuffling");
          props_Shuffling = cpb.create();
        }
        return props_Shuffling;
    }
    return null;
  }
}
