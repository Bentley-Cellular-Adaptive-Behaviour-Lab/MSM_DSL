package ShapeLang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import UnitLang.behavior.Distance__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Protrusion__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, "ShapeLang.structure.Protrusion");

  public static final SMethod<Long> getThicknessValue_id5CquPnWzI0o = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("getThicknessValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5CquPnWzI0o").build();
  public static final SMethod<Long> getMaxLength_id5CquPnW$zcI = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("getMaxLength").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5CquPnW$zcI").build();
  public static final SMethod<Double> getSensitivityValue_id5CquPnW$Qqr = new SMethodBuilder<Double>(new SJavaCompoundTypeImpl(Double.TYPE)).name("getSensitivityValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5CquPnW$Qqr").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getThicknessValue_id5CquPnWzI0o, getMaxLength_id5CquPnW$zcI, getSensitivityValue_id5CquPnW$Qqr);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static long getThicknessValue_id5CquPnWzI0o(@NotNull SNode __thisNode__) {
    long value = 1;
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc) != null)) {
      double expressionValue = 0.2;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), LINKS.units$DnBC), CONCEPTS.Micrometre$WD)) {
        expressionValue = Distance__BehaviorDescriptor.get_distance_value_decimal_id3wWy5vw4PXg.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc)).floatValue();
      }
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), LINKS.units$DnBC), CONCEPTS.Millimetre$Wa)) {
        SNode millimetrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d70L, "UnitLang.structure.Millimetre"));
        SNode micrometrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d71L, "UnitLang.structure.Micrometre"));
        expressionValue = Distance__BehaviorDescriptor.convert_from_to_id2XF6SaadVZL.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), millimetrenode, micrometrenode).floatValue();
        SNodeOperations.deleteNode(millimetrenode);
        SNodeOperations.deleteNode(micrometrenode);
      }
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), LINKS.units$DnBC), CONCEPTS.Nanometre$X8)) {
        SNode nanometrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d72L, "UnitLang.structure.Nanometre"));
        SNode micrometrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d71L, "UnitLang.structure.Micrometre"));
        expressionValue = Distance__BehaviorDescriptor.convert_from_to_id2XF6SaadVZL.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), nanometrenode, micrometrenode).floatValue();
        SNodeOperations.deleteNode(nanometrenode);
        SNodeOperations.deleteNode(micrometrenode);
      }
      if (expressionValue < 0.2) {
        value = 1;
      } else {
        value = Math.round(expressionValue / 0.2);
      }
    }
    return value;
  }
  /*package*/ static long getMaxLength_id5CquPnW$zcI(@NotNull SNode __thisNode__) {
    long value = -1;
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.maxLength$PFab) != null)) {
      double expressionValue = 0.2;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), LINKS.units$DnBC), CONCEPTS.Micrometre$WD)) {
        expressionValue = Distance__BehaviorDescriptor.get_distance_value_decimal_id3wWy5vw4PXg.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc)).floatValue();
      }
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), LINKS.units$DnBC), CONCEPTS.Millimetre$Wa)) {
        SNode millimetrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d70L, "UnitLang.structure.Millimetre"));
        SNode micrometrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d71L, "UnitLang.structure.Micrometre"));
        expressionValue = Distance__BehaviorDescriptor.convert_from_to_id2XF6SaadVZL.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), millimetrenode, micrometrenode).floatValue();
        SNodeOperations.deleteNode(millimetrenode);
        SNodeOperations.deleteNode(micrometrenode);
      }
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), LINKS.units$DnBC), CONCEPTS.Nanometre$X8)) {
        SNode nanometrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d72L, "UnitLang.structure.Nanometre"));
        SNode micrometrenode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d71L, "UnitLang.structure.Micrometre"));
        expressionValue = Distance__BehaviorDescriptor.convert_from_to_id2XF6SaadVZL.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thickness$s$zc), nanometrenode, micrometrenode).floatValue();
        SNodeOperations.deleteNode(nanometrenode);
        SNodeOperations.deleteNode(micrometrenode);
      }
      if (expressionValue < 0.5) {
        value = 1;
      } else {
        value = Math.round(expressionValue / 0.5);
      }
    }
    return value;
  }
  /*package*/ static double getSensitivityValue_id5CquPnW$Qqr(@NotNull SNode __thisNode__) {
    double value = SensitivityExpression__BehaviorDescriptor.get_decimal_value_id2Jfy4gq$TNn.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.sensitivity$940a)).doubleValue();
    if (value > 1.0) {
      value = 1.0;
    }
    if (value < 0.0) {
      value = 0.0;
    }
    return value;
  }

  /*package*/ Protrusion__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Long) getThicknessValue_id5CquPnWzI0o(node));
      case 1:
        return (T) ((Long) getMaxLength_id5CquPnW$zcI(node));
      case 2:
        return (T) ((Double) getSensitivityValue_id5CquPnW$Qqr(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink thickness$s$zc = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0x2bcf88441a8ef8ceL, "thickness");
    /*package*/ static final SContainmentLink units$DnBC = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c7667L, 0x2f6b1b828a2c7ab9L, "units");
    /*package*/ static final SContainmentLink maxLength$PFab = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0xd8d2758eaa1046aL, "maxLength");
    /*package*/ static final SContainmentLink sensitivity$940a = MetaAdapterFactory.getContainmentLink(0x615bc492e50a4c3eL, 0x8b868d639eaba343L, 0xd8d2758eaa1007bL, 0xd8d2758eaa10b75L, "sensitivity");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Micrometre$WD = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d71L, "UnitLang.structure.Micrometre");
    /*package*/ static final SConcept Millimetre$Wa = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d70L, "UnitLang.structure.Millimetre");
    /*package*/ static final SConcept Nanometre$X8 = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d72L, "UnitLang.structure.Nanometre");
  }
}
