package TissueSetup.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import Units.behavior.Distance__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_CellTypeValues_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_CellTypeValues_NonTypesystemRule() {
  }
  public void applyRule(final SNode type, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(type, LINKS.Shape$q0mn), CONCEPTS.Shape_Rectangular$1r)) {
      if ((boolean) Distance__BehaviorDescriptor.is_less_than_zero_id7Eknud9Ysql.invoke(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(type, LINKS.Shape$q0mn), CONCEPTS.Shape_Rectangular$1r), LINKS.Height$jAPl))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(type, LINKS.Shape$q0mn), CONCEPTS.Shape_Rectangular$1r), LINKS.Height$jAPl), "Cell heights cannot be less than zero.", "r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "8832787999961359043", null, errorTarget);
        }
      }
      if ((boolean) Distance__BehaviorDescriptor.is_less_than_zero_id7Eknud9Ysql.invoke(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(type, LINKS.Shape$q0mn), CONCEPTS.Shape_Rectangular$1r), LINKS.Width$jAnj))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(type, LINKS.Shape$q0mn), CONCEPTS.Shape_Rectangular$1r), LINKS.Width$jAnj), "Cell widths cannot be less than zero", "r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "8832787999961366800", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Cell_Type$$n;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink Shape$q0mn = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef8bL, 0x56b8f8b9a96cefbbL, "Shape");
    /*package*/ static final SContainmentLink Height$jAPl = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef9dL, 0x47c452e0e9687f6eL, "Height");
    /*package*/ static final SContainmentLink Width$jAnj = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef9dL, 0x47c452e0e9687f6cL, "Width");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Shape_Rectangular$1r = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef9dL, "TissueSetup.structure.Shape_Rectangular");
    /*package*/ static final SConcept Cell_Type$$n = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef8bL, "TissueSetup.structure.Cell_Type");
  }
}
