package TissueSetup.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import TissueSetup.behavior.Arrangement_Cylindrical__BehaviorDescriptor;
import TissueSetup.behavior.Arrangement_Flat__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class Tissue_Constraints extends BaseConstraintsDescriptor {
  public Tissue_Constraints() {
    super(CONCEPTS.Tissue$nL);
  }

  public static class Lower_x_Property extends BasePropertyConstraintsDescriptor {
    public Lower_x_Property(ConstraintsDescriptor container) {
      super(PROPS.lower_x$5_n8, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      int x_offset;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) {
        x_offset = (int) Arrangement_Cylindrical__BehaviorDescriptor.get_total_width_int_id1QpPlI52lcy.invoke(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) / 2;
      } else {
        x_offset = (int) Arrangement_Flat__BehaviorDescriptor.get_total_width_int_id1QpPlI52vjz.invoke(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Flat$W)) / 2;
      }
      return SPropertyOperations.getInteger(SLinkOperations.getTarget(node, LINKS.position$KVlR), PROPS.x_coord$pFJT) - x_offset;
    }
    @Override
    public boolean hasOwnSetter() {
      return true;
    }
    @Override
    public void setPropertyValue(SNode node, Object propertyValue) {
      staticSetPropertyValue(node, SPropertyOperations.castInteger(propertyValue));
    }
    private static void staticSetPropertyValue(SNode node, int propertyValue) {
    }
  }
  public static class Upper_x_Property extends BasePropertyConstraintsDescriptor {
    public Upper_x_Property(ConstraintsDescriptor container) {
      super(PROPS.upper_x$1OS7, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      int x_offset;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) {
        x_offset = (int) Arrangement_Cylindrical__BehaviorDescriptor.get_total_width_int_id1QpPlI52lcy.invoke(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) / 2;
      } else {
        x_offset = (int) Arrangement_Flat__BehaviorDescriptor.get_total_width_int_id1QpPlI52vjz.invoke(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Flat$W)) / 2;
      }
      return SPropertyOperations.getInteger(SLinkOperations.getTarget(node, LINKS.position$KVlR), PROPS.x_coord$pFJT) + x_offset;
    }
  }
  public static class Lower_y_Property extends BasePropertyConstraintsDescriptor {
    public Lower_y_Property(ConstraintsDescriptor container) {
      super(PROPS.lower_y$8SKd, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      int y_offset;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) {
        y_offset = SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh), PROPS.cylinder_total_radius$p$uq);
      } else {
        y_offset = (int) Arrangement_Flat__BehaviorDescriptor.get_total_width_int_id1QpPlI52vjz.invoke(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Flat$W)) / 2;
      }
      return SPropertyOperations.getInteger(SLinkOperations.getTarget(node, LINKS.position$KVlR), PROPS.y_coord$pGdV) - y_offset;
    }
  }
  public static class Upper_y_Property extends BasePropertyConstraintsDescriptor {
    public Upper_y_Property(ConstraintsDescriptor container) {
      super(PROPS.upper_y$69gx, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      int y_offset;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) {
        y_offset = SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh), PROPS.cylinder_total_radius$p$uq);
      } else {
        y_offset = (int) Arrangement_Flat__BehaviorDescriptor.get_total_width_int_id1QpPlI52vjz.invoke(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Flat$W)) / 2;
      }
      return SPropertyOperations.getInteger(SLinkOperations.getTarget(node, LINKS.position$KVlR), PROPS.y_coord$pGdV) + y_offset;
    }
  }
  public static class Lower_z_Property extends BasePropertyConstraintsDescriptor {
    public Lower_z_Property(ConstraintsDescriptor container) {
      super(PROPS.lower_z$cBP8, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      int z_offset;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) {
        z_offset = SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh), PROPS.cylinder_total_radius$p$uq);
      } else {
        z_offset = 0;
      }
      return SPropertyOperations.getInteger(SLinkOperations.getTarget(node, LINKS.position$KVlR), PROPS.z_coord$pLQj) - z_offset;
    }
  }
  public static class Upper_z_Property extends BasePropertyConstraintsDescriptor {
    public Upper_z_Property(ConstraintsDescriptor container) {
      super(PROPS.upper_z$9t7C, container);
    }
    @Override
    public boolean hasOwnGetter() {
      return true;
    }
    @Override
    public Object getValue(SNode node) {
      int z_offset;
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)) {
        z_offset = SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh), PROPS.cylinder_total_radius$p$uq);
      } else {
        z_offset = 0;
      }
      return SPropertyOperations.getInteger(SLinkOperations.getTarget(node, LINKS.position$KVlR), PROPS.z_coord$pLQj) + z_offset;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.lower_x$5_n8, new Lower_x_Property(this));
    properties.put(PROPS.upper_x$1OS7, new Upper_x_Property(this));
    properties.put(PROPS.lower_y$8SKd, new Lower_y_Property(this));
    properties.put(PROPS.upper_y$69gx, new Upper_y_Property(this));
    properties.put(PROPS.lower_z$cBP8, new Lower_z_Property(this));
    properties.put(PROPS.upper_z$9t7C, new Upper_z_Property(this));
    return properties;
  }
  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.tissue_type$$cvw, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_gylm26_a0a0a0a0a1a0a0a0j;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forNamedElements(SNodeOperations.getChildren(SNodeOperations.getParent(_context.getContextNode())));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_gylm26_a0a0a0a0a1a0a0a0j = new SNodePointer("r:7fe3d642-a3fa-4906-9844-700ca7238ef7(TissueSetup.constraints)", "8062570699130125319");

  private static final class CONCEPTS {
    /*package*/ static final SConcept Tissue$nL = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, "TissueSetup.structure.Tissue");
    /*package*/ static final SConcept Arrangement_Cylindrical$Bh = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef91L, "TissueSetup.structure.Arrangement_Cylindrical");
    /*package*/ static final SConcept Arrangement_Flat$W = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef9cL, "TissueSetup.structure.Arrangement_Flat");
  }

  private static final class PROPS {
    /*package*/ static final SProperty lower_x$5_n8 = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x29c5733875c8535bL, "lower_x");
    /*package*/ static final SProperty x_coord$pFJT = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef87L, 0x56b8f8b9a96cefa3L, "x_coord");
    /*package*/ static final SProperty upper_x$1OS7 = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x29c5733875c852e1L, "upper_x");
    /*package*/ static final SProperty lower_y$8SKd = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x29c5733875c853adL, "lower_y");
    /*package*/ static final SProperty cylinder_total_radius$p$uq = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef91L, 0x56b8f8b9a96cef98L, "cylinder_total_radius");
    /*package*/ static final SProperty y_coord$pGdV = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef87L, 0x56b8f8b9a96cefa5L, "y_coord");
    /*package*/ static final SProperty upper_y$69gx = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x29c5733875c8538bL, "upper_y");
    /*package*/ static final SProperty lower_z$cBP8 = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x29c5733875c85421L, "lower_z");
    /*package*/ static final SProperty z_coord$pLQj = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef87L, 0x56b8f8b9a96cefa8L, "z_coord");
    /*package*/ static final SProperty upper_z$9t7C = MetaAdapterFactory.getProperty(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x29c5733875c853dfL, "upper_z");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink tissue_type$$cvw = MetaAdapterFactory.getReferenceLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x4369a03b1c616655L, "tissue_type");
    /*package*/ static final SContainmentLink arrangement$aAuk = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x7290577338f6917fL, 0x4369a03b1c61664bL, "arrangement");
    /*package*/ static final SContainmentLink position$KVlR = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x56b8f8b9a96e2a3eL, "position");
  }
}
