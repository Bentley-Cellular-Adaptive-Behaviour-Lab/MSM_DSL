package TissueSetup.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Arrangement;
  private ConceptPresentation props_Arrangement_Cylindrical;
  private ConceptPresentation props_Arrangement_Flat;
  private ConceptPresentation props_Cell;
  private ConceptPresentation props_Cell_Type;
  private ConceptPresentation props_Cell_Type_Reference;
  private ConceptPresentation props_Position;
  private ConceptPresentation props_Shape;
  private ConceptPresentation props_Shape_Rectangular;
  private ConceptPresentation props_Tissue;
  private ConceptPresentation props_Tissue_And_Cell_Container;
  private ConceptPresentation props_Tissue_Type;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Arrangement:
        if (props_Arrangement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract concept for describing the arrangement of cells within the tissue.");
          props_Arrangement = cpb.create();
        }
        return props_Arrangement;
      case LanguageConceptSwitch.Arrangement_Cylindrical:
        if (props_Arrangement_Cylindrical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a hollow, 2D cylindrical tissue and related attributes.");
          cpb.rawPresentation("Cylindrical");
          props_Arrangement_Cylindrical = cpb.create();
        }
        return props_Arrangement_Cylindrical;
      case LanguageConceptSwitch.Arrangement_Flat:
        if (props_Arrangement_Flat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a flat (2D), rectangular tissue and related attributes.");
          cpb.rawPresentation("Flat");
          props_Arrangement_Flat = cpb.create();
        }
        return props_Arrangement_Flat;
      case LanguageConceptSwitch.Cell:
        if (props_Cell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Cell concept which stores the type and position of a cell in the simulation world. Other behaviours are not currently implemented.");
          cpb.presentationByName();
          props_Cell = cpb.create();
        }
        return props_Cell;
      case LanguageConceptSwitch.Cell_Type:
        if (props_Cell_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for storing the initial shape and behaviour (planned) of a cell.");
          cpb.presentationByName();
          props_Cell_Type = cpb.create();
        }
        return props_Cell_Type;
      case LanguageConceptSwitch.Cell_Type_Reference:
        if (props_Cell_Type_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x18c0ec6efa1c0357L, 0x18c0ec6efa1eac4eL, "Cell_Type_Reference", "", "");
          props_Cell_Type_Reference = cpb.create();
        }
        return props_Cell_Type_Reference;
      case LanguageConceptSwitch.Position:
        if (props_Position == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept that stores the X,Y and Z coordinates of an object (used elsewhere, such as in gradient boundaries).");
          cpb.rawPresentation("Position");
          props_Position = cpb.create();
        }
        return props_Position;
      case LanguageConceptSwitch.Shape:
        if (props_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract concept for storing the shape type of a cell.");
          props_Shape = cpb.create();
        }
        return props_Shape;
      case LanguageConceptSwitch.Shape_Rectangular:
        if (props_Shape_Rectangular == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Square cell shape type.");
          cpb.rawPresentation("Rectangular");
          props_Shape_Rectangular = cpb.create();
        }
        return props_Shape_Rectangular;
      case LanguageConceptSwitch.Tissue:
        if (props_Tissue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for storing the location and type of a tissue.");
          cpb.presentationByName();
          props_Tissue = cpb.create();
        }
        return props_Tissue;
      case LanguageConceptSwitch.Tissue_And_Cell_Container:
        if (props_Tissue_And_Cell_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Root concept which stores user-defined cell and tissue types, and instances of cells and tissues in the simulation world.");
          cpb.presentationByName();
          props_Tissue_And_Cell_Container = cpb.create();
        }
        return props_Tissue_And_Cell_Container;
      case LanguageConceptSwitch.Tissue_Type:
        if (props_Tissue_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept which stores the arrangement of a tissue and the cell type that constitutes it.");
          cpb.presentationByName();
          props_Tissue_Type = cpb.create();
        }
        return props_Tissue_Type;
    }
    return null;
  }
}
