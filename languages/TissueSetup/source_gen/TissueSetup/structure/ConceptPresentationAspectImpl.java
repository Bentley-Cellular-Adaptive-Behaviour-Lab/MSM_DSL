package TissueSetup.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Arrangement;
  private ConceptPresentation props_Cell;
  private ConceptPresentation props_Cell_Type;
  private ConceptPresentation props_Cylindrical;
  private ConceptPresentation props_Flat;
  private ConceptPresentation props_Position;
  private ConceptPresentation props_Shape;
  private ConceptPresentation props_Square;
  private ConceptPresentation props_Tissue;
  private ConceptPresentation props_Tissue_And_Cell_Container;
  private ConceptPresentation props_Tissue_Type;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Arrangement:
        if (props_Arrangement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Arrangement = cpb.create();
        }
        return props_Arrangement;
      case LanguageConceptSwitch.Cell:
        if (props_Cell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cell = cpb.create();
        }
        return props_Cell;
      case LanguageConceptSwitch.Cell_Type:
        if (props_Cell_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cell_Type = cpb.create();
        }
        return props_Cell_Type;
      case LanguageConceptSwitch.Cylindrical:
        if (props_Cylindrical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<Arrangement_Cylindrical>");
          props_Cylindrical = cpb.create();
        }
        return props_Cylindrical;
      case LanguageConceptSwitch.Flat:
        if (props_Flat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<Arrangement_Flat>");
          props_Flat = cpb.create();
        }
        return props_Flat;
      case LanguageConceptSwitch.Position:
        if (props_Position == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Position");
          props_Position = cpb.create();
        }
        return props_Position;
      case LanguageConceptSwitch.Shape:
        if (props_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Shape = cpb.create();
        }
        return props_Shape;
      case LanguageConceptSwitch.Square:
        if (props_Square == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<Shape_Square>");
          props_Square = cpb.create();
        }
        return props_Square;
      case LanguageConceptSwitch.Tissue:
        if (props_Tissue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Tissue = cpb.create();
        }
        return props_Tissue;
      case LanguageConceptSwitch.Tissue_And_Cell_Container:
        if (props_Tissue_And_Cell_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Tissue_And_Cell_Container");
          props_Tissue_And_Cell_Container = cpb.create();
        }
        return props_Tissue_And_Cell_Container;
      case LanguageConceptSwitch.Tissue_Type:
        if (props_Tissue_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Tissue_Type = cpb.create();
        }
        return props_Tissue_Type;
    }
    return null;
  }
}
