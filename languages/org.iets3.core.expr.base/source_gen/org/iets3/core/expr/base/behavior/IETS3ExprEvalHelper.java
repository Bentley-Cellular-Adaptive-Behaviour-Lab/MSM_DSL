package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterEvaluationHelper;
import com.mbeddr.mpsutil.interpreter.rt.StopAndReturnException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterRuntimeException;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import java.util.Map;
import org.iets3.core.expr.base.plugin.ConstraintFailedException;
import com.mbeddr.mpsutil.interpreter.rt.IInterpreter;

public class IETS3ExprEvalHelper {
  public static final String INTERPRETER_CATEGORY = "arithmetic";


  public static Object evaluate(SNode expr) {
    return evaluateWithContext(expr, new IETS3ExprContext());
  }

  public static Object evaluateWithContext(SNode expr, IETS3ExprContext ctx) {
    DefaultCoverageAnalyzer coverage = new DefaultCoverageAnalyzer();
    try {
      InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper(INTERPRETER_CATEGORY);
      return helper.evaluateWithContextAndCoverage(expr, getInterpreter(), ctx, coverage);
    } catch (StopAndReturnException stopEx) {
      return stopEx.value();
    } catch (InterpreterRuntimeException ex) {
      ComputationTrace failureTrace = ex.getFailureTrace();
      if (failureTrace != null) {
        System.err.println("Interpreter failed when running " + failureTrace.createStackTraceToThisOneAsString(true, 2));
      }
      System.err.println("Exception: " + ex.getMessage());
      ex.printStackTrace();
      throw ex;
    }
  }

  public static ValueAndTrace evaluateWithTrace(SNode expr) {
    IETS3ExprContext ctx = new IETS3ExprContext();
    DefaultCoverageAnalyzer coverage = new DefaultCoverageAnalyzer();
    InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper(IETS3ExprEvalHelper.INTERPRETER_CATEGORY);
    try {
      Object res = helper.evaluateWithContextAndCoverage(expr, getInterpreter(), ctx, coverage);
      ComputationTrace trace = helper.getLastLog();
      trace.setValue(res);
      return new ValueAndTrace(res, trace);
    } catch (StopAndReturnException stopEx) {
      return new ValueAndTrace(stopEx.value(), helper.getLastLog());
    } catch (InterpreterRuntimeException ex) {
      ComputationTrace failureTrace = ex.getFailureTrace();
      if (failureTrace != null) {
        System.err.println("Interpreter failed when running " + failureTrace.createStackTraceToThisOneAsString(true, 2));
      }
      System.err.println("Exception: " + ex.getMessage());
      ex.printStackTrace();
      throw ex;
    }
  }

  public static ValueAndTraceAndEnv evaluateWithTraceAndEnv(SNode expr) {
    return evaluateWithTraceAndEnv(expr, null);
  }

  public static ValueAndTraceAndEnv evaluateWithTraceAndEnv(SNode expr, Map<SNode, Object> stuffForEnv) {
    IETS3ExprContext ctx = new IETS3ExprContext();
    DefaultCoverageAnalyzer coverage = new DefaultCoverageAnalyzer();
    if (stuffForEnv != null) {
      ctx.pushEnvironment(expr, stuffForEnv);
    }
    InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper(IETS3ExprEvalHelper.INTERPRETER_CATEGORY);
    try {
      Object res = helper.evaluateWithContextAndCoverage(expr, getInterpreter(), ctx, coverage);
      ComputationTrace trace = helper.getLastLog();
      trace.setValue(res);
      return new ValueAndTraceAndEnv(res, trace, ctx.getEnvironment(), coverage);
    } catch (StopAndReturnException stopEx) {
      return new ValueAndTraceAndEnv(stopEx.value(), helper.getLastLog(), ctx.getEnvironment(), coverage);
    } catch (InterpreterRuntimeException ex) {
      ComputationTrace failureTrace = ex.getFailureTrace();
      if (failureTrace != null) {
        System.err.println("Interpreter failed when running " + failureTrace.createStackTraceToThisOneAsString(true, 2));
      }
      System.err.println("Exception: " + ex.getMessage());
      ex.printStackTrace();
      throw ex;
    }
  }

  public static Object evaluateAndThrowConstraintFailures(SNode expr) {
    IETS3ExprContext ctx = new IETS3ExprContext();
    DefaultCoverageAnalyzer coverage = new DefaultCoverageAnalyzer();
    try {
      InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper(IETS3ExprEvalHelper.INTERPRETER_CATEGORY);
      return helper.evaluateWithContextAndCoverage(expr, getInterpreter(), ctx, coverage);
    } catch (ConstraintFailedException cfe) {
      throw cfe;
    } catch (StopAndReturnException stopEx) {
      return stopEx.value();
    } catch (InterpreterRuntimeException ex) {
      ComputationTrace failureTrace = ex.getFailureTrace();
      if (failureTrace != null) {
        System.err.println("Interpreter failed when running " + failureTrace.createStackTraceToThisOneAsString(true, 2));
      }
      System.err.println("Exception: " + ex.getMessage());
      ex.printStackTrace();
      throw ex;
    }
  }

  public static IInterpreter getInterpreter() {
    return InterpreterEvaluationHelper.getInterpreter(INTERPRETER_CATEGORY);
  }
}
