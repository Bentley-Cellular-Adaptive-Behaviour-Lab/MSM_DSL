package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.typechecking.TypecheckingFacade;
import org.iets3.core.expr.base.behavior.IDotTarget__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.iets3.core.expr.base.behavior.IReferenceableType__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_MakeRefTarget_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_MakeRefTarget_NonTypesystemRule() {
  }
  public void applyRule(final SNode mrt, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode ctxType = TypecheckingFacade.getFromContext().getTypeOf(IDotTarget__BehaviorDescriptor.contextExpression_id6zmBjqUivyF.invoke(mrt));
    if (SNodeOperations.isInstanceOf(IDotTarget__BehaviorDescriptor.contextExpression_id6zmBjqUivyF.invoke(mrt), CONCEPTS.ILiteral$FG)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(IDotTarget__BehaviorDescriptor.contextExpression_id6zmBjqUivyF.invoke(mrt), "cannot make a reference from a literal", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7782108600710445668", null, errorTarget);
      }
    }
    if (SNodeOperations.isInstanceOf(ctxType, CONCEPTS.IReferenceableType$st)) {
      if (!((boolean) IReferenceableType__BehaviorDescriptor.canBeReferenced_id6JZACDWNZP9.invoke(SNodeOperations.cast(ctxType, CONCEPTS.IReferenceableType$st)))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(IDotTarget__BehaviorDescriptor.contextExpression_id6zmBjqUivyF.invoke(mrt), "the type " + ctxType + " is not referenceable.", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7782108600709714277", null, errorTarget);
        }
      }
    } else {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(IDotTarget__BehaviorDescriptor.contextExpression_id6zmBjqUivyF.invoke(mrt), "the type " + ctxType + " is not referenceable.", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7782108600709693824", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.MakeRefTarget$Fv;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept ILiteral$FG = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cdaf784L, "org.iets3.core.expr.base.structure.ILiteral");
    /*package*/ static final SInterfaceConcept IReferenceableType$st = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb9a0feL, "org.iets3.core.expr.base.structure.IReferenceableType");
    /*package*/ static final SConcept MakeRefTarget$Fv = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cc7d24bL, "org.iets3.core.expr.base.structure.MakeRefTarget");
  }
}
