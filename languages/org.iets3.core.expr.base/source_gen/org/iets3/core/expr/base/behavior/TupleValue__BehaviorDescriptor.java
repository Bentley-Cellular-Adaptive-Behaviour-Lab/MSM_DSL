package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public final class TupleValue__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe2477421831765aL, "org.iets3.core.expr.base.structure.TupleValue");

  public static final SMethod<String> renderReadable_id4Y0vh0cfqjE = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Y0vh0cfqjE").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();
  public static final SMethod<Boolean> isLValue_idaPhVmWYjn5 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isLValue").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("aPhVmWYjn5").build();
  public static final SMethod<Boolean> isUsedAsLValue_idYMJl2BJIOO = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isUsedAsLValue").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("YMJl2BJIOO").build();
  public static final SMethod<EffectDescriptor> assignmentProducedEffect_id1VmWkC0_H15 = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("assignmentProducedEffect").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1VmWkC0_H15").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(renderReadable_id4Y0vh0cfqjE, effectDescriptor_id6GySMNjjWfO, isLValue_idaPhVmWYjn5, isUsedAsLValue_idYMJl2BJIOO, assignmentProducedEffect_id1VmWkC0_H15);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String renderReadable_id4Y0vh0cfqjE(@NotNull SNode __thisNode__) {
    return "[" + Expression__BehaviorDescriptor.commaSeparatedRR_idHywGhj7zY_.invoke(__thisNode__, SLinkOperations.getChildren(__thisNode__, LINKS.values$FZYa)) + "]";
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return EffectDescriptor.forNodes(SLinkOperations.getChildren(__thisNode__, LINKS.values$FZYa));
  }
  /*package*/ static boolean isLValue_idaPhVmWYjn5(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.values$FZYa)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.ICanBeLValue$lB) && (boolean) ICanBeLValue__BehaviorDescriptor.isLValue_idaPhVmWYjn5.invoke(SNodeOperations.cast(it, CONCEPTS.ICanBeLValue$lB));
      }
    });
  }
  /*package*/ static boolean isUsedAsLValue_idYMJl2BJIOO(@NotNull SNode __thisNode__) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), CONCEPTS.AssignmentExpr$B_);
  }
  /*package*/ static EffectDescriptor assignmentProducedEffect_id1VmWkC0_H15(@NotNull SNode __thisNode__) {
    return EffectDescriptor.forNodes(SLinkOperations.getChildren(__thisNode__, LINKS.values$FZYa));
  }

  /*package*/ TupleValue__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) renderReadable_id4Y0vh0cfqjE(node));
      case 1:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      case 2:
        return (T) ((Boolean) isLValue_idaPhVmWYjn5(node));
      case 3:
        return (T) ((Boolean) isUsedAsLValue_idYMJl2BJIOO(node));
      case 4:
        return (T) ((EffectDescriptor) assignmentProducedEffect_id1VmWkC0_H15(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink values$FZYa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe2477421831765aL, 0xe2477421831765bL, "values");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept ICanBeLValue$lB = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcf93594L, "org.iets3.core.expr.base.structure.ICanBeLValue");
    /*package*/ static final SConcept AssignmentExpr$B_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcfa1bafL, "org.iets3.core.expr.base.structure.AssignmentExpr");
  }
}
