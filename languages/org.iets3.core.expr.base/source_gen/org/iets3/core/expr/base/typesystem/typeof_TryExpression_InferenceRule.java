package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.iets3.core.expr.base.behavior.TryExpression__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_TryExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_TryExpression_InferenceRule() {
  }
  public void applyRule(final SNode te, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode exprType = typeCheckingContext.typeOf(SLinkOperations.getTarget(te, LINKS.expr$TQmf), "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "9214351393732657867", true);
      typeCheckingContext.whenConcrete(exprType, new Runnable() {
        public void run() {
          final List<SNode> nodes = new ArrayList<SNode>();
          ListSequence.fromList(nodes).addElement(SLinkOperations.getTarget(SLinkOperations.getTarget(te, LINKS.successClause$ZBbX), LINKS.expr$aRha));
          ListSequence.fromList(SLinkOperations.getChildren(te, LINKS.errorClauses$g1xK)).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              ListSequence.fromList(nodes).addElement(SLinkOperations.getTarget(it, LINKS.expr$SCnF));
            }
          });
          if (SPropertyOperations.getBoolean(te, PROPS.complete$PYwr) || (!(SPropertyOperations.getBoolean(te, PROPS.complete$PYwr)) && Sequence.fromIterable(TryExpression__BehaviorDescriptor.missingErrorClauses_id12WRc293Um2.invoke(te)).isEmpty())) {
            TypingHelper.inferCommonType(typeCheckingContext, te, nodes);
          } else {
            TypingHelper.doWithListOfTypes(typeCheckingContext, nodes, new _FunctionTypes._void_P1_E0<List<SNode>>() {
              public void invoke(List<SNode> types) {
                final SNode at = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, "org.iets3.core.expr.base.structure.AttemptType"));
                SNode common = TypingHelper.calcCommonTypeCore(types);
                if (SNodeOperations.isInstanceOf(common, CONCEPTS.Type$WK)) {
                  SLinkOperations.setTarget(at, LINKS.successType$Xfwb, SNodeOperations.cast(common, CONCEPTS.Type$WK));
                  Sequence.fromIterable(TryExpression__BehaviorDescriptor.missingErrorClauses_id12WRc293Um2.invoke(te)).visitAll(new IVisitor<SNode>() {
                    public void visit(SNode it) {
                      ListSequence.fromList(SLinkOperations.getChildren(at, LINKS.errorLiterals$XkTy)).addElement(SNodeOperations.copyNode(it));
                    }
                  });
                  {
                    SNode _nodeToCheck_1029348928467 = te;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "5957507632402892160", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "5957507632402891999", true), (SNode) at, _info_12389875345);
                  }
                } else {
                  {
                    SNode _nodeToCheck_1029348928467 = te;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7787163368314575553", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7787163368314575557", true), (SNode) createRuntimeErrorType_8mko0t_a1a0c0a0a2a2a0a0d0a0a1a0b0a0b("No common supertype found between " + types), _info_12389875345);
                  }
                }
              }
            });
          }
        }
      }, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "9214351393732655062", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.TryExpression$s4;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode createRuntimeErrorType_8mko0t_a1a0c0a0a2a2a0a0d0a0a1a0b0a0b(String p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RuntimeErrorType$3c);
    n0.setProperty(PROPS.errorText$leWQ, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$TQmf = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x59f3fec4e77fb444L, "expr");
    /*package*/ static final SContainmentLink successClause$ZBbX = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x59f3fec4e785820eL, "successClause");
    /*package*/ static final SContainmentLink expr$aRha = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL, 0x59f3fec4e78581c0L, "expr");
    /*package*/ static final SContainmentLink errorClauses$g1xK = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x62632b96c1ec86c3L, "errorClauses");
    /*package*/ static final SContainmentLink expr$SCnF = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL, 0x62632b96c1ec83eeL, "expr");
    /*package*/ static final SContainmentLink successType$Xfwb = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, 0x10bcdcc088f63193L, "successType");
    /*package*/ static final SContainmentLink errorLiterals$XkTy = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, 0x10bcdcc088f63195L, "errorLiterals");
  }

  private static final class PROPS {
    /*package*/ static final SProperty complete$PYwr = MetaAdapterFactory.getProperty(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x52ad51a0a003e90eL, "complete");
    /*package*/ static final SProperty errorText$leWQ = MetaAdapterFactory.getProperty(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, 0x113f84956faL, "errorText");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept TryExpression$s4 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, "org.iets3.core.expr.base.structure.TryExpression");
    /*package*/ static final SConcept RuntimeErrorType$3c = MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, "jetbrains.mps.lang.typesystem.structure.RuntimeErrorType");
  }
}
