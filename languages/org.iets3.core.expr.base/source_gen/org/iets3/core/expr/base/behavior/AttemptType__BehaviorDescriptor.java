package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class AttemptType__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, "org.iets3.core.expr.base.structure.AttemptType");

  public static final SMethod<String> getPresentation_idhEwIMiw = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPresentation").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hEwIMiw").build();
  public static final SMethod<Boolean> hasTheSameErrorsAs_id46cplYwOM_s = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasTheSameErrorsAs").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("46cplYwOM_s").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> wrappedType_id6bG6MAFRDvi = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("wrappedType").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6bG6MAFRDvi").build();
  public static final SMethod<SNode> reWrap_id6bG6MAG4Mv3 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("reWrap").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6bG6MAG4Mv3").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> isSameAs_idfIXgjlt4VE = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isSameAs").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("fIXgjlt4VE").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> cloneForNewSuccessType_id2V5hQ5p97U0 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("cloneForNewSuccessType").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2V5hQ5p97U0").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getPresentation_idhEwIMiw, hasTheSameErrorsAs_id46cplYwOM_s, wrappedType_id6bG6MAFRDvi, reWrap_id6bG6MAG4Mv3, isSameAs_idfIXgjlt4VE, cloneForNewSuccessType_id2V5hQ5p97U0);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getPresentation_idhEwIMiw(@NotNull SNode __thisNode__) {
    String errors = "";
    if (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.errorLiterals$XkTy)).isNotEmpty()) {
      errors += "|" + ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.errorLiterals$XkTy)).toListSequence();
    }
    return "attempt[" + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.successType$Xfwb)) + errors + "]";
  }
  /*package*/ static boolean hasTheSameErrorsAs_id46cplYwOM_s(@NotNull SNode __thisNode__, final SNode other) {
    if (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.errorLiterals$XkTy)).count() != ListSequence.fromList(SLinkOperations.getChildren(other, LINKS.errorLiterals$XkTy)).count()) {
      return false;
    }
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.errorLiterals$XkTy)).all(new IWhereFilter<SNode>() {
      public boolean accept(final SNode mine) {
        return ListSequence.fromList(SLinkOperations.getChildren(other, LINKS.errorLiterals$XkTy)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode theirs) {
            return (boolean) ErrorLiteral__BehaviorDescriptor.isSameAs_id69zaTr1Z8aS.invoke(mine, theirs);
          }
        });
      }
    });
  }
  /*package*/ static SNode wrappedType_id6bG6MAFRDvi(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.successType$Xfwb);
  }
  /*package*/ static SNode reWrap_id6bG6MAG4Mv3(@NotNull SNode __thisNode__, SNode newBaseType, SNode originalWrapper) {
    SNode at = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, "org.iets3.core.expr.base.structure.AttemptType"));
    SLinkOperations.setTarget(at, LINKS.successType$Xfwb, SNodeOperations.cast(newBaseType, CONCEPTS.Type$WK));
    ListSequence.fromList(SLinkOperations.getChildren(at, LINKS.errorLiterals$XkTy)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(originalWrapper, CONCEPTS.AttemptType$h8), LINKS.errorLiterals$XkTy)));
    return at;
  }
  /*package*/ static boolean isSameAs_idfIXgjlt4VE(@NotNull SNode __thisNode__, SNode other) {
    if (other == null) {
      return false;
    }
    if (!((SNodeOperations.isInstanceOf(other, CONCEPTS.AttemptType$h8)))) {
      return false;
    }
    SNode casted = SNodeOperations.cast(other, CONCEPTS.AttemptType$h8);
    return (boolean) Type__BehaviorDescriptor.isSameAs_idfIXgjlt4VE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.successType$Xfwb), SLinkOperations.getTarget(casted, LINKS.successType$Xfwb)) && ((boolean) AttemptType__BehaviorDescriptor.hasTheSameErrorsAs_id46cplYwOM_s.invoke(__thisNode__, casted));
  }
  /*package*/ static SNode cloneForNewSuccessType_id2V5hQ5p97U0(@NotNull SNode __thisNode__, SNode t) {
    SNode copy = SNodeOperations.copyNode(__thisNode__);
    SLinkOperations.setTarget(copy, LINKS.successType$Xfwb, t);
    return copy;
  }

  /*package*/ AttemptType__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getPresentation_idhEwIMiw(node));
      case 1:
        return (T) ((Boolean) hasTheSameErrorsAs_id46cplYwOM_s(node, (SNode) parameters[0]));
      case 2:
        return (T) ((SNode) wrappedType_id6bG6MAFRDvi(node));
      case 3:
        return (T) ((SNode) reWrap_id6bG6MAG4Mv3(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 4:
        return (T) ((Boolean) isSameAs_idfIXgjlt4VE(node, (SNode) parameters[0]));
      case 5:
        return (T) ((SNode) cloneForNewSuccessType_id2V5hQ5p97U0(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink errorLiterals$XkTy = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, 0x10bcdcc088f63195L, "errorLiterals");
    /*package*/ static final SContainmentLink successType$Xfwb = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, 0x10bcdcc088f63193L, "successType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept AttemptType$h8 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, "org.iets3.core.expr.base.structure.AttemptType");
  }
}
