package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.behavior.IMayHaveEffect__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_IfExpression_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_IfExpression_NonTypesystemRule() {
  }
  public void applyRule(final SNode ife, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SLinkOperations.getTarget(ife, LINKS.elseSection$kbJ$) == null) {
      if (!((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ife, LINKS.thenPart$bVSc), CONCEPTS.IMayHaveEffect$Gp) && IMayHaveEffect__BehaviorDescriptor.effectDescriptor_id6GySMNjjWfO.invoke(SNodeOperations.cast(SLinkOperations.getTarget(ife, LINKS.thenPart$bVSc), CONCEPTS.IMayHaveEffect$Gp)).modifiesState()))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ife, "an if without an else is only allowed if the then expression has an effect", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "5822875932045004808", null, errorTarget);
        }
      }
    }
    List<SNode> isSomeExpressions = ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(ife, LINKS.condition$bVqa), CONCEPTS.IsSomeExpression$Ae, true, new SAbstractConcept[]{})).toListSequence();
    if (ListSequence.fromList(isSomeExpressions).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.optionalName$AhFr) != null;
      }
    }) && !(TypingHelper.isConditionContainingNamedIsSomeExpressionWellFormed(SLinkOperations.getTarget(ife, LINKS.condition$bVqa)))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(ife, LINKS.condition$bVqa), "'isSome(<expr>) as <name>' is allowed only within a conjunction (&&) of 'isSome(<expr>) as <name>' as a branching condition.", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "3593191806982790851", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.IfExpression$6$;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elseSection$kbJ$ = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x86c00f011503ff8L, "elseSection");
    /*package*/ static final SContainmentLink thenPart$bVSc = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626dL, "thenPart");
    /*package*/ static final SContainmentLink condition$bVqa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626bL, "condition");
    /*package*/ static final SContainmentLink optionalName$AhFr = MetaAdapterFactory.getContainmentLink(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a100207L, 0x32f64a31a1004e8L, "optionalName");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IMayHaveEffect$Gp = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL, "org.iets3.core.expr.base.structure.IMayHaveEffect");
    /*package*/ static final SConcept IsSomeExpression$Ae = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, "org.iets3.core.expr.base.structure.IsSomeExpression");
    /*package*/ static final SConcept IfExpression$6$ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, "org.iets3.core.expr.base.structure.IfExpression");
  }
}
