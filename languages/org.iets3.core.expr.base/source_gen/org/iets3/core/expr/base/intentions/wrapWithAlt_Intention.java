package org.iets3.core.expr.base.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class wrapWithAlt_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public wrapWithAlt_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:7d06857c-251f-4454-ac9c-c398e5200a04(org.iets3.core.expr.base.intentions)", "6652838682323954893"));
  }
  @Override
  public String getPresentation() {
    return "wrapWithAlt";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return PTF.isBooleanType(SNodeOperations.as(TypecheckingFacade.getFromContext().getTypeOf(node), CONCEPTS.Type$WK));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "EXPRESSIONS: " + ("Wrap with 'alt'");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNodeOperations.replaceWithAnother(node, createAlternativesExpression_bkryy4_a0a0a0(SNodeOperations.copyNode(node)));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return wrapWithAlt_Intention.this;
    }
  }
  private static SNode createAlternativesExpression_bkryy4_a0a0a0(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.AlternativesExpression$be);
    {
      SNodeBuilder n1 = n0.forChild(LINKS.alternatives$_UE0).init(CONCEPTS.AltOption$OS);
      n1.forChild(LINKS.when$ywD6).initNode(p0, CONCEPTS.Expression$D_, true);
      n1.forChild(LINKS.then$yx78).init(CONCEPTS.Expression$D_);
      SNodeBuilder n2 = n1.forSibling().init(CONCEPTS.AltOption$OS);
      n2.forChild(LINKS.when$ywD6).init(CONCEPTS.Expression$D_);
      n2.forChild(LINKS.then$yx78).init(CONCEPTS.Expression$D_);
    }
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept AlternativesExpression$be = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L, "org.iets3.core.expr.base.structure.AlternativesExpression");
    /*package*/ static final SConcept AltOption$OS = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, "org.iets3.core.expr.base.structure.AltOption");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink alternatives$_UE0 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L, 0x6ea1ae96e110d6caL, "alternatives");
    /*package*/ static final SContainmentLink when$ywD6 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, 0x6ea1ae96e110d66eL, "when");
    /*package*/ static final SContainmentLink then$yx78 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, 0x6ea1ae96e110d670L, "then");
  }
}
