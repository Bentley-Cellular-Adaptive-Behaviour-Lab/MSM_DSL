package org.iets3.core.expr.base.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("tooltipHint_be70ib_d0", "", false, "org.iets3.core.expr.base.editor.GeneratedHints.tooltipHint_be70ib_d0"), new ConceptEditorHintImpl("interpreterTestCoverage", "Show Interpreter Test Coverage", true, "org.iets3.core.expr.base.editor.org.iets3.interpreterTestCoverage.interpreterTestCoverage"), new ConceptEditorHintImpl("showCoverage", "Show Coverage", true, "org.iets3.core.expr.base.editor.coverage.showCoverage"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractMinMaxExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AltOption_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AlternativesExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AlwaysValue_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new AttemptType_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BangOp_Editor());
      case 6:
        return Arrays.asList(new ConceptEditor[]{new BaseConcept_interpreterTestCoverage_conditionalEditor_Editor_ModelCoverage_Coloring(), new BaseConcept_showCoverage_conditionalEditor_Editor_coverageAnnotation()});
      case 7:
        return Collections.<ConceptEditor>singletonList(new BinaryExpression_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new CastExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CheckTypeConstraintsExpr_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ColonCast_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Contract_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ContractItem_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ConvenientBoolean_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ConvenientValueCond_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new DeRefTarget_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new DefaultValueExpression_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new DocWordRef_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new DotExpression_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new EmptyExpression_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new EmptyValue_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ErrorExpression_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new ErrorLiteral_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ErrorTarget_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Expression_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new FailExpr_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new GenericErrorType_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new HasValueOp_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new ISingleSymbolRef_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new IfElseSection_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new IfExpression_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new ImplicitValidityValExpr_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new InlineMessage_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new Invariant_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new IsSomeExpression_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new JoinType_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new LogicalNotExpression_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new MakeRefTarget_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new MessageValueType_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new NeverValue_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new NoneLiteral_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new NoneType_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new OkTarget_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new OneOfTarget_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new OperatorGroup_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new OperatorTag_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new OptionType_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new ParensExpression_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new PlainConstraint_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new Postcondition_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new PragmaExpression_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new Precondition_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new PrimitiveLiteral_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new PrimitiveType_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new ProgramLocationOp_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new ProgramLocationType_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new RangeTarget_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new ReductionInspector_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new ReferenceType_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new Revealer_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new RevealerThis_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new SimpleExpressionValueInspector_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new SomeValExpr_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new SpecificErrorType_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new SuccessExpression_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new SuccessType_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new SuccessValueExpr_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new ThisExpression_Editor());
      case 68:
        return Arrays.asList(new ConceptEditor[]{new TracerExpression_Editor(), new TracerExpression_tooltipHint_be70ib_d0_Editor()});
      case 69:
        return Collections.<ConceptEditor>singletonList(new TryErrorClause_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new TryExpression_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new TrySuccessClause_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new TupleAccessExpr_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new TupleType_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new TupleValue_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new UnaryMinusExpression_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new ValidityType_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new VoidType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new template_GrammarCellsSideTransformationsMenu());
      case 1:
        return Arrays.asList(new TransformationMenu[]{new proposals(), new tuple()});
      case 2:
        return Collections.<TransformationMenu>singletonList(new dotOnLeft());
      case 3:
        return Collections.<TransformationMenu>singletonList(new IDotTarget_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AbstractMinMaxExpression());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AltOption());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AlternativesExpression());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AlwaysValue());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AndTag());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AssignmentExpr());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AttemptType());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BangOp());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BinaryArithmeticExpression());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BinaryComparisonExpression());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BinaryEqualityExpression());
      case 11:
        return Arrays.asList(new SubstituteMenu[]{new BinaryExpression_SubstituteMenu(), new GrammarCellsSubstituteMenu_BinaryExpression()});
      case 12:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BinaryLogicalExpression());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_CastExpression());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_CheckTypeConstraintsExpr());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ColonCast());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ConstraintAndErrorNode());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Contract());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ContractItem());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ConvenientBoolean());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ConvenientBooleanValue());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ConvenientValueCond());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DeRefTarget());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DefaultValueExpression());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DivExpression());
      case 25:
        return Arrays.asList(new SubstituteMenu[]{new DocWordRef_SubstituteMenu(), new GrammarCellsSubstituteMenu_DocWordRef()});
      case 26:
        return Arrays.asList(new SubstituteMenu[]{new DotExpression_SubstituteMenu(), new GrammarCellsSubstituteMenu_DotExpression()});
      case 27:
        return Arrays.asList(new SubstituteMenu[]{new EmptyExpression_SubstituteMenu(), new GrammarCellsSubstituteMenu_EmptyExpression()});
      case 28:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_EmptyValue());
      case 29:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_EqualsExpression());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ErrorExpression());
      case 31:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ErrorLiteral());
      case 32:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ErrorTarget());
      case 33:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ExprInContract());
      case 34:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Expression());
      case 35:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FailExpr());
      case 36:
        return Arrays.asList(new SubstituteMenu[]{new GenericErrorType_SubstituteMenu(), new GrammarCellsSubstituteMenu_GenericErrorType()});
      case 37:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_GreaterEqualsExpression());
      case 38:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_GreaterExpression());
      case 39:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_HasValueOp());
      case 40:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IAllowDeletionOfDot());
      case 41:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IAllowDotOnLeft());
      case 42:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IAllowsDocInChildExpressions());
      case 43:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IAssertConstraints());
      case 44:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IAttemptType());
      case 45:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IBigExpression());
      case 46:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IBlockLike());
      case 47:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ICanBeLValue());
      case 48:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ICollectionType());
      case 49:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IContainmentStackMember());
      case 50:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IContextAssistantTypeProvider());
      case 51:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IContextTypeProvider());
      case 52:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IContextTypedOp());
      case 53:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IContracted());
      case 54:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_IControlAdvancedFeatures_old(), new IControlAdvancedFeatures_old_SubstituteMenu()});
      case 55:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IDeclarativelyInterpretable());
      case 56:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IDocumentableWordContainer());
      case 57:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IDocumentableWordProvider());
      case 58:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IDotTarget());
      case 59:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IHasBaseType());
      case 60:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IIgnoreTrivialErrorsContext());
      case 61:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IIsSingleSymbol());
      case 62:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IJoinTypeContext());
      case 63:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ILiteral());
      case 64:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IMainSlot());
      case 65:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IMayAllowEffect());
      case 66:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IMayHaveEffect());
      case 67:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IMayReadMutableState());
      case 68:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IMultiTraceRoot());
      case 69:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_INameQualifier());
      case 70:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_INeverAllowDot());
      case 71:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IOptionDerefContext());
      case 72:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IOptionallyTyped());
      case 73:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IParameterizedTypeSupportsEquals());
      case 74:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IProgramLocationProvider());
      case 75:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IProvidePathConstraints());
      case 76:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IReducableExpression());
      case 77:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IRef());
      case 78:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IReferenceableType());
      case 79:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IRunningInterpreterContext());
      case 80:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ISSConstrainedValue());
      case 81:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ISSConstrainedValueRef());
      case 82:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ISSDelegatingType());
      case 83:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ISSItValueRef());
      case 84:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IScopeFilterer());
      case 85:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ISingleSymbolRef());
      case 86:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IStructuredSyntax());
      case 87:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITargetThatCanDealWithNix());
      case 88:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITraceRoot());
      case 89:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITypeFromMultiple());
      case 90:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITypeOverridingContext());
      case 91:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITypeSupportsDefaultValue());
      case 92:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITypeSupportsProposals());
      case 93:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITypeable());
      case 94:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ITyped());
      case 95:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IValidOtherwiseContainer());
      case 96:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IVoidContext());
      case 97:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IWantNewLine());
      case 98:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IfElseSection());
      case 99:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IfExpression());
      case 100:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ImplicitValidityValExpr());
      case 101:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_InlineMessage());
      case 102:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Invariant());
      case 103:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IsSomeExpression());
      case 104:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_JoinType());
      case 105:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LessEqualsExpression());
      case 106:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LessExpression());
      case 107:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LogicalAndExpression());
      case 108:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LogicalIffExpression());
      case 109:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LogicalImpliesExpression());
      case 110:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LogicalNotExpression());
      case 111:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LogicalOrExpression());
      case 112:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MakeRefTarget());
      case 113:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MaxExpression());
      case 114:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MessageValueType());
      case 115:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MinExpression());
      case 116:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MinusExpression());
      case 117:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ModExpression());
      case 118:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MulExpression());
      case 119:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MulTag());
      case 120:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NeverValue());
      case 121:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NonStrictEqualsExpression());
      case 122:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NoneLiteral());
      case 123:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NoneType());
      case 124:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NotEqualsExpression());
      case 125:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OkTarget());
      case 126:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OneOfTarget());
      case 127:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OperatorGroup());
      case 128:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OperatorTag());
      case 129:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OptionOrExpression());
      case 130:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OptionType());
      case 131:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OrTag());
      case 132:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ParensExpression());
      case 133:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PlainConstraint());
      case 134:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PlusExpression());
      case 135:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PlusTag());
      case 136:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Postcondition());
      case 137:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PragmaDisableCaching());
      case 138:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PragmaExpression());
      case 139:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Precondition());
      case 140:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PrimitiveLiteral());
      case 141:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PrimitiveType());
      case 142:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ProgramLocationOp());
      case 143:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_ProgramLocationType(), new ProgramLocationType_SubstituteMenu()});
      case 144:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ProgramLocationUrlOp());
      case 145:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_RangeTarget());
      case 146:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ReductionInspector());
      case 147:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ReferenceType());
      case 148:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Revealer());
      case 149:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_RevealerThis());
      case 150:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_SimpleExpressionValueInspector());
      case 151:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_SomeValExpr(), new SomeValExpr_SubstituteMenu()});
      case 152:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_SpecificErrorType(), new SpecificErrorType_SubstituteMenu()});
      case 153:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_SuccessExpression());
      case 154:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_SuccessType(), new SuccessType_SubstituteMenu()});
      case 155:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_SuccessValueExpr(), new SuccessValueExpr_SubstituteMenu()});
      case 156:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ThisExpression());
      case 157:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_TracerExpression(), new TracerExpression_SubstituteMenu()});
      case 158:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TryErrorClause());
      case 159:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TryExpression());
      case 160:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TrySuccessClause());
      case 161:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_TupleAccessExpr(), new TupleAccessExpr_SubstituteMenu()});
      case 162:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TupleType());
      case 163:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TupleValue());
      case 164:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Type());
      case 165:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_UnaryExpression());
      case 166:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_UnaryMinusExpression());
      case 167:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_ValidityType(), new ValidityType_SubstituteMenu()});
      case 168:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_VoidType());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "org.iets3.core.expr.base.editor.DocWordRef_SmartReference":
              return Arrays.asList(new SubstituteMenu[]{new DocWordRef_SmartReference()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3eL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x212b38c1011c3e9cL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2d8b76405dcec884L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500635b4b0bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x52a5783d23e687ffL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e561L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d7cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cf47a6cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x60362815255f2e30L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1d7438cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35fb8ae75bfe7cc9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148b5e1f0L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500636a361dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b6b0ca1fd5e3baL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47bcdL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35fb8ae75bfd4263L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb470014aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500642440d1L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77b9aa812L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5edL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7edef95a36fc3555L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f6aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cc7d24bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ac768faL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d5dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cae2cf5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca934a5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e50063654b25L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2e85d8007a529cb6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca93310L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86d2f11fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff2422571594L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5ecL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4d521af227ea4d32L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x744a56d3ba8dc333L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f8572e33L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade190cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade142dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1f284427516350b0L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb65941dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb8fcfcL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x447c2333802f6f96L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7dfd4c72d47fa4dcL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xeb308f771ea15b3L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47becL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x52ea52e64e450e9aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47a94L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1f940d6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x43d0987d9bc38737L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x23141f44f4c5014aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe2477421831765aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cdddbbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500635b4b5fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7253306fa30e8ecdL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45d6f895c8b83417L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3eL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680d6a7L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcfa1bafL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x212b38c1011c3e9cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f93L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6d99L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdbe7L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2d8b76405dcec884L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500635b4b0bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x52a5783d23e687ffL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x192c2b4e0b24597bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e561L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d7cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cf47a6cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x60362815255f2e30L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cac63bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1d7438cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35fb8ae75bfe7cc9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6dc9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148b5e1f0L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500636a361dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff24221414bfL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b6b0ca1fd5e3baL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47bcdL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5011L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f94L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35fb8ae75bfd4263L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45d6f895c8d2a52dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45d6f895c8b83417L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35d20fc48d83ecebL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10725209af7503e9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c7518fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f93b4L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x70f55ca872ff038L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcf93594L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5f335af1e96375a1L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x649a3edce7d544d9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x954cdf0b62fb3cbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x43d0987d9bc3829cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x68c5f3e3753315e3L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e4a3L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x69e8e71b93a1b282L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x78c2a0e7debf5afL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f62013b8L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95190L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x363cad8849174f6cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x364e1fe0b7f278b5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1bdab3d006f14c7L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x54992997431544ecL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cdaf784L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x241656660e75685L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35d20fc48dec6791L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xf4b54f714ba06c9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x488adb107e398e30L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x72b77efdaa227a88L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x588e25ed5b40bd76L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ab0b7cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7c29ed49aa581218L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77aced6f6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3dabdba733bd8c80L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb63e034L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x66ecc7903939fab1L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb9a0feL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45fe014ac8835911L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabcL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x626f78ee82fe21a5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x626f78ee828dc471L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb4700a4aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb470014aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7a477bfec265d9b6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x218c4f79a9499b36L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x760b48e4e8448dc2L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10bcdcc088efeb1aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x521b6644acb5b47L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x60362815255ee08fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x954cdf0b5f6ee74L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4f3180ef560f8ee0L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x622163b5c76a6c48L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x50ccd0fa593272c9L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7253306fa30e8eeaL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xfbdc2a1c9b969d2L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500642440d1L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77b9aa812L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5edL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7edef95a36fc3555L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5013L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5012L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdd39L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x753e449f1c7cd7bcL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x15035178cd135185L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f6aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdcbbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cc7d24bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e342ea99L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ac768faL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e342ea9aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cac5a5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x53e292c5b9d6ff5aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c9a56fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x76cdcb8c5573ff6fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d5dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x31dd94e932252d34L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cae2cf5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca934a5L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6dcaL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e50063654b25L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2e85d8007a529cb6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb4da44aaL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca93310L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6f1c76e8c8b0c30dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86d2f11fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff2422571594L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c9a4f2L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x76cdcb8c55662b4eL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5ecL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4d521af227ea5dd2L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4d521af227ea4d32L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x744a56d3ba8dc333L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f8572e33L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade190cL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade142dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade44bfL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1f284427516350b0L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb65941dL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb8fcfcL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x447c2333802f6f96L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7dfd4c72d47fa4dcL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xeb308f771ea15b3L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47becL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x52ea52e64e450e9aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47a94L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1f940d6L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x43d0987d9bc38737L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x23141f44f4c5014aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe2477421831765aL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cdddbbL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500635b4b5fL), MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7253306fa30e8ecdL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L)).seal();
}
