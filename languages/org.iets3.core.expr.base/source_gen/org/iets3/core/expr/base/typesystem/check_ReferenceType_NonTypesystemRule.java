package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.behavior.IReferenceableType__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_ReferenceType_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ReferenceType_NonTypesystemRule() {
  }
  public void applyRule(final SNode refT, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode bt = SLinkOperations.getTarget(refT, LINKS.baseType$M6Aa);
    if (!(SNodeOperations.isInstanceOf(bt, CONCEPTS.IReferenceableType$st)) || (SNodeOperations.isInstanceOf(bt, CONCEPTS.IReferenceableType$st) && !((boolean) IReferenceableType__BehaviorDescriptor.canBeReferenced_id6JZACDWNZP9.invoke(SNodeOperations.cast(bt, CONCEPTS.IReferenceableType$st))))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(bt, "base type " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(bt) + " is not referenceable", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7782108600708211249", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ReferenceType$sW;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink baseType$M6Aa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb8fcfcL, 0x6bff9a8a7cb8fcfdL, "baseType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IReferenceableType$st = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb9a0feL, "org.iets3.core.expr.base.structure.IReferenceableType");
    /*package*/ static final SConcept ReferenceType$sW = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb8fcfcL, "org.iets3.core.expr.base.structure.ReferenceType");
  }
}
