package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.mpsutil.interpreter.behavior.IInterpreterWrapperType__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_AbstractMinMaxExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_AbstractMinMaxExpression_InferenceRule() {
  }
  public void applyRule(final SNode amme, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(amme, LINKS.values$W8VE)).isEmpty()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(amme, "empty list of values is not allowed", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2152957725074374801", null, errorTarget);
      }
    } else {
      TypingHelper.doWithListOfTypes(typeCheckingContext, SLinkOperations.getChildren(amme, LINKS.values$W8VE), new _FunctionTypes._void_P1_E0<List<SNode>>() {
        public void invoke(List<SNode> types) {
          final SNode elementSupertype = PTF.computeSupertype(types, false, TypeChecker.getInstance().getSubtypingManager());
          {
            SNode _nodeToCheck_1029348928467 = amme;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2152957725070480965", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2152957725070478824", true), (SNode) elementSupertype, _info_12389875345);
          }

          if (SNodeOperations.isInstanceOf(elementSupertype, CONCEPTS.IInterpreterWrapperType$KD)) {
            SNode wrappedType = IInterpreterWrapperType__BehaviorDescriptor.wrappedType_id6bG6MAFRDvi.invoke(SNodeOperations.cast(elementSupertype, CONCEPTS.IInterpreterWrapperType$KD));
            {
              SNode _nodeToCheck_1029348928467 = wrappedType;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7873127098229773519", 0, null);
              typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "7873127098229773756", true), (SNode) PTF.createRealType(null), false, true, _info_12389875345);
            }
          } else {
            {
              SNode _nodeToCheck_1029348928467 = amme;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2152957725070487389", 0, null);
              typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2152957725070485735", true), (SNode) PTF.createRealType(null), false, true, _info_12389875345);
            }
          }
        }
      });
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.AbstractMinMaxExpression$xB;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink values$W8VE = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L, 0x1de0d7a4e3414023L, "values");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IInterpreterWrapperType$KD = MetaAdapterFactory.getInterfaceConcept(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x62ec1b29abde62acL, "com.mbeddr.mpsutil.interpreter.structure.IInterpreterWrapperType");
    /*package*/ static final SConcept AbstractMinMaxExpression$xB = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L, "org.iets3.core.expr.base.structure.AbstractMinMaxExpression");
  }
}
