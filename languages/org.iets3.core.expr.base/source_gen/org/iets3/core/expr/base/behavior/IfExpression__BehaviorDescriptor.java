package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.traceExplorer.plugin.ITraceRecord;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import java.util.ArrayList;
import java.util.Objects;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public final class IfExpression__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, "org.iets3.core.expr.base.structure.IfExpression");

  public static final SMethod<Boolean> requiresMultiline_id6NJfo6_sQuA = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("requiresMultiline").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6NJfo6_sQuA").build();
  public static final SMethod<String> renderReadable_id4Y0vh0cfqjE = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Y0vh0cfqjE").build();
  public static final SMethod<String> invalidUseErrorMessage_id5ye9uPrgjJa = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("invalidUseErrorMessage").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrgjJa").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> findTheSomeQueries_id5ye9uPrkFwU = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("findTheSomeQueries").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrkFwU").build();
  public static final SMethod<Boolean> isValExpressionUsedLegally_id5ye9uPrkHVH = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isValExpressionUsedLegally").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrkHVH").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<ITraceRecord> constructCustomFrame_id2kg0xI3thT2 = new SMethodBuilder<ITraceRecord>(new SJavaCompoundTypeImpl(ITraceRecord.class)).name("constructCustomFrame").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2kg0xI3thT2").build(SMethodBuilder.createJavaParameter(ITraceRecord.class, ""), SMethodBuilder.createJavaParameter(ITraceRecord.class, ""));
  public static final SMethod<Void> addChildToMainSlot_id91pmpwTPqy = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addChildToMainSlot").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("91pmpwTPqy").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String[]> getMultiSlotNames_id91pmpx1Rgq = new SMethodBuilder<String[]>(new SJavaCompoundTypeImpl(String[].class)).name("getMultiSlotNames").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("91pmpx1Rgq").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();
  public static final SMethod<String> allowsEffectForNode_idORfz$DS6Ap = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("allowsEffectForNode").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ORfz$DS6Ap").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getPathConstraintsTo_id3QFQUsNJoMc = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getPathConstraintsTo").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3QFQUsNJoMc").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(requiresMultiline_id6NJfo6_sQuA, renderReadable_id4Y0vh0cfqjE, invalidUseErrorMessage_id5ye9uPrgjJa, findTheSomeQueries_id5ye9uPrkFwU, isValExpressionUsedLegally_id5ye9uPrkHVH, constructCustomFrame_id2kg0xI3thT2, addChildToMainSlot_id91pmpwTPqy, getMultiSlotNames_id91pmpx1Rgq, effectDescriptor_id6GySMNjjWfO, allowsEffectForNode_idORfz$DS6Ap, getPathConstraintsTo_id3QFQUsNJoMc);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SLinkOperations.setNewChild(__thisNode__, LINKS.elseSection$kbJ$, null);
  }

  /*package*/ static boolean requiresMultiline_id6NJfo6_sQuA(@NotNull SNode __thisNode__) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa), CONCEPTS.IBigExpression$gz) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc), CONCEPTS.IBigExpression$gz) || ((SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$) != null) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v), CONCEPTS.IBigExpression$gz));
  }
  /*package*/ static String renderReadable_id4Y0vh0cfqjE(@NotNull SNode __thisNode__) {
    String common = "if " + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa)) + " then " + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc));
    if (SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$) != null) {
      return common + " else " + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v));
    } else {
      return common;
    }
  }
  /*package*/ static String invalidUseErrorMessage_id5ye9uPrgjJa(@NotNull SNode __thisNode__, SNode some) {
    if (SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa) == some) {
      return null;
    }
    List<SNode> descendants = SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa), null, true, new SAbstractConcept[]{});
    Iterable<SNode> descendantsWithoutSomeContents = ListSequence.fromList(descendants).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getNodeAncestor(it, CONCEPTS.IsSomeExpression$Ae, false, false) == null;
      }
    });
    if (Sequence.fromIterable(descendantsWithoutSomeContents).contains(some) && Sequence.fromIterable(descendantsWithoutSomeContents).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.LogicalAndExpression$m8) || SNodeOperations.isInstanceOf(it, CONCEPTS.IsSomeExpression$Ae);
      }
    })) {
      return null;
    }
    return "cannot be used here; only allowed as the single condition of 'if', or as part of an '&&'";
  }
  /*package*/ static Iterable<SNode> findTheSomeQueries_id5ye9uPrkFwU(@NotNull SNode __thisNode__) {
    return SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa), CONCEPTS.IsSomeExpression$Ae, true, new SAbstractConcept[]{});
  }
  /*package*/ static boolean isValExpressionUsedLegally_id5ye9uPrkHVH(@NotNull SNode __thisNode__, SNode someVal) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc) == someVal || ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc), null, false, new SAbstractConcept[]{})).contains(someVal);
  }
  /*package*/ static ITraceRecord constructCustomFrame_id2kg0xI3thT2(@NotNull SNode __thisNode__, ITraceRecord parent, ITraceRecord original) {
    ComputationTrace ct = (ComputationTrace) original;
    ComputationTrace res = new ComputationTrace(__thisNode__);
    res.setValue(ct.getTracedValue());
    res.addChild(ct.descendantForNode(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa)), true, "cond");
    res.addChild(ct.descendantForNode(SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc)), true, "then");
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$) != null)) {
      res.addChild(ct.descendantForNode(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v)), true, "else");
    }
    return res;
  }
  /*package*/ static void addChildToMainSlot_id91pmpwTPqy(@NotNull SNode __thisNode__, SNode c, String slot) {
    SNode expr = SNodeOperations.cast(c, CONCEPTS.Expression$D_);
    if (slot == null || slot.equals("condition")) {
      SLinkOperations.setTarget(__thisNode__, LINKS.condition$bVqa, expr);
    } else if (slot.equals("then")) {
      SLinkOperations.setTarget(__thisNode__, LINKS.thenPart$bVSc, expr);
    } else {
      SLinkOperations.setTarget(SLinkOperations.setNewChild(__thisNode__, LINKS.elseSection$kbJ$, null), LINKS.expr$Fg_v, expr);
    }
  }
  /*package*/ static String[] getMultiSlotNames_id91pmpx1Rgq(@NotNull SNode __thisNode__) {
    return new String[]{"condition", "then", "else"};
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return EffectDescriptor.forNodes(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa), SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc), SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$));
  }
  /*package*/ static String allowsEffectForNode_idORfz$DS6Ap(@NotNull SNode __thisNode__, SNode n) {
    if (n == SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa)) {
      return EffectDescriptor.reads().allows(n, "only read effects allowed for condition");
    }
    return IMayAllowEffect__BehaviorDescriptor.allowsEffectForNode_idORfz$DS6Ap.invoke0(__thisNode__, CONCEPTS.IMayAllowEffect$xY, n);
  }
  /*package*/ static List<SNode> getPathConstraintsTo_id3QFQUsNJoMc(@NotNull SNode __thisNode__, SNode descendant) {
    List<SNode> ancestors = Sequence.fromIterable(Sequence.<SNode>singleton(descendant)).concat(ListSequence.fromList(SNodeOperations.getNodeAncestors(descendant, null, false))).toListSequence();
    int index = ListSequence.fromList(ancestors).indexOf(__thisNode__);
    if (index < 0) {
      String descendant_pointer = "null";
      if ((descendant != null)) {
        descendant_pointer = SNodeOperations.getPointer(descendant).toString();
      }
      throw new RuntimeException("node " + descendant_pointer + " is not reachable from " + SNodeOperations.getPointer(__thisNode__));
    }
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    if (Objects.equals(ListSequence.fromList(ancestors).getElement(index - 1), SLinkOperations.getTarget(__thisNode__, LINKS.thenPart$bVSc))) {
      ListSequence.fromList(result).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa)));
    } else if (Objects.equals(ListSequence.fromList(ancestors).getElement(index - 1), SLinkOperations.getTarget(__thisNode__, LINKS.elseSection$kbJ$))) {
      ListSequence.fromList(result).addElement(createLogicalNotExpression_bln1su_a0a0a0e0k(SNodeOperations.copyNode(SLinkOperations.getTarget(__thisNode__, LINKS.condition$bVqa))));
    }
    return result;
  }

  /*package*/ IfExpression__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) requiresMultiline_id6NJfo6_sQuA(node));
      case 1:
        return (T) ((String) renderReadable_id4Y0vh0cfqjE(node));
      case 2:
        return (T) ((String) invalidUseErrorMessage_id5ye9uPrgjJa(node, (SNode) parameters[0]));
      case 3:
        return (T) ((Iterable<SNode>) findTheSomeQueries_id5ye9uPrkFwU(node));
      case 4:
        return (T) ((Boolean) isValExpressionUsedLegally_id5ye9uPrkHVH(node, (SNode) parameters[0]));
      case 5:
        return (T) ((ITraceRecord) constructCustomFrame_id2kg0xI3thT2(node, (ITraceRecord) parameters[0], (ITraceRecord) parameters[1]));
      case 6:
        addChildToMainSlot_id91pmpwTPqy(node, (SNode) parameters[0], (String) parameters[1]);
        return null;
      case 7:
        return (T) ((String[]) getMultiSlotNames_id91pmpx1Rgq(node));
      case 8:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      case 9:
        return (T) ((String) allowsEffectForNode_idORfz$DS6Ap(node, (SNode) parameters[0]));
      case 10:
        return (T) ((List<SNode>) getPathConstraintsTo_id3QFQUsNJoMc(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createLogicalNotExpression_bln1su_a0a0a0e0k(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.LogicalNotExpression$QD);
    n0.forChild(LINKS.expr$Hji0).initNode(p0, CONCEPTS.Expression$D_, true);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elseSection$kbJ$ = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x86c00f011503ff8L, "elseSection");
    /*package*/ static final SContainmentLink expr$Fg_v = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL, 0x86c00f011503ffeL, "expr");
    /*package*/ static final SContainmentLink condition$bVqa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626bL, "condition");
    /*package*/ static final SContainmentLink thenPart$bVSc = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626dL, "thenPart");
    /*package*/ static final SContainmentLink expr$Hji0 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L, 0x46ff3b3d86cd0f6bL, "expr");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IBigExpression$gz = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f93b4L, "org.iets3.core.expr.base.structure.IBigExpression");
    /*package*/ static final SConcept IsSomeExpression$Ae = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, "org.iets3.core.expr.base.structure.IsSomeExpression");
    /*package*/ static final SConcept LogicalAndExpression$m8 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdd39L, "org.iets3.core.expr.base.structure.LogicalAndExpression");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
    /*package*/ static final SInterfaceConcept IMayAllowEffect$xY = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L, "org.iets3.core.expr.base.structure.IMayAllowEffect");
    /*package*/ static final SConcept LogicalNotExpression$QD = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f6aL, "org.iets3.core.expr.base.structure.LogicalNotExpression");
  }
}
