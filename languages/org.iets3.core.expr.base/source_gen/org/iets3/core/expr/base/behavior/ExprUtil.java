package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class ExprUtil {

  public static SNode joinWithAnd(List<SNode> all) {
    int p = 0;
    SNode cur = SNodeOperations.copyNode(ListSequence.fromList(all).getElement(p));
    while (p < ListSequence.fromList(all).count() - 1) {
      SNode and = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdd39L, "org.iets3.core.expr.base.structure.LogicalAndExpression"));
      SLinkOperations.setTarget(and, LINKS.left$zxUa, cur);
      SLinkOperations.setTarget(and, LINKS.right$zBjx, SNodeOperations.copyNode(ListSequence.fromList(all).getElement(p + 1)));
      cur = and;
      p++;
    }
    return cur;
  }
  public static SNode joinWithOr(List<SNode> all) {
    int p = 0;
    SNode cur = SNodeOperations.copyNode(ListSequence.fromList(all).getElement(p));
    while (p < ListSequence.fromList(all).count() - 1) {
      SNode or = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdcbbL, "org.iets3.core.expr.base.structure.LogicalOrExpression"));
      SLinkOperations.setTarget(or, LINKS.left$zxUa, cur);
      SLinkOperations.setTarget(or, LINKS.right$zBjx, SNodeOperations.copyNode(ListSequence.fromList(all).getElement(p + 1)));
      cur = or;
      p++;
    }
    return cur;
  }



  private static final class LINKS {
    /*package*/ static final SContainmentLink left$zxUa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, 0x46ff3b3d86c99c16L, "left");
    /*package*/ static final SContainmentLink right$zBjx = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, 0x46ff3b3d86c99c18L, "right");
  }
}
