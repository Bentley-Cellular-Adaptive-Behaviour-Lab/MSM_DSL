package org.iets3.core.expr.base.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class SuccessValueExpr_Constraints extends BaseConstraintsDescriptor {
  public SuccessValueExpr_Constraints() {
    super(CONCEPTS.SuccessValueExpr$vV);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.try$MC5E, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_izqtjx_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forResolvableElements(SNodeOperations.getNodeAncestors(_context.getContextNode(), CONCEPTS.TryExpression$s4, true));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_izqtjx_a0a0a0a0a1a0a0a0c = new SNodePointer("r:9750d418-880f-460d-9880-d67dd111722d(org.iets3.core.expr.base.constraints)", "7089558164910719299");

  private static final class CONCEPTS {
    /*package*/ static final SConcept SuccessValueExpr$vV = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1f940d6L, "org.iets3.core.expr.base.structure.SuccessValueExpr");
    /*package*/ static final SConcept TryExpression$s4 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, "org.iets3.core.expr.base.structure.TryExpression");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink try$MC5E = MetaAdapterFactory.getReferenceLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1f940d6L, 0x62632b96c1f940d7L, "try");
  }
}
