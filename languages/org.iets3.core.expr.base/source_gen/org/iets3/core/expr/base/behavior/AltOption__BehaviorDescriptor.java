package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class AltOption__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, "org.iets3.core.expr.base.structure.AltOption");

  public static final SMethod<String> renderReadable_idHywGhj7ndd = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("HywGhj7ndd").build();
  public static final SMethod<String> asString_id6iqfHNBPkjP = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("asString").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6iqfHNBPkjP").build();
  public static final SMethod<Iterable<SNode>> getAllOtherwiseSiblings_id53cOfDpcBbK = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getAllOtherwiseSiblings").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("53cOfDpcBbK").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> isOtherwise_id74geI_h4G8M = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isOtherwise").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("74geI_h4G8M").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();
  public static final SMethod<String> allowsEffectForNode_idORfz$DS6Ap = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("allowsEffectForNode").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ORfz$DS6Ap").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(renderReadable_idHywGhj7ndd, asString_id6iqfHNBPkjP, getAllOtherwiseSiblings_id53cOfDpcBbK, isOtherwise_id74geI_h4G8M, effectDescriptor_id6GySMNjjWfO, allowsEffectForNode_idORfz$DS6Ap);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String renderReadable_idHywGhj7ndd(@NotNull SNode __thisNode__) {
    return Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.when$ywD6)) + " => " + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.then$yx78));
  }
  /*package*/ static String asString_id6iqfHNBPkjP(@NotNull SNode __thisNode__) {
    return "[AltOption] " + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.when$ywD6));
  }
  /*package*/ static Iterable<SNode> getAllOtherwiseSiblings_id53cOfDpcBbK(@NotNull SNode __thisNode__, SNode otherwiseLiteral) {
    return SLinkOperations.collect(SNodeOperations.ofConcept(SNodeOperations.getAllSiblings(__thisNode__, true), CONCEPTS.AltOption$OS), LINKS.when$ywD6);
  }
  /*package*/ static boolean isOtherwise_id74geI_h4G8M(@NotNull SNode __thisNode__) {
    return PTF.isOtherwiseLiteral(SLinkOperations.getTarget(__thisNode__, LINKS.when$ywD6));
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return EffectDescriptor.forNodes(SLinkOperations.getTarget(__thisNode__, LINKS.then$yx78), SLinkOperations.getTarget(__thisNode__, LINKS.when$ywD6));
  }
  /*package*/ static String allowsEffectForNode_idORfz$DS6Ap(@NotNull SNode __thisNode__, SNode n) {
    if (n == SLinkOperations.getTarget(__thisNode__, LINKS.when$ywD6)) {
      return EffectDescriptor.reads().allows(n, "only read effects allowed for when");
    }
    return null;
  }

  /*package*/ AltOption__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) renderReadable_idHywGhj7ndd(node));
      case 1:
        return (T) ((String) asString_id6iqfHNBPkjP(node));
      case 2:
        return (T) ((Iterable<SNode>) getAllOtherwiseSiblings_id53cOfDpcBbK(node, (SNode) parameters[0]));
      case 3:
        return (T) ((Boolean) isOtherwise_id74geI_h4G8M(node));
      case 4:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      case 5:
        return (T) ((String) allowsEffectForNode_idORfz$DS6Ap(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink then$yx78 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, 0x6ea1ae96e110d670L, "then");
    /*package*/ static final SContainmentLink when$ywD6 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, 0x6ea1ae96e110d66eL, "when");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept AltOption$OS = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, "org.iets3.core.expr.base.structure.AltOption");
  }
}
