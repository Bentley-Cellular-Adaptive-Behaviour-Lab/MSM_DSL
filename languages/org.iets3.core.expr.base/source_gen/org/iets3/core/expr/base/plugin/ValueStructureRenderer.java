package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;

public class ValueStructureRenderer {

  private RenderNode rootNode;

  public ValueStructureRenderer(Object root) {
    rootNode = new RenderNode("root", "root");
    render(root, rootNode);
  }

  public void render(Object r, RenderNode context) {
    if (r instanceof IRenderable) {
      RenderNode tt = ((IRenderable) r).renderTree(this);
      context.addChild(tt);
    } else if (r instanceof Collection) {
      Collection coll = ((Collection) r);
      RenderNode collNode = new RenderNode(r, "(collection|" + coll.size() + ")", true);
      context.addChild(collNode);
      Iterator<Object> iter = coll.iterator();
      while (iter.hasNext()) {
        Object n = iter.next();
        render(n, collNode);
      }
    } else if (r instanceof Map) {
      Map m = ((Map) r);
      RenderNode collNode = new RenderNode(r, "(map|" + m.size() + ")", true);
      context.addChild(collNode);
      Set<Map.Entry<Object, Object>> entrySet = m.entrySet();
      for (Map.Entry<Object, Object> entry : SetSequence.fromSet(entrySet)) {
        render(entry, collNode);
      }
    } else if (r instanceof Map.Entry) {
      Map.Entry entry = (Map.Entry) r;
      RenderNode keyNode = new RenderNode(entry, entry.getKey().toString() + " -> ");
      context.addChild(keyNode);
      render(entry.getValue(), keyNode);
      RenderNode valueNode = ListSequence.fromList(keyNode.children()).first();
      if (valueNode != null) {
        valueNode.setOnSameLine();
      }
    } else {
      RenderNode def = new RenderNode(r, r.toString());
      context.addChild(def);
    }
  }


  @Override
  public String toString() {
    return this.rootNode.getChild(0).render("");
  }

  public EditorCell toEditorCell(EditorContext editorContext, SNode node) {
    return rootNode.getChild(0).renderCell(editorContext, node);
  }


}
