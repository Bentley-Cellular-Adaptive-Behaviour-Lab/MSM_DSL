package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import com.mbeddr.mpsutil.traceExplorer.plugin.ITraceRecord;
import com.mbeddr.mpsutil.traceExplorer.plugin.IRerunnableTraceRecord;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import com.mbeddr.mpsutil.traceExplorer.plugin.ITraceRerunner;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ITraceRoot__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x760b48e4e8448dc2L, "org.iets3.core.expr.base.structure.ITraceRoot");

  public static final SMethod<Boolean> canActAsTraceRoot_id7obiejCh8RB = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canActAsTraceRoot").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7obiejCh8RB").build();
  public static final SMethod<Boolean> isTraceAvailable_id7lHetQyBQe3 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isTraceAvailable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7lHetQyBQe3").build();
  public static final SMethod<String> getTabTitle_id2CFPPn7rG02 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTabTitle").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2CFPPn7rG02").build();
  public static final SMethod<ITraceRecord> getRootTrace_id7obiejCh8Tv = new SMethodBuilder<ITraceRecord>(new SJavaCompoundTypeImpl(ITraceRecord.class)).name("getRootTrace").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7obiejCh8Tv").build();
  public static final SMethod<IRerunnableTraceRecord> defaultRerunnableInterpreted_id5IR_boIcg35 = new SMethodBuilder<IRerunnableTraceRecord>(new SJavaCompoundTypeImpl(IRerunnableTraceRecord.class)).name("defaultRerunnableInterpreted").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5IR_boIcg35").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(canActAsTraceRoot_id7obiejCh8RB, isTraceAvailable_id7lHetQyBQe3, getTabTitle_id2CFPPn7rG02, getRootTrace_id7obiejCh8Tv, defaultRerunnableInterpreted_id5IR_boIcg35);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean canActAsTraceRoot_id7obiejCh8RB(@NotNull SNode __thisNode__) {
    return true;
  }
  /*package*/ static boolean isTraceAvailable_id7lHetQyBQe3(@NotNull SNode __thisNode__) {
    return ITraceRoot__BehaviorDescriptor.getRootTrace_id7obiejCh8Tv.invoke(__thisNode__) != null;
  }
  /*package*/ static String getTabTitle_id2CFPPn7rG02(@NotNull SNode __thisNode__) {
    return ((String) BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(__thisNode__));
  }
  /*package*/ static IRerunnableTraceRecord defaultRerunnableInterpreted_id5IR_boIcg35(@NotNull SNode __thisNode__) {
    final SNode n = __thisNode__;
    final ITraceRerunner runner = new ITraceRerunner() {
      public IRerunnableTraceRecord rerun() {
        ValueAndTrace r = IETS3ExprEvalHelper.evaluateWithTrace(n);
        ComputationTrace trace = r.trace;
        trace.setRerunner(this);
        return trace;
      }
    };
    return runner.rerun();
  }

  /*package*/ ITraceRoot__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) canActAsTraceRoot_id7obiejCh8RB(node));
      case 1:
        return (T) ((Boolean) isTraceAvailable_id7lHetQyBQe3(node));
      case 2:
        return (T) ((String) getTabTitle_id2CFPPn7rG02(node));
      case 4:
        return (T) ((IRerunnableTraceRecord) defaultRerunnableInterpreted_id5IR_boIcg35(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
