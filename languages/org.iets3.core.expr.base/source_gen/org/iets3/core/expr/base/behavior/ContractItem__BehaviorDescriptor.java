package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class ContractItem__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL, "org.iets3.core.expr.base.structure.ContractItem");

  public static final SMethod<String> renderReadable_idHywGhj8i5D = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("HywGhj8i5D").build();
  public static final SMethod<Boolean> isDeclarative_iducawTXUZcY = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isDeclarative").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ucawTXUZcY").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(renderReadable_idHywGhj8i5D, isDeclarative_iducawTXUZcY, effectDescriptor_id6GySMNjjWfO);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SLinkOperations.setNewChild(__thisNode__, LINKS.expr$Wyjb, null);
    SLinkOperations.setNewChild(__thisNode__, LINKS.err$phDR, null);
  }

  /*package*/ static boolean isDeclarative_iducawTXUZcY(@NotNull SNode __thisNode__) {
    List<SNode> all = SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(__thisNode__, LINKS.expr$Wyjb), CONCEPTS.Expression$D_, true, new SAbstractConcept[]{});
    List<SNode> uniqueCandidates = new ArrayList<SNode>();
    for (SNode e : ListSequence.fromList(all)) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(e), CONCEPTS.DotExpression$jp)) {
        continue;
      }
      boolean isLit = SNodeOperations.isInstanceOf(e, CONCEPTS.PrimitiveLiteral$Mc);
      boolean isAnd = SNodeOperations.isInstanceOf(e, CONCEPTS.LogicalAndExpression$m8);
      boolean isDeclExpr = SNodeOperations.isInstanceOf(e, CONCEPTS.IDeclarativelyInterpretable$V$);
      boolean isDeclTarget = SNodeOperations.isInstanceOf(e, CONCEPTS.DotExpression$jp) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(e, CONCEPTS.DotExpression$jp), LINKS.target$u23F), CONCEPTS.IDeclarativelyInterpretable$V$);
      if (!((isLit || isAnd || isDeclExpr || isDeclTarget))) {
        return false;
      }
      if (isDeclExpr) {
        ListSequence.fromList(uniqueCandidates).addElement(e);
      }
      if (isDeclTarget) {
        ListSequence.fromList(uniqueCandidates).addElement(SLinkOperations.getTarget(SNodeOperations.cast(e, CONCEPTS.DotExpression$jp), LINKS.target$u23F));
      }
    }
    if (ListSequence.fromList(uniqueCandidates).count() != ListSequence.fromList(uniqueCandidates).select(new ISelector<SNode, SConcept>() {
      public SConcept select(SNode it) {
        return SNodeOperations.getConcept(it);
      }
    }).distinct().count()) {
      return false;
    }
    return true;
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return ((EffectDescriptor) IMayHaveEffect__BehaviorDescriptor.deriveFrom_id6KxoTHgL$U0.invoke(__thisNode__, SLinkOperations.getTarget(__thisNode__, LINKS.expr$Wyjb)));
  }

  /*package*/ ContractItem__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((Boolean) isDeclarative_iducawTXUZcY(node));
      case 2:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$Wyjb = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL, 0xc0aff242212e55eL, "expr");
    /*package*/ static final SContainmentLink err$phDR = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL, 0x5ac87922c845c4eaL, "err");
    /*package*/ static final SContainmentLink target$u23F = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L, 0x7cef88020a0f424bL, "target");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
    /*package*/ static final SConcept DotExpression$jp = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L, "org.iets3.core.expr.base.structure.DotExpression");
    /*package*/ static final SConcept PrimitiveLiteral$Mc = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x744a56d3ba8dc333L, "org.iets3.core.expr.base.structure.PrimitiveLiteral");
    /*package*/ static final SConcept LogicalAndExpression$m8 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdd39L, "org.iets3.core.expr.base.structure.LogicalAndExpression");
    /*package*/ static final SInterfaceConcept IDeclarativelyInterpretable$V$ = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x78c2a0e7debf5afL, "org.iets3.core.expr.base.structure.IDeclarativelyInterpretable");
  }
}
