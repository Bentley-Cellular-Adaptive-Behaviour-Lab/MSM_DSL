package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class replace_TupleType_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  public replace_TupleType_InequationReplacementRule() {
  }
  public boolean isApplicableCustom(SNode subtype, SNode supertype, IsApplicable2Status status) {
    return ListSequence.fromList(SLinkOperations.getChildren(subtype, LINKS.elementTypes$gWta)).count() == ListSequence.fromList(SLinkOperations.getChildren(supertype, LINKS.elementTypes$gWta)).count();
  }
  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(subtype, LINKS.elementTypes$gWta))) {
      {
        SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "1697698521752839752", 0, null);
        _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
        typeCheckingContext.createLessThanInequality((SNode) e, (SNode) ListSequence.fromList(SLinkOperations.getChildren(supertype, LINKS.elementTypes$gWta)).getElement(SNodeOperations.getIndexInParent(e)), false, true, _info_12389875345);
      }
    }
  }
  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(subtype, LINKS.elementTypes$gWta))) {
      result_14532009 = result_14532009 && TypecheckingFacade.getFromContext().isSubtype((SNode) e, (SNode) ListSequence.fromList(SLinkOperations.getChildren(supertype, LINKS.elementTypes$gWta)).getElement(SNodeOperations.getIndexInParent(e)));
    }
    return result_14532009;
  }
  public boolean isWeak() {
    return true;
  }
  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    return new IsApplicableStatus(node.getConcept().isSubConceptOf(getApplicableSubtypeConcept()), null);
  }
  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    return new IsApplicableStatus(node.getConcept().isSubConceptOf(getApplicableSupertypeConcept()), null);
  }

  public SAbstractConcept getApplicableSubtypeConcept() {
    return CONCEPTS.TupleType$8E;
  }
  public SAbstractConcept getApplicableSupertypeConcept() {
    return CONCEPTS.TupleType$8E;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elementTypes$gWta = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, 0xe247742183174bbL, "elementTypes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TupleType$8E = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, "org.iets3.core.expr.base.structure.TupleType");
  }
}
