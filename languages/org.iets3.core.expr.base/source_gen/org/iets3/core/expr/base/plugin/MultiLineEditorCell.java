package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import java.awt.Color;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.AbstractCellProvider;

public class MultiLineEditorCell {

  private String disyplayValue;
  private Color color;
  private Color backgroundColor = null;
  private SNode node;

  public MultiLineEditorCell(SNode n, String value, Color c) {
    disyplayValue = value;
    color = c;
    node = n;
  }

  public MultiLineEditorCell(SNode n, String value, Color textColor, Color backgroundColor) {
    this.disyplayValue = value;
    this.color = textColor;
    this.backgroundColor = backgroundColor;
    this.node = n;
  }

  public EditorCell createCell(EditorContext editorContext) {
    EditorCell_Collection coll = EditorCell_Collection.createVertical(editorContext, node);
    coll.setFoldable(true);
    coll.setFoldedCell(new EditorCell_Constant(editorContext, node, "{...}"));

    for (String s : Sequence.fromArray(disyplayValue.split("\n"))) {
      String toBeDisplayed = s;
      boolean highlight = false;
      if (s.startsWith("*")) {
        highlight = true;
        toBeDisplayed = s.substring(1);
      }
      EditorCell_Constant c = new EditorCell_Constant(editorContext, node, toBeDisplayed);
      Style style = new StyleImpl();
      style.set(StyleAttributes.FONT_STYLE, (highlight ? MPSFonts.BOLD : MPSFonts.PLAIN));
      style.set(StyleAttributes.TEXT_COLOR, color);
      if (this.backgroundColor != null) {
        style.set(StyleAttributes.BACKGROUND_COLOR, backgroundColor);
      }
      c.getStyle().putAll(style);
      coll.addEditorCell(c);
    }
    return coll;
  }

  public AbstractCellProvider createCellProvider(final EditorContext editorContext, SNode node) {
    return new AbstractCellProvider(node) {
      public EditorCell createEditorCell(EditorContext p0) {
        return createCell(((jetbrains.mps.nodeEditor.EditorContext) editorContext));
      }
    };
  }

}
