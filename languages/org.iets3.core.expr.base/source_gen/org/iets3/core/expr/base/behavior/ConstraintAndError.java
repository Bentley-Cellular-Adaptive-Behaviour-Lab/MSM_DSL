package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import java.util.Objects;
import org.iets3.core.expr.base.plugin.MessageValue;
import com.mbeddr.mpsutil.interpreter.rt.IContext;
import com.mbeddr.mpsutil.interpreter.rt.ICoverageAnalyzer;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public abstract class ConstraintAndError {

  public final SNode expression;
  @Nullable
  public final SNode err;

  public final boolean warning;

  private final SNode source;

  public ConstraintAndError(SNode expr, SNode source) {
    this(expr, null, source, false);
  }

  public ConstraintAndError(SNode expr, @Nullable SNode err, SNode source) {
    this(expr, err, source, false);
  }

  public ConstraintAndError(SNode expr, @Nullable SNode err, SNode source, boolean warning) {
    this.expression = expr;
    this.source = source;
    this.err = err;
    this.warning = warning;
  }

  public boolean isValueOk(Object value) {
    return Objects.equals(value, true);
  }

  /**
   * Used to provide a generic error message incase the user has not defined one.
   */
  public abstract MessageValue buildErrorMessage(Object value);


  /**
   * If your custom subclass of the contrain validator needs more control about the error message
   * override this method.
   * 
   * @see org.iets3.core.expr.base.behavior.DefaultConstraintAndError 
   */
  public MessageValue buildErrorMessage(Object value, Object okOrNot, IContext ctx, ICoverageAnalyzer coverage, @Nullable ComputationTrace trace) {
    return buildErrorMessage(value);
  }

  public SNode getSource() {
    return this.source;
  }

  public SNode toNode() {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x192c2b4e0b24597bL, "org.iets3.core.expr.base.structure.ConstraintAndErrorNode"));
    SLinkOperations.setTarget(node, LINKS.expression$EKJe, expression);
    SLinkOperations.setTarget(node, LINKS.source$ELsh, source);
    return node;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink expression$EKJe = MetaAdapterFactory.getReferenceLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x192c2b4e0b24597bL, 0x192c2b4e0b245996L, "expression");
    /*package*/ static final SReferenceLink source$ELsh = MetaAdapterFactory.getReferenceLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x192c2b4e0b24597bL, 0x192c2b4e0b245999L, "source");
  }
}
