package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.mpsutil.interpreter.behavior.IInterpreterWrapperType__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class typeof_UnaryExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_UnaryExpression_InferenceRule() {
  }
  public void applyRule(final SNode unaryExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode ue = typeCheckingContext.typeOf(SLinkOperations.getTarget(unaryExpression, LINKS.expr$Hji0), "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "6776997824608163765", true);
      typeCheckingContext.whenConcrete(ue, new Runnable() {
        public void run() {
          boolean wasOption = false;
          SNode uet = typeCheckingContext.getExpandedNode(ue);
          if (SNodeOperations.isInstanceOf(uet, CONCEPTS.IInterpreterWrapperType$KD)) {
            uet = IInterpreterWrapperType__BehaviorDescriptor.wrappedType_id6bG6MAFRDvi.invoke(SNodeOperations.cast(uet, CONCEPTS.IInterpreterWrapperType$KD));
            wasOption = true;
          }

          SNode operationType = typeCheckingContext.getOverloadedOperationType(unaryExpression, uet, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")), new IRuleConflictWarningProducer() {
            public void produceWarning(String modelId, String ruleId) {
              typeCheckingContext.reportWarning(unaryExpression, "coflicting rules for overloaded operation type", modelId, ruleId, null, new NodeMessageTarget());

            }
          });
          if (operationType != null) {
            if (wasOption) {
              {
                SNode _nodeToCheck_1029348928467 = unaryExpression;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2911193379521355904", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2911193379521355914", true), (SNode) IInterpreterWrapperType__BehaviorDescriptor.reWrap_id6bG6MAG4Mv3.invoke(SNodeOperations.cast(typeCheckingContext.getExpandedNode(ue), CONCEPTS.IInterpreterWrapperType$KD), operationType, SNodeOperations.cast(typeCheckingContext.getExpandedNode(ue), CONCEPTS.IInterpreterWrapperType$KD)), _info_12389875345);
              }
            } else {
              {
                SNode _nodeToCheck_1029348928467 = unaryExpression;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2911193379521355919", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2911193379521355923", true), (SNode) operationType, _info_12389875345);
              }
            }
          } else {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(unaryExpression, SConceptOperations.conceptAlias(SNodeOperations.getConcept(unaryExpression)) + " cannot applied to " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(uet), "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2911193379522547633", null, errorTarget);
            }
            {
              SNode _nodeToCheck_1029348928467 = unaryExpression;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "1173078498146326386", 0, null);
              typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "1173078498146326216", true), (SNode) createRuntimeErrorType_iptmhj_a1a0c0b0a5a0a0b0a1a0a1(SConceptOperations.conceptAlias(SNodeOperations.getConcept(unaryExpression)) + " cannot applied to " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(uet)), _info_12389875345);
            }
          }
        }
      }, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "6776997824608163715", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.UnaryExpression$FZ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode createRuntimeErrorType_iptmhj_a1a0c0b0a5a0a0b0a1a0a1(String p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RuntimeErrorType$3c);
    n0.setProperty(PROPS.errorText$leWQ, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$Hji0 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L, 0x46ff3b3d86cd0f6bL, "expr");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IInterpreterWrapperType$KD = MetaAdapterFactory.getInterfaceConcept(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x62ec1b29abde62acL, "com.mbeddr.mpsutil.interpreter.structure.IInterpreterWrapperType");
    /*package*/ static final SConcept UnaryExpression$FZ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L, "org.iets3.core.expr.base.structure.UnaryExpression");
    /*package*/ static final SConcept RuntimeErrorType$3c = MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, "jetbrains.mps.lang.typesystem.structure.RuntimeErrorType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty errorText$leWQ = MetaAdapterFactory.getProperty(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, 0x113f84956faL, "errorText");
  }
}
