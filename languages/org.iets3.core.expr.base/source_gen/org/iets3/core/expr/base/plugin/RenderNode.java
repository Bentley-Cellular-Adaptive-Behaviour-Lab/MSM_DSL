package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import java.awt.Color;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;

public class RenderNode {

  private String myLabel;
  private Object myValue;
  private List<RenderNode> children;
  private boolean myOnSameLine;
  private boolean hide = false;
  private ChangeMode change = null;

  public enum ChangeMode {
    ADDED(),
    CHANGED(),
    REMOVED()
  }

  public RenderNode(Object value, String label) {
    myLabel = label;
    myValue = value;
  }

  public RenderNode(Object value, String label, boolean onSameLine) {
    myLabel = label;
    myValue = value;
    this.myOnSameLine = onSameLine;
  }

  public void markChange(ChangeMode m) {
    this.change = m;
  }

  public ChangeMode getChange() {
    return this.change;
  }

  public RenderNode addChild(RenderNode node) {
    if (children == null) {
      children = ListSequence.fromList(new ArrayList<RenderNode>());
    }
    ListSequence.fromList(children).addElement(node);
    return this;
  }

  public String render(String indent) {
    StringBuilder b = new StringBuilder();
    if (!(hide)) {
      if (change != null) {
        b.append("*");
      }
      b.append(myLabel);
    }
    if (children != null) {
      String childIndent = indent + "  ";
      for (RenderNode c : ListSequence.fromList(children)) {
        if (c.myOnSameLine) {
          b.append(c.render(childIndent));
        } else {
          b.append("\n" + childIndent + c.render(childIndent));
        }
      }
    }
    return b.toString();
  }

  public EditorCell_Constant constant(EditorContext editorContext, SNode node, String text, boolean highlight) {
    EditorCell_Constant cell = new EditorCell_Constant(editorContext, node, text);
    Style style = new StyleImpl();
    style.set(StyleAttributes.FONT_STYLE, (highlight ? MPSFonts.BOLD : MPSFonts.PLAIN));
    style.set(StyleAttributes.TEXT_COLOR, (highlight ? Color.blue : Color.black));
    cell.getStyle().putAll(style);
    return cell;
  }

  public EditorCell_Collection renderCell(EditorContext editorContext, SNode node) {
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection vertical = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createVertical(editorContext, node);
    vertical.setGridLayout(true);
    vertical.setFoldable(true);
    vertical.setFoldedCell(constant(editorContext, node, "{..}", false));
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection horiz = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createHorizontal(editorContext, node);
    horiz.addEditorCell(constant(editorContext, node, ((this.myOnSameLine ? "" : "  ")) + myLabel, change != null));
    vertical.addEditorCell(horiz);
    if (children != null) {
      for (RenderNode c : ListSequence.fromList(children)) {
        if (c.myOnSameLine) {
          horiz.addEditorCell(c.renderCell(editorContext, node));
        } else {
          vertical.addEditorCell(c.renderCell(editorContext, node));
        }
      }
    }
    return vertical;
  }

  public List<RenderNode> children() {
    return this.children;
  }

  public void setOnSameLine() {
    this.myOnSameLine = true;
  }

  public RenderNode getChild(int i) {
    if (i < ListSequence.fromList(this.children).count()) {
      return ListSequence.fromList(this.children).getElement(i);
    }
    return null;
  }

  public Object getValue() {
    return this.myValue;
  }

  public void hide() {
    this.hide = true;
  }

  public void diffAgainst(RenderNode other) {
    for (int i = 0; i < ListSequence.fromList(this.children).count(); i++) {
      RenderNode myChild = this.getChild(i);
      RenderNode otherChild = other.getChild(i);
      if (otherChild == null) {
        myChild.markChange(ChangeMode.ADDED);
      } else {
        myChild.diffAgainst(otherChild);
      }
    }
    if (!(this.getValue().equals(other.getValue()))) {
      this.markChange(ChangeMode.CHANGED);
    }
  }


}
