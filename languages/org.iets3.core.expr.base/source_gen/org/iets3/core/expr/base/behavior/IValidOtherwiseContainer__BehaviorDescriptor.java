package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.typesystem.dependencies.InferenceMethod;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class IValidOtherwiseContainer__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x50ccd0fa593272c9L, "org.iets3.core.expr.base.structure.IValidOtherwiseContainer");

  public static final SMethod<Boolean> allowsOtherwise_id4u1MGlrN8KT = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("allowsOtherwise").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4u1MGlrN8KT").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> getAllOtherwiseSiblings_id53cOfDpcBbK = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getAllOtherwiseSiblings").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("53cOfDpcBbK").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> hasCustomOtherwiseType_id6KzF0hSIsAA = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasCustomOtherwiseType").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6KzF0hSIsAA").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> inferOtherwiseType_id6KzF0hSD4Ox = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("inferOtherwiseType").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6KzF0hSD4Ox").build(SMethodBuilder.createJavaParameter(TypeCheckingContext.class, ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(allowsOtherwise_id4u1MGlrN8KT, getAllOtherwiseSiblings_id53cOfDpcBbK, hasCustomOtherwiseType_id6KzF0hSIsAA, inferOtherwiseType_id6KzF0hSD4Ox);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean allowsOtherwise_id4u1MGlrN8KT(@NotNull SNode __thisNode__, SNode subtree) {
    return true;
  }
  /*package*/ static boolean hasCustomOtherwiseType_id6KzF0hSIsAA(@NotNull SNode __thisNode__, SNode otherwiseLiteral) {
    return false;
  }
  @InferenceMethod
  /*package*/ static void inferOtherwiseType_id6KzF0hSD4Ox(@NotNull SNode __thisNode__, TypeCheckingContext typeCheckingContext, SNode otherwiseLiteral) {
  }

  /*package*/ IValidOtherwiseContainer__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) allowsOtherwise_id4u1MGlrN8KT(node, (SNode) parameters[0]));
      case 2:
        return (T) ((Boolean) hasCustomOtherwiseType_id6KzF0hSIsAA(node, (SNode) parameters[0]));
      case 3:
        inferOtherwiseType_id6KzF0hSD4Ox(node, (TypeCheckingContext) parameters[0], (SNode) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
