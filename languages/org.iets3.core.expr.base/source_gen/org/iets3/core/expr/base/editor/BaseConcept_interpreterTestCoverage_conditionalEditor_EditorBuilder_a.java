package org.iets3.core.expr.base.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.mpsutil.interpreter.behavior.ICanHaveTestCoverage__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.iets3.core.expr.base.behavior.DefaultCoverageAnalyzer;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.VerticalBarCellProvider;
import java.awt.Color;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.editor.runtime.EditorCell_Empty;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class BaseConcept_interpreterTestCoverage_conditionalEditor_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public BaseConcept_interpreterTestCoverage_conditionalEditor_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createPriorityInfoCell_1();
  }

  private EditorCell createPriorityInfoCell_0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = null;
    editorCell = createAlternation_0();
    editorCell.setBig(true);
    setCellContext(editorCell);
    return editorCell;
  }
  private EditorCell createPriorityInfoCell_1() {
    return createPriorityInfoCell_0(getEditorContext(), myNode);
  }
  private EditorCell createAlternation_0() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_yvsieu_a0a();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createAlternation_1();
    } else {
      editorCell = createNextEditor_2();
    }
    return editorCell;
  }
  private boolean nodeCondition_yvsieu_a0a() {
    boolean topLevelNode = SNodeOperations.isInstanceOf(myNode, CONCEPTS.ICanHaveTestCoverage$33) && (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(SNodeOperations.cast(myNode, CONCEPTS.ICanHaveTestCoverage$33));
    if (topLevelNode && ListSequence.fromList(SNodeOperations.getNodeAncestors(myNode, CONCEPTS.ICanHaveTestCoverage$33, false)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(it);
      }
    }).isEmpty() && !(DefaultCoverageAnalyzer.hasNodeCoverage(myNode))) {
      // force coverage display for uppermost toplevel nodes if there is any other visited node in the current root 
      return ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(myNode), null, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return DefaultCoverageAnalyzer.hasNodeCoverage(it);
        }
      });
    } else if (!(DefaultCoverageAnalyzer.hasNodeCoverage(myNode))) {
      return false;
    } else if (CoverageEditorUtils.isNotCoveredAndHasNotCoveredAncestors(myNode)) {
      return false;
    } else if (CoverageEditorUtils.isCoveredAndNotIncluded(myNode)) {
      return true;
    }

    boolean underTopLevel = ListSequence.fromList(SNodeOperations.getNodeAncestors(myNode, CONCEPTS.ICanHaveTestCoverage$33, false)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(it);
      }
    });
    // siblings check required for better integration into vertical layouts (rendering empty placeholder) 
    boolean anySiblingWithVisibleCoverage = ListSequence.fromList(SNodeOperations.getAllSiblings(myNode, true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(SNodeOperations.as(it, CONCEPTS.ICanHaveTestCoverage$33)) || DefaultCoverageAnalyzer.isNodeNotCovered(it);
      }
    });
    return topLevelNode || (underTopLevel && anySiblingWithVisibleCoverage);
  }
  private EditorCell createAlternation_1() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_yvsieu_a0a0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createCollection_0();
    } else {
      editorCell = createCollection_1();
    }
    return editorCell;
  }
  private boolean nodeCondition_yvsieu_a0a0() {
    if (CoverageEditorUtils.isCoveredAndNotIncluded(myNode)) {
      return true;
    }

    boolean topLevelNode = SNodeOperations.isInstanceOf(myNode, CONCEPTS.ICanHaveTestCoverage$33) && (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(SNodeOperations.cast(myNode, CONCEPTS.ICanHaveTestCoverage$33));
    return topLevelNode || DefaultCoverageAnalyzer.isNodeNotCovered(myNode);
  }
  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_yvsieu_a0a0");
    editorCell.addEditorCell(createCustom_0());
    editorCell.addEditorCell(createCustomFactory_1());
    return editorCell;
  }
  private EditorCell createCustom_0() {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<VerticalBarCellProvider>() {
      public VerticalBarCellProvider invoke() {
        if (DefaultCoverageAnalyzer.isNodeCovered(myNode)) {
          boolean topLevelNode = SNodeOperations.isInstanceOf(myNode, CONCEPTS.ICanHaveTestCoverage$33) && (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(SNodeOperations.cast(myNode, CONCEPTS.ICanHaveTestCoverage$33));
          if (!(topLevelNode)) {
            // special case: covered node that is not toplevel -> node covered under excluded, add special coloring for reviewing 
            return new VerticalBarCellProvider(myNode, Color.BLUE, 5);
          }
          return new VerticalBarCellProvider(myNode, Color.GREEN, 5);
        }
        if (DefaultCoverageAnalyzer.isNodePartiallyCovered(myNode)) {
          return new VerticalBarCellProvider(myNode, Color.ORANGE, 5);
        }
        if (DefaultCoverageAnalyzer.isNodeNotCovered(myNode) || !(DefaultCoverageAnalyzer.hasNodeCoverage(myNode))) {
          return new VerticalBarCellProvider(myNode, Color.RED, 5);
        }
        // this case is not expected to occur 
        return new VerticalBarCellProvider(myNode, Color.MAGENTA, 5);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(getEditorContext());
    editorCell.setCellId("Custom_yvsieu_a0a0a");
    return editorCell;
  }
  private EditorCell createCustomFactory_0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createNextEditor_0();
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        boolean topLevelNode = SNodeOperations.isInstanceOf(myNode, CONCEPTS.ICanHaveTestCoverage$33) && (boolean) ICanHaveTestCoverage__BehaviorDescriptor.isToplevelCoverageContent_id2hXd3rsZYy8.invoke(SNodeOperations.cast(myNode, CONCEPTS.ICanHaveTestCoverage$33));
        if (!(topLevelNode)) {
          if (DefaultCoverageAnalyzer.isNodeNotCovered(myNode)) {
            cell.getStyle().set(StyleAttributes.BACKGROUND_COLOR, StyleRegistry.getInstance().getSimpleColor(CoverageEditorUtils.NOT_COVERED_BG_COLOR));
          } else if (DefaultCoverageAnalyzer.isNodeCovered(myNode)) {
            // special case: covered node that is not toplevel -> node covered under excluded, add special coloring for reviewing 
            cell.getStyle().set(StyleAttributes.BACKGROUND_COLOR, StyleRegistry.getInstance().getSimpleColor(CoverageEditorUtils.COVERED_AND_NOT_INCLUDED_BG_COLOR));
          }
        }
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_1() {
    return createCustomFactory_0(getEditorContext(), myNode);
  }
  private EditorCell createNextEditor_0() {
    {
      EditorCell editorCell = getCellFactory().createEditorCell(myNode, false, BaseConcept_interpreterTestCoverage_conditionalEditor_Editor_ModelCoverage_Coloring.class);
      return editorCell;
    }
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_yvsieu_a0a0_0");
    editorCell.addEditorCell(createEmpty_0());
    editorCell.addEditorCell(createNextEditor_1());
    return editorCell;
  }
  private EditorCell createEmpty_0() {
    EditorCell_Empty editorCell = new EditorCell_Empty(getEditorContext(), myNode);
    editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.FORWARD));
    editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.BACKWARD));
    editorCell.setCellId("Empty_yvsieu_a0a0a");
    return editorCell;
  }
  private EditorCell createNextEditor_1() {
    {
      EditorCell editorCell = getCellFactory().createEditorCell(myNode, false, BaseConcept_interpreterTestCoverage_conditionalEditor_Editor_ModelCoverage_Coloring.class);
      return editorCell;
    }
  }
  private EditorCell createNextEditor_2() {
    {
      EditorCell editorCell = getCellFactory().createEditorCell(myNode, false, BaseConcept_interpreterTestCoverage_conditionalEditor_Editor_ModelCoverage_Coloring.class);
      return editorCell;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept ICanHaveTestCoverage$33 = MetaAdapterFactory.getInterfaceConcept(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x5bb0bdbbedce7ccbL, "com.mbeddr.mpsutil.interpreter.structure.ICanHaveTestCoverage");
  }
}
