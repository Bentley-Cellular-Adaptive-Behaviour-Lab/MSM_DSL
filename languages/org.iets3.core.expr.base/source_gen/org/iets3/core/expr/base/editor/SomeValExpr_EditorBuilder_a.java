package org.iets3.core.expr.base.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import org.iets3.core.expr.base.behavior.SomeValExpr__BehaviorDescriptor;
import org.iets3.core.base.behavior.IOptionallyNamed__BehaviorDescriptor;
import java.awt.Font;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

/*package*/ class SomeValExpr_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public SomeValExpr_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createReadOnlyModelAccessor_0();
  }

  private EditorCell createReadOnlyModelAccessor_0() {
    EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new ModelAccessor.ReadOnly() {
      public String getText() {
        return SPropertyOperations.getString(SLinkOperations.getTarget(myNode, LINKS.someQuery$VNBE), PROPS.name$MnvL);
      }
    }, myNode);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_kikomt_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    Style style = new StyleImpl();
    style.set(StyleAttributes.NAVIGATABLE_NODE, _StyleParameter_QueryFunction_kikomt_a0a());
    style.set(StyleAttributes.FONT_STYLE, _StyleParameter_QueryFunction_kikomt_a1a());
    style.set(StyleAttributes.EDITABLE, false);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private SNode _StyleParameter_QueryFunction_kikomt_a0a() {
    return (SNode) SomeValExpr__BehaviorDescriptor.originalRefTarget_id3kzwyUO_6g1.invoke(getNode());
  }
  private int _StyleParameter_QueryFunction_kikomt_a1a() {
    if ((boolean) IOptionallyNamed__BehaviorDescriptor.hasDefaultName_id3KzlhPzQWyE.invoke(SLinkOperations.getTarget(getNode(), LINKS.someQuery$VNBE))) {
      return Font.BOLD;
    }
    return Font.PLAIN;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink someQuery$VNBE = MetaAdapterFactory.getReferenceLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xeb308f771ea15b3L, 0xeb308f771ea15b4L, "someQuery");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
