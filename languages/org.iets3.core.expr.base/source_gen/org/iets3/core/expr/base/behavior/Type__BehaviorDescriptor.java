package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import jetbrains.mps.typesystem.inference.SubtypingManager;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.util.StructuralNodeSet;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ArrayUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Type__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");

  public static final SMethod<List<SNode>> allSupertypes_id4Q4DxjDsh$t = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("allSupertypes").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Q4DxjDsh$t").build();
  public static final SMethod<Iterable<ConstraintAndError>> applicableConstraints_id2S3ZC$oEyBR = new SMethodBuilder<Iterable<ConstraintAndError>>(new SJavaCompoundTypeImpl((Class<Iterable<ConstraintAndError>>) ((Class) Object.class))).name("applicableConstraints").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2S3ZC$oEyBR").build();
  public static final SMethod<String> generateName_id4iVHBBBBcav = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("generateName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4iVHBBBBcav").build();
  public static final SMethod<Boolean> canBeSimplified_id46cplYwxrWE = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canBeSimplified").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("46cplYwxrWE").build();
  public static final SMethod<Void> simplify_id46cplYwxszL = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("simplify").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("46cplYwxszL").build();
  public static final SMethod<SNode> baseType_idXhdFKv3UAU = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("baseType").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("XhdFKv3UAU").build();
  public static final SMethod<ICapabilityRequirement> getCapabilityRequirement_id7McqtXGyz8c = new SMethodBuilder<ICapabilityRequirement>(new SJavaCompoundTypeImpl(ICapabilityRequirement.class)).name("getCapabilityRequirement").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7McqtXGyz8c").build();
  public static final SMethod<Boolean> requiresSpecialCapability_id7McqtXG$e3Z = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("requiresSpecialCapability").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7McqtXG$e3Z").build();
  public static final SMethod<Boolean> notRequiresSpecialCapability_id7McqtXG$h_u = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("notRequiresSpecialCapability").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7McqtXG$h_u").build();
  public static final SMethod<Boolean> isSameAs_idfIXgjlt4VE = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isSameAs").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("fIXgjlt4VE").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> isDiscrete_id8XWEtesn15 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isDiscrete").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("8XWEtesn15").build();
  public static final SMethod<Boolean> isSynthesized_id7_$HJtBs0P$ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isSynthesized").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7_$HJtBs0P$").build();
  public static final SMethod<String> getPresentation_idhEwIMiw = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPresentation").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hEwIMiw").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(allSupertypes_id4Q4DxjDsh$t, applicableConstraints_id2S3ZC$oEyBR, generateName_id4iVHBBBBcav, canBeSimplified_id46cplYwxrWE, simplify_id46cplYwxszL, baseType_idXhdFKv3UAU, getCapabilityRequirement_id7McqtXGyz8c, requiresSpecialCapability_id7McqtXG$e3Z, notRequiresSpecialCapability_id7McqtXG$h_u, isSameAs_idfIXgjlt4VE, isDiscrete_id8XWEtesn15, isSynthesized_id7_$HJtBs0P$, getPresentation_idhEwIMiw);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> allSupertypes_id4Q4DxjDsh$t(@NotNull SNode __thisNode__) {
    final List<SNode> supertypes = new ArrayList<SNode>();
    final SubtypingManager mgr = TypeChecker.getInstance().getSubtypingManager();
    final StructuralNodeSet<?> imSup = mgr.collectImmediateSupertypes(__thisNode__);
    for (SNode st : SetSequence.fromSet(imSup)) {
      ListSequence.fromList(supertypes).addElement(SNodeOperations.copyNode(((SNode) st)));
    }
    return supertypes;
  }
  /*package*/ static Iterable<ConstraintAndError> applicableConstraints_id2S3ZC$oEyBR(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static String generateName_id4iVHBBBBcav(@NotNull SNode __thisNode__) {
    return String.valueOf(ArrayUtils.toCharArray(Sequence.fromIterable(ArrayUtils.fromCharacterArray(BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(__thisNode__).toCharArray())).select(new ISelector<Character, Character>() {
      public Character select(Character it) {
        if (Character.isAlphabetic(it)) {
          return it;
        }
        if (Character.isDigit(it)) {
          return it;
        }
        return '_';
      }
    })));
  }
  /*package*/ static boolean canBeSimplified_id46cplYwxrWE(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.Type$WK, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) Type__BehaviorDescriptor.canBeSimplified_id46cplYwxrWE.invoke(it);
      }
    });
  }
  /*package*/ static void simplify_id46cplYwxszL(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.Type$WK, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) Type__BehaviorDescriptor.canBeSimplified_id46cplYwxrWE.invoke(it);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Type__BehaviorDescriptor.simplify_id46cplYwxszL.invoke(it);
      }
    });
  }
  /*package*/ static SNode baseType_idXhdFKv3UAU(@NotNull SNode __thisNode__) {
    return __thisNode__;
  }
  /*package*/ static ICapabilityRequirement getCapabilityRequirement_id7McqtXGyz8c(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static boolean requiresSpecialCapability_id7McqtXG$e3Z(@NotNull SNode __thisNode__) {
    return Type__BehaviorDescriptor.getCapabilityRequirement_id7McqtXGyz8c.invoke(__thisNode__) != null;
  }
  /*package*/ static boolean notRequiresSpecialCapability_id7McqtXG$h_u(@NotNull SNode __thisNode__) {
    return Type__BehaviorDescriptor.getCapabilityRequirement_id7McqtXGyz8c.invoke(__thisNode__) == null;
  }
  /*package*/ static boolean isSameAs_idfIXgjlt4VE(@NotNull SNode __thisNode__, SNode other) {
    if (other == null) {
      return false;
    }
    return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(__thisNode__)), SNodeOperations.asSConcept(SNodeOperations.getConcept(other)));
  }
  /*package*/ static boolean isDiscrete_id8XWEtesn15(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static boolean isSynthesized_id7_$HJtBs0P$(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static String getPresentation_idhEwIMiw(@NotNull SNode __thisNode__) {
    return ((String) BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invokeSuper(__thisNode__, CONCEPTS.Type$WK));
  }

  /*package*/ Type__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) allSupertypes_id4Q4DxjDsh$t(node));
      case 1:
        return (T) ((Iterable<ConstraintAndError>) applicableConstraints_id2S3ZC$oEyBR(node));
      case 2:
        return (T) ((String) generateName_id4iVHBBBBcav(node));
      case 3:
        return (T) ((Boolean) canBeSimplified_id46cplYwxrWE(node));
      case 4:
        simplify_id46cplYwxszL(node);
        return null;
      case 5:
        return (T) ((SNode) baseType_idXhdFKv3UAU(node));
      case 6:
        return (T) ((ICapabilityRequirement) getCapabilityRequirement_id7McqtXGyz8c(node));
      case 7:
        return (T) ((Boolean) requiresSpecialCapability_id7McqtXG$e3Z(node));
      case 8:
        return (T) ((Boolean) notRequiresSpecialCapability_id7McqtXG$h_u(node));
      case 9:
        return (T) ((Boolean) isSameAs_idfIXgjlt4VE(node, (SNode) parameters[0]));
      case 10:
        return (T) ((Boolean) isDiscrete_id8XWEtesn15(node));
      case 11:
        return (T) ((Boolean) isSynthesized_id7_$HJtBs0P$(node));
      case 12:
        return (T) ((String) getPresentation_idhEwIMiw(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
  }
}
