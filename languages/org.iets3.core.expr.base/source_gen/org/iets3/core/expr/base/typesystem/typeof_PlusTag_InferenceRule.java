package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class typeof_PlusTag_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_PlusTag_InferenceRule() {
  }
  public void applyRule(final SNode plusTag, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode og = SNodeOperations.cast(SNodeOperations.getParent(plusTag), CONCEPTS.OperatorGroup$oQ);
    TypingHelper.doWithListOfTypes(typeCheckingContext, SLinkOperations.getChildren(og, LINKS.expressions$rPr7), new _FunctionTypes._void_P1_E0<List<SNode>>() {
      public void invoke(List<SNode> types) {
        final SNode elementSupertype = PTF.computeSupertype(types, false, TypeChecker.getInstance().getSubtypingManager());
        {
          SNode _nodeToCheck_1029348928467 = plusTag;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "8560722270289803212", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "8560722270289803240", true), (SNode) PTF.widenToInfinityIfNumber(elementSupertype), _info_12389875345);
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.PlusTag$GC;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept OperatorGroup$oQ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL, "org.iets3.core.expr.base.structure.OperatorGroup");
    /*package*/ static final SConcept PlusTag$GC = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x76cdcb8c55662b4eL, "org.iets3.core.expr.base.structure.PlusTag");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expressions$rPr7 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL, 0x4a147296d680c344L, "expressions");
  }
}
