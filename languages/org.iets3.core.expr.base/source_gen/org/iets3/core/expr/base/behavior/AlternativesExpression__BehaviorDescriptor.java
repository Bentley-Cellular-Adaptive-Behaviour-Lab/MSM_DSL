package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import com.mbeddr.mpsutil.traceExplorer.plugin.ITraceRecord;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.analysis.base.plugin.STF;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.ArrayList;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.Objects;
import java.util.Collections;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class AlternativesExpression__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L, "org.iets3.core.expr.base.structure.AlternativesExpression");

  public static final SMethod<Boolean> hasOtherwise_id1OStjV1GoQ0 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasOtherwise").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1OStjV1GoQ0").build();
  public static final SMethod<Boolean> solvedInTypeSystem_id1LoQHJHiiZd = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("solvedInTypeSystem").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1LoQHJHiiZd").build();
  public static final SMethod<SNode> createReducedExpression_id71dSyJVoY1g = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("createReducedExpression").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("71dSyJVoY1g").build();
  public static final SMethod<String> renderReadable_id4Y0vh0cfqjE = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Y0vh0cfqjE").build();
  public static final SMethod<String> asString_id6iqfHNBPkjP = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("asString").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6iqfHNBPkjP").build();
  public static final SMethod<SNode> createSolverTask_id4pkidg67Lgb = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("createSolverTask").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4pkidg67Lgb").build();
  public static final SMethod<Iterable<SNode>> getChildrenForCoverage_id5IKJrJHNCE8 = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getChildrenForCoverage").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5IKJrJHNCE8").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();
  public static final SMethod<ITraceRecord> constructCustomFrame_id2kg0xI3thT2 = new SMethodBuilder<ITraceRecord>(new SJavaCompoundTypeImpl(ITraceRecord.class)).name("constructCustomFrame").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2kg0xI3thT2").build(SMethodBuilder.createJavaParameter(ITraceRecord.class, ""), SMethodBuilder.createJavaParameter(ITraceRecord.class, ""));
  public static final SMethod<List<SNode>> getPathConstraintsTo_id3QFQUsNJoMc = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getPathConstraintsTo").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3QFQUsNJoMc").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> getAllOtherwiseSiblings_id53cOfDpcBbK = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getAllOtherwiseSiblings").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("53cOfDpcBbK").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<String> invalidUseErrorMessage_id5ye9uPrgjJa = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("invalidUseErrorMessage").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrgjJa").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> findTheSomeQueries_id5ye9uPrkFwU = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("findTheSomeQueries").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrkFwU").build();
  public static final SMethod<Boolean> isValExpressionUsedLegally_id5ye9uPrkHVH = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isValExpressionUsedLegally").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrkHVH").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(hasOtherwise_id1OStjV1GoQ0, solvedInTypeSystem_id1LoQHJHiiZd, createReducedExpression_id71dSyJVoY1g, renderReadable_id4Y0vh0cfqjE, asString_id6iqfHNBPkjP, createSolverTask_id4pkidg67Lgb, getChildrenForCoverage_id5IKJrJHNCE8, effectDescriptor_id6GySMNjjWfO, constructCustomFrame_id2kg0xI3thT2, getPathConstraintsTo_id3QFQUsNJoMc, getAllOtherwiseSiblings_id53cOfDpcBbK, invalidUseErrorMessage_id5ye9uPrgjJa, findTheSomeQueries_id5ye9uPrkFwU, isValExpressionUsedLegally_id5ye9uPrkHVH);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SLinkOperations.addNewChild(__thisNode__, LINKS.alternatives$_UE0, null);
    SLinkOperations.addNewChild(__thisNode__, LINKS.alternatives$_UE0, null);
  }

  /*package*/ static boolean hasOtherwise_id1OStjV1GoQ0(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return PTF.isOtherwiseLiteral(SLinkOperations.getTarget(it, LINKS.when$ywD6));
      }
    });
  }
  /*package*/ static boolean solvedInTypeSystem_id1LoQHJHiiZd(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static SNode createReducedExpression_id71dSyJVoY1g(@NotNull SNode __thisNode__) {
    SNode ife = null;
    Iterable<SNode> regulars = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).reversedList().where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(PTF.isOtherwiseLiteral(SLinkOperations.getTarget(it, LINKS.when$ywD6)));
      }
    });
    for (SNode o : Sequence.fromIterable(regulars)) {
      SNode newIf = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, "org.iets3.core.expr.base.structure.IfExpression"));
      SLinkOperations.setTarget(newIf, LINKS.condition$bVqa, IReducableExpression__BehaviorDescriptor.traceAndCopy_id71dSyJVs3Md.invoke(__thisNode__, SLinkOperations.getTarget(o, LINKS.when$ywD6), "alternative " + SNodeOperations.getIndexInParent(o)));
      SLinkOperations.setTarget(newIf, LINKS.thenPart$bVSc, SNodeOperations.copyNode(SLinkOperations.getTarget(o, LINKS.then$yx78)));
      SLinkOperations.setNewChild(newIf, LINKS.elseSection$kbJ$, null);
      SLinkOperations.setTarget(SLinkOperations.getTarget(newIf, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v, ife);
      ife = newIf;
    }
    SNode otherwise = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return PTF.isOtherwiseLiteral(SLinkOperations.getTarget(it, LINKS.when$ywD6));
      }
    });
    SNode innerIf = ListSequence.fromList(SNodeOperations.getNodeDescendants(ife, CONCEPTS.IfExpression$6$, true, new SAbstractConcept[]{})).last();
    if (otherwise != null) {
      SLinkOperations.setNewChild(innerIf, LINKS.elseSection$kbJ$, null);
      SLinkOperations.setTarget(SLinkOperations.getTarget(innerIf, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v, SNodeOperations.copyNode(SLinkOperations.getTarget(otherwise, LINKS.then$yx78)));
    } else {
      // NOTE: regulars.first is the LAST alternative! 
      SLinkOperations.setNewChild(innerIf, LINKS.elseSection$kbJ$, null);
      SLinkOperations.setTarget(SLinkOperations.getTarget(innerIf, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v, SNodeOperations.copyNode(SLinkOperations.getTarget(Sequence.fromIterable(regulars).first(), LINKS.then$yx78)));
    }
    return ife;
  }
  /*package*/ static String renderReadable_id4Y0vh0cfqjE(@NotNull SNode __thisNode__) {
    StringBuffer bf = new StringBuffer("alt |" + AltOption__BehaviorDescriptor.renderReadable_idHywGhj7ndd.invoke(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).first()) + "|");
    for (SNode a : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).tailListSequence(1)) {
      bf.append("\n    |" + AltOption__BehaviorDescriptor.renderReadable_idHywGhj7ndd.invoke(a) + "|");
    }
    return bf.toString();
  }
  /*package*/ static String asString_id6iqfHNBPkjP(@NotNull SNode __thisNode__) {
    return "[AltExpression]";
  }
  /*package*/ static SNode createSolverTask_id4pkidg67Lgb(@NotNull SNode __thisNode__) {
    return STF.createSolverTask(__thisNode__, "overlap");
  }
  /*package*/ static Iterable<SNode> getChildrenForCoverage_id5IKJrJHNCE8(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        List<SNode> nodes = new ArrayList<SNode>();
        ListSequence.fromList(nodes).addElement(SLinkOperations.getTarget(it, LINKS.when$ywD6));
        ListSequence.fromList(nodes).addElement(SLinkOperations.getTarget(it, LINKS.then$yx78));
        return nodes;
      }
    });
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return EffectDescriptor.forNodes(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0));
  }
  /*package*/ static ITraceRecord constructCustomFrame_id2kg0xI3thT2(@NotNull SNode __thisNode__, ITraceRecord parent, ITraceRecord original) {
    if (original == null) {
      return null;
    }
    ComputationTrace ct = (ComputationTrace) original;
    ComputationTrace res = new ComputationTrace(__thisNode__);
    res.setValue(ct.getTracedValue());
    for (SNode option : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0))) {
      ComputationTrace ot = res.newChild(option, true, "option " + SNodeOperations.getIndexInParent(option));
      ot.addChild(ct.descendantForNode(SLinkOperations.getTarget(option, LINKS.when$ywD6)), true, "when");
      ot.addChild(ct.descendantForNode(SLinkOperations.getTarget(option, LINKS.then$yx78)), true, "then");
    }
    return res;
  }
  /*package*/ static List<SNode> getPathConstraintsTo_id3QFQUsNJoMc(@NotNull SNode __thisNode__, SNode descendant) {
    final List<SNode> ancestors = Sequence.fromIterable(Sequence.<SNode>singleton(descendant)).concat(ListSequence.fromList(SNodeOperations.getNodeAncestors(descendant, null, false))).toListSequence();
    final int index = ListSequence.fromList(ancestors).indexOf(__thisNode__);
    if (index < 0) {
      String descendant_pointer = "null";
      if ((descendant != null)) {
        descendant_pointer = SNodeOperations.getPointer(descendant).toString();
      }
      throw new RuntimeException("node " + descendant_pointer + " is not reachable from " + SNodeOperations.getPointer(__thisNode__));
    }
    final List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode alternative) {
        if (Objects.equals(ListSequence.fromList(ancestors).getElement(index - 1), alternative)) {
          ListSequence.fromList(result).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(alternative, LINKS.when$ywD6)));
        }
      }
    });
    return result;
  }
  /*package*/ static Iterable<SNode> getAllOtherwiseSiblings_id53cOfDpcBbK(@NotNull SNode __thisNode__, SNode otherwiseLiteral) {
    return Sequence.fromIterable(Collections.<SNode>emptyList());
  }
  /*package*/ static String invalidUseErrorMessage_id5ye9uPrgjJa(@NotNull SNode __thisNode__, SNode some) {
    SNode firstAlt = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).first();
    if (SLinkOperations.getTarget(firstAlt, LINKS.when$ywD6) == some) {
      return null;
    }
    List<SNode> descendants = SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(firstAlt, LINKS.when$ywD6), null, true, new SAbstractConcept[]{});
    Iterable<SNode> descendantsWithoutSomeContents = ListSequence.fromList(descendants).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getNodeAncestor(it, CONCEPTS.IsSomeExpression$Ae, false, false) == null;
      }
    });
    if (Sequence.fromIterable(descendantsWithoutSomeContents).contains(some) && Sequence.fromIterable(descendantsWithoutSomeContents).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.LogicalAndExpression$m8) || SNodeOperations.isInstanceOf(it, CONCEPTS.IsSomeExpression$Ae);
      }
    })) {
      return null;
    }
    return "cannot be used here; only allowed as the single condition of 'if', or as part of an '&&'";
  }
  /*package*/ static Iterable<SNode> findTheSomeQueries_id5ye9uPrkFwU(@NotNull SNode __thisNode__) {
    return SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).first(), LINKS.when$ywD6), CONCEPTS.IsSomeExpression$Ae, true, new SAbstractConcept[]{});
  }
  /*package*/ static boolean isValExpressionUsedLegally_id5ye9uPrkHVH(@NotNull SNode __thisNode__, SNode someVal) {
    SNode f = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.alternatives$_UE0)).first();
    return SLinkOperations.getTarget(f, LINKS.then$yx78) == someVal || ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(f, LINKS.then$yx78), null, false, new SAbstractConcept[]{})).contains(someVal);
  }

  /*package*/ AlternativesExpression__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) hasOtherwise_id1OStjV1GoQ0(node));
      case 1:
        return (T) ((Boolean) solvedInTypeSystem_id1LoQHJHiiZd(node));
      case 2:
        return (T) ((SNode) createReducedExpression_id71dSyJVoY1g(node));
      case 3:
        return (T) ((String) renderReadable_id4Y0vh0cfqjE(node));
      case 4:
        return (T) ((String) asString_id6iqfHNBPkjP(node));
      case 5:
        return (T) ((SNode) createSolverTask_id4pkidg67Lgb(node));
      case 6:
        return (T) ((Iterable<SNode>) getChildrenForCoverage_id5IKJrJHNCE8(node));
      case 7:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      case 8:
        return (T) ((ITraceRecord) constructCustomFrame_id2kg0xI3thT2(node, (ITraceRecord) parameters[0], (ITraceRecord) parameters[1]));
      case 9:
        return (T) ((List<SNode>) getPathConstraintsTo_id3QFQUsNJoMc(node, (SNode) parameters[0]));
      case 10:
        return (T) ((Iterable<SNode>) getAllOtherwiseSiblings_id53cOfDpcBbK(node, (SNode) parameters[0]));
      case 11:
        return (T) ((String) invalidUseErrorMessage_id5ye9uPrgjJa(node, (SNode) parameters[0]));
      case 12:
        return (T) ((Iterable<SNode>) findTheSomeQueries_id5ye9uPrkFwU(node));
      case 13:
        return (T) ((Boolean) isValExpressionUsedLegally_id5ye9uPrkHVH(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink alternatives$_UE0 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L, 0x6ea1ae96e110d6caL, "alternatives");
    /*package*/ static final SContainmentLink when$ywD6 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, 0x6ea1ae96e110d66eL, "when");
    /*package*/ static final SContainmentLink condition$bVqa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626bL, "condition");
    /*package*/ static final SContainmentLink thenPart$bVSc = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626dL, "thenPart");
    /*package*/ static final SContainmentLink then$yx78 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL, 0x6ea1ae96e110d670L, "then");
    /*package*/ static final SContainmentLink elseSection$kbJ$ = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x86c00f011503ff8L, "elseSection");
    /*package*/ static final SContainmentLink expr$Fg_v = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL, 0x86c00f011503ffeL, "expr");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept IfExpression$6$ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, "org.iets3.core.expr.base.structure.IfExpression");
    /*package*/ static final SConcept IsSomeExpression$Ae = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, "org.iets3.core.expr.base.structure.IsSomeExpression");
    /*package*/ static final SConcept LogicalAndExpression$m8 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdd39L, "org.iets3.core.expr.base.structure.LogicalAndExpression");
  }
}
