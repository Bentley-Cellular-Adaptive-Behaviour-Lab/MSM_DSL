package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class OperatorGroup__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL, "org.iets3.core.expr.base.structure.OperatorGroup");

  public static final SMethod<SNode> reduce_id4CksDrmwwdX = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("reduce").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4CksDrmwwdX").build();
  /*package*/ static final SMethod<SNode> process_id4CksDrmwweS = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("process").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4CksDrmwweS").build(SMethodBuilder.createJavaParameter((Class<Iterable<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<String> renderReadable_id4Y0vh0cfqjE = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Y0vh0cfqjE").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(reduce_id4CksDrmwwdX, process_id4CksDrmwweS, renderReadable_id4Y0vh0cfqjE);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode reduce_id4CksDrmwwdX(@NotNull SNode __thisNode__) {
    if (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$rPr7)).count() == 1) {
      return SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$rPr7)).first());
    } else {
      return OperatorGroup__BehaviorDescriptor.process_id4CksDrmwweS.invoke(__thisNode__, SLinkOperations.getChildren(__thisNode__, LINKS.expressions$rPr7));
    }
  }
  /*package*/ static SNode process_id4CksDrmwweS(@NotNull SNode __thisNode__, Iterable<SNode> remaining) {
    if (Sequence.fromIterable(remaining).count() == 1) {
      return SNodeOperations.copyNode(Sequence.fromIterable(remaining).first());
    } else {
      return OperatorTag__BehaviorDescriptor.build_id4CksDrmwc2x.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.tag$rOX5), Sequence.fromIterable(remaining).first(), OperatorGroup__BehaviorDescriptor.process_id4CksDrmwweS.invoke(__thisNode__, Sequence.fromIterable(remaining).tail(Sequence.fromIterable(remaining).count() - 1)));
    }
  }
  /*package*/ static String renderReadable_id4Y0vh0cfqjE(@NotNull SNode __thisNode__) {
    return "join<" + SConceptOperations.conceptAlias(SNodeOperations.getConcept(SLinkOperations.getTarget(__thisNode__, LINKS.tag$rOX5))) + ">" + ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$rPr7)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return (String) Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(it);
      }
    });
  }

  /*package*/ OperatorGroup__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) reduce_id4CksDrmwwdX(node));
      case 1:
        return (T) ((SNode) process_id4CksDrmwweS(node, (Iterable<SNode>) parameters[0]));
      case 2:
        return (T) ((String) renderReadable_id4Y0vh0cfqjE(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expressions$rPr7 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL, 0x4a147296d680c344L, "expressions");
    /*package*/ static final SContainmentLink tag$rOX5 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL, 0x4a147296d680c342L, "tag");
  }
}
