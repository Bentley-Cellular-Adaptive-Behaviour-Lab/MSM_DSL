package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.iets3.core.expr.base.typesystem.TypingHelper;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class IParameterizedTypeSupportsEquals__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7c29ed49aa581218L, "org.iets3.core.expr.base.structure.IParameterizedTypeSupportsEquals");

  public static final SMethod<List<SNode>> getTypeParameters_idKoRsm$Us0E = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getTypeParameters").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KoRsm$Us0E").build();
  public static final SMethod<Void> ensureParameterizedTypeComparability_id7KDVkAErfTB = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("ensureParameterizedTypeComparability").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7KDVkAErfTB").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<_FunctionTypes._return_P2_E0<? extends Boolean, ? super SNode, ? super SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<_FunctionTypes._void_P2_E0<? super SNode, ? super SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getTypeParameters_idKoRsm$Us0E, ensureParameterizedTypeComparability_id7KDVkAErfTB);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void ensureParameterizedTypeComparability_id7KDVkAErfTB(@NotNull SNode __thisNode__, SNode otherType, _FunctionTypes._return_P2_E0<? extends Boolean, ? super SNode, ? super SNode> isPrimitiveTypeComparableTo, _FunctionTypes._void_P2_E0<? super SNode, ? super SNode> createError) {
    if (!((Objects.equals(SNodeOperations.getConcept(otherType), SNodeOperations.getConcept(SNodeOperations.cast(__thisNode__, CONCEPTS.Type$WK)))))) {
      createError.invoke(__thisNode__, otherType);
    }

    List<SNode> leftTypeParameters = IParameterizedTypeSupportsEquals__BehaviorDescriptor.getTypeParameters_idKoRsm$Us0E.invoke(__thisNode__);
    List<SNode> rightTypeParameters = IParameterizedTypeSupportsEquals__BehaviorDescriptor.getTypeParameters_idKoRsm$Us0E.invoke(SNodeOperations.cast(otherType, CONCEPTS.IParameterizedTypeSupportsEquals$yU));
    if (leftTypeParameters.size() == rightTypeParameters.size()) {
      {
        Iterator<SNode> leftParam_it = ListSequence.fromList(leftTypeParameters).iterator();
        Iterator<SNode> rightParam_it = ListSequence.fromList(rightTypeParameters).iterator();
        SNode leftParam_var;
        SNode rightParam_var;
        while (leftParam_it.hasNext() && rightParam_it.hasNext()) {
          leftParam_var = leftParam_it.next();
          rightParam_var = rightParam_it.next();
          TypingHelper.ensureTypeComparability(leftParam_var, rightParam_var, isPrimitiveTypeComparableTo, createError);
        }
      }
    } else {
      if (!(isPrimitiveTypeComparableTo.invoke(SNodeOperations.cast(__thisNode__, CONCEPTS.Type$WK), otherType))) {
        createError.invoke(__thisNode__, otherType);
      }
    }


  }

  /*package*/ IParameterizedTypeSupportsEquals__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        ensureParameterizedTypeComparability_id7KDVkAErfTB(node, (SNode) parameters[0], (_FunctionTypes._return_P2_E0<? extends Boolean, ? super SNode, ? super SNode>) parameters[1], (_FunctionTypes._void_P2_E0<? super SNode, ? super SNode>) parameters[2]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SInterfaceConcept IParameterizedTypeSupportsEquals$yU = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7c29ed49aa581218L, "org.iets3.core.expr.base.structure.IParameterizedTypeSupportsEquals");
  }
}
