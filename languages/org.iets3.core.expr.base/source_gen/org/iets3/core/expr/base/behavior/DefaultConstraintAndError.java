package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.iets3.core.expr.base.plugin.MessageValue;
import com.mbeddr.mpsutil.interpreter.rt.IContext;
import com.mbeddr.mpsutil.interpreter.rt.ICoverageAnalyzer;
import org.jetbrains.annotations.Nullable;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;

public class DefaultConstraintAndError extends ConstraintAndError {

  public final String errorMessage;


  public DefaultConstraintAndError(SNode expr, SNode source, String message) {
    this(expr, null, source, message);
  }

  public DefaultConstraintAndError(SNode expr, SNode err, SNode source, String message) {
    this(expr, err, source, message, false);
  }

  public DefaultConstraintAndError(SNode expr, SNode err, SNode source, String message, boolean warning) {
    super(expr, err, source, warning);
    this.errorMessage = message;
  }

  @Override
  public MessageValue buildErrorMessage(Object value) {
    return new MessageValue(errorMessage, this.getSource());
  }

  @Override
  public MessageValue buildErrorMessage(Object value, Object okOrNot, IContext ctx, ICoverageAnalyzer coverage, @Nullable ComputationTrace trace) {
    if ((this.err != null)) {
      Object interpretedError = ctx.getRootInterpreter().evaluate(err, ctx, coverage, trace, false);
      if (interpretedError instanceof String) {
        return new MessageValue((String) interpretedError, getSource());
      }
      if (interpretedError instanceof MessageValue) {
        return (MessageValue) interpretedError;
      }
    }
    return buildErrorMessage(value);
  }

}
