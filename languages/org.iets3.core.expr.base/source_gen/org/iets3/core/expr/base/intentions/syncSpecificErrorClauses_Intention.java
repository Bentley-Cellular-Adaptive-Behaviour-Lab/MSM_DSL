package org.iets3.core.expr.base.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.iets3.core.expr.base.behavior.TryExpression__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public final class syncSpecificErrorClauses_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public syncSpecificErrorClauses_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:7d06857c-251f-4454-ac9c-c398e5200a04(org.iets3.core.expr.base.intentions)", "7089558164910919931"));
  }
  @Override
  public String getPresentation() {
    return "syncSpecificErrorClauses";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "ERROR HANDLING: " + ("Add Missing Specific Error Clauses");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode type = SNodeOperations.cast(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(node, LINKS.expr$TQmf)), CONCEPTS.IType$a9);
      if (SNodeOperations.isInstanceOf(type, CONCEPTS.AttemptType$h8)) {
        for (SNode missing : Sequence.fromIterable(TryExpression__BehaviorDescriptor.missingErrorClauses_id12WRc293Um2.invoke(node))) {
          ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.errorClauses$g1xK)).addElement(createTryErrorClause_9hj15w_a0a0a0a1a0(SNodeOperations.copyNode(missing)));
        }
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return syncSpecificErrorClauses_Intention.this;
    }
  }
  private static SNode createTryErrorClause_9hj15w_a0a0a0a1a0(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TryErrorClause$MY);
    n0.forChild(LINKS.errorLiteral$QRaD).initNode(p0, CONCEPTS.ErrorLiteral$cb, true);
    n0.forChild(LINKS.expr$SCnF).init(CONCEPTS.Expression$D_);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$TQmf = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x59f3fec4e77fb444L, "expr");
    /*package*/ static final SContainmentLink errorClauses$g1xK = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x62632b96c1ec86c3L, "errorClauses");
    /*package*/ static final SContainmentLink errorLiteral$QRaD = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL, 0x62632b96c1fc6083L, "errorLiteral");
    /*package*/ static final SContainmentLink expr$SCnF = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL, 0x62632b96c1ec83eeL, "expr");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IType$a9 = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L, "jetbrains.mps.lang.core.structure.IType");
    /*package*/ static final SConcept AttemptType$h8 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, "org.iets3.core.expr.base.structure.AttemptType");
    /*package*/ static final SConcept TryErrorClause$MY = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL, "org.iets3.core.expr.base.structure.TryErrorClause");
    /*package*/ static final SConcept ErrorLiteral$cb = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L, "org.iets3.core.expr.base.structure.ErrorLiteral");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
  }
}
