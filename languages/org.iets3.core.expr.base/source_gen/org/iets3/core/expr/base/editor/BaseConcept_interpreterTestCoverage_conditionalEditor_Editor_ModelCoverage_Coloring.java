package org.iets3.core.expr.base.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import de.slisson.mps.conditionalEditor.runtime.IConditionalEditor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;

public class BaseConcept_interpreterTestCoverage_conditionalEditor_Editor_ModelCoverage_Coloring extends DefaultNodeEditor implements IConditionalEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"org.iets3.core.expr.base.editor.org.iets3.interpreterTestCoverage.interpreterTestCoverage", "de.slisson.mps.conditionalEditor.hints.editor.conditionalEditorHints.conditionalEditor"});
  @Override
  @NotNull
  public Collection<String> getContextHints() {
    return myContextHints;
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return new BaseConcept_interpreterTestCoverage_conditionalEditor_EditorBuilder_a(editorContext, node).createCell();
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return new BaseConcept_interpreterTestCoverage_conditionalEditor_InspectorBuilder_a(editorContext, node).createCell();
  }
  public int getPriority() {
    return 100;
  }
}
