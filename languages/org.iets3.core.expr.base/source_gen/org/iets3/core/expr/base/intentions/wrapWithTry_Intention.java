package org.iets3.core.expr.base.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.iets3.core.base.behavior.IControlAdvancedFeatures__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class wrapWithTry_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public wrapWithTry_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:7d06857c-251f-4454-ac9c-c398e5200a04(org.iets3.core.expr.base.intentions)", "7089558164911878523"));
  }
  @Override
  public String getPresentation() {
    return "wrapWithTry";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (!((boolean) IControlAdvancedFeatures__BehaviorDescriptor.areAttemptsAllowed_id4FREEt6zM91.invoke(SNodeOperations.asSConcept(CONCEPTS.IControlAdvancedFeatures$AH), node))) {
      return false;
    }
    return ConstraintHelper.canReplaceNodeWithConcept(node, CONCEPTS.TryExpression$s4) && SNodeOperations.isInstanceOf(TypecheckingFacade.getFromContext().getTypeOf(node), CONCEPTS.AttemptType$h8) && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), CONCEPTS.TryExpression$s4));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "ERROR HANDLING: " + ("Wrap with Try");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNodeOperations.replaceWithAnother(node, createTryExpression_bks62d_a0a0a0(node));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return wrapWithTry_Intention.this;
    }
  }
  private static SNode createTryExpression_bks62d_a0a0a0(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TryExpression$s4);
    {
      SNodeBuilder n1 = n0.forChild(LINKS.successClause$ZBbX).init(CONCEPTS.TrySuccessClause$Yi);
      n1.forChild(LINKS.expr$aRha).init(CONCEPTS.Expression$D_);
    }
    n0.forChild(LINKS.expr$TQmf).initNode(p0, CONCEPTS.Expression$D_, true);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IControlAdvancedFeatures$AH = MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x69e8e71b93a1b282L, "org.iets3.core.base.structure.IControlAdvancedFeatures");
    /*package*/ static final SConcept TryExpression$s4 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, "org.iets3.core.expr.base.structure.TryExpression");
    /*package*/ static final SConcept AttemptType$h8 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL, "org.iets3.core.expr.base.structure.AttemptType");
    /*package*/ static final SConcept TrySuccessClause$Yi = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL, "org.iets3.core.expr.base.structure.TrySuccessClause");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink successClause$ZBbX = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x59f3fec4e785820eL, "successClause");
    /*package*/ static final SContainmentLink expr$aRha = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL, 0x59f3fec4e78581c0L, "expr");
    /*package*/ static final SContainmentLink expr$TQmf = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L, 0x59f3fec4e77fb444L, "expr");
  }
}
