package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.behavior.IMayHaveEffect__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class EffectDescriptor {

  private boolean myModifiesState;
  private boolean myIsIdempotent;
  private boolean myReadsState;
  private Set<String> kinds;


  public EffectDescriptor(boolean modifiesState, boolean isIdempotent, boolean readsState) {
    myModifiesState = modifiesState;
    myReadsState = readsState;
    myIsIdempotent = isIdempotent;
  }

  public boolean isPure() {
    return !(this.myModifiesState) && !(this.myReadsState);
  }

  public boolean readsOrModifiesMutableState() {
    return this.onlyReadsState() || this.modifiesState();
  }

  public boolean modifiesState() {
    return this.myModifiesState;
  }
  public boolean readsAndModifies() {
    return this.myModifiesState && this.myReadsState;
  }

  public boolean onlyReadsState() {
    return this.myReadsState && !(this.myModifiesState);
  }

  public boolean isIdempotent() {
    return this.modifiesState() && this.myIsIdempotent;
  }

  public EffectDescriptor merge(EffectDescriptor d) {
    EffectDescriptor newD = new EffectDescriptor(this.myModifiesState || d.myModifiesState, this.myIsIdempotent && d.myIsIdempotent, this.myReadsState || d.myReadsState);
    if (this.kinds() != null) {
      newD.addKinds(this.kinds());
    }
    if (d.kinds() != null) {
      newD.addKinds(d.kinds());
    }
    return newD;
  }

  public EffectDescriptor merge(SNode d) {
    if (d == null) {
      return this;
    }
    if (SNodeOperations.isInstanceOf(d, CONCEPTS.IMayHaveEffect$Gp)) {
      return this.merge(IMayHaveEffect__BehaviorDescriptor.effectDescriptor_id6GySMNjjWfO.invoke(SNodeOperations.cast(d, CONCEPTS.IMayHaveEffect$Gp)));
    } else {
      return this;
    }
  }

  public static EffectDescriptor forNodes(Iterable<SNode> nodes) {
    boolean writes = false;
    boolean idem = true;
    boolean reads = false;
    Set<String> kinds = SetSequence.fromSet(new HashSet<String>());
    for (SNode n : Sequence.fromIterable(nodes)) {
      if (SNodeOperations.isInstanceOf(n, CONCEPTS.IMayHaveEffect$Gp)) {
        SNode en = SNodeOperations.cast(n, CONCEPTS.IMayHaveEffect$Gp);
        EffectDescriptor d = IMayHaveEffect__BehaviorDescriptor.effectDescriptor_id6GySMNjjWfO.invoke(en);
        if (d != null) {
          if (d.modifiesState()) {
            writes = true;
          }
          if (d.onlyReadsState()) {
            reads = true;
          }
          if (!(d.isIdempotent())) {
            idem = false;
          }
          if (d.kinds() != null) {
            SetSequence.fromSet(kinds).addSequence(CollectionSequence.fromCollection(d.kinds()));
          }
        }
      }
    }
    EffectDescriptor newD = new EffectDescriptor(writes, idem, reads);
    if (SetSequence.fromSet(kinds).isNotEmpty()) {
      newD.setKinds(kinds);
    }
    return newD;
  }

  public static EffectDescriptor forNodes(SNode n1, SNode n2) {
    List<SNode> l = ListSequence.fromList(new ArrayList<SNode>());
    if (n1 != null) {
      ListSequence.fromList(l).addElement(n1);
    }
    if (n2 != null) {
      ListSequence.fromList(l).addElement(n2);
    }
    return forNodes(l);
  }
  public static EffectDescriptor forNode(SNode n1) {
    List<SNode> l = ListSequence.fromList(new ArrayList<SNode>());
    if (n1 != null) {
      ListSequence.fromList(l).addElement(n1);
    }
    return forNodes(l);
  }

  public static EffectDescriptor forNodes(SNode n1, SNode n2, SNode n3) {
    List<SNode> l = ListSequence.fromList(new ArrayList<SNode>());
    if (n1 != null) {
      ListSequence.fromList(l).addElement(n1);
    }
    if (n2 != null) {
      ListSequence.fromList(l).addElement(n2);
    }
    if (n3 != null) {
      ListSequence.fromList(l).addElement(n3);
    }
    return forNodes(l);
  }

  @Override
  public String toString() {
    String rr = ((this.modifiesState() ? "modifies" : "")) + " " + ((this.isIdempotent() ? "idempotent" : "")) + " " + ((this.onlyReadsState() ? "reads" : ""));
    String base = "effects[" + ((rr == null ? null : rr.trim())) + "]";
    return base + ((this.kinds() != null ? this.kinds() : ""));
  }

  public static EffectDescriptor pure() {
    return new EffectDescriptor(false, false, false);
  }

  public static EffectDescriptor reads() {
    return new EffectDescriptor(false, false, true);
  }

  public static EffectDescriptor modifies() {
    return new EffectDescriptor(true, false, false);
  }

  public static EffectDescriptor modifiesAndReads() {
    return new EffectDescriptor(true, false, true);
  }

  public boolean allows(EffectDescriptor needed) {
    if (needed.isPure()) {
      return true;
    }
    if (needed.onlyReadsState() && this.modifiesState()) {
      return true;
    }
    if (needed.onlyReadsState() && this.onlyReadsState()) {
      return true;
    }
    if (needed.modifiesState() && this.modifiesState()) {
      if (this.isIdempotent() && !(needed.isIdempotent())) {
        return false;
      }
      return true;
    }
    return false;
  }

  public String allows(SNode n, String error) {
    if (SNodeOperations.isInstanceOf(n, CONCEPTS.IMayHaveEffect$Gp)) {
      return (allows(IMayHaveEffect__BehaviorDescriptor.effectDescriptor_id6GySMNjjWfO.invoke(SNodeOperations.cast(n, CONCEPTS.IMayHaveEffect$Gp))) ? null : error);
    } else {
      return null;
    }
  }

  public String toAnnotation() {
    if (this.isPure()) {
      return "";
    }
    if (this.readsAndModifies()) {
      return "/RM";
    }
    if (this.onlyReadsState()) {
      return "/R";
    }
    return "/M";
  }

  public EffectDescriptor addKind(String k) {
    if (this.kinds == null) {
      this.kinds = SetSequence.fromSet(new HashSet<String>());
    }
    SetSequence.fromSet(this.kinds).addElement(k);
    return this;
  }

  public EffectDescriptor setKinds(Collection<String> k) {
    this.kinds = SetSequence.fromSet(new HashSet<String>());
    SetSequence.fromSet(this.kinds).addSequence(CollectionSequence.fromCollection(k));
    return this;
  }

  public EffectDescriptor addKinds(Collection<String> kinds) {
    if (this.kinds == null) {
      this.kinds = SetSequence.fromSet(new HashSet<String>());
    }
    for (String s : kinds) {
      SetSequence.fromSet(this.kinds).addElement(s);
    }
    return this;
  }

  public Collection<String> kinds() {
    return this.kinds;
  }

  public boolean hasKind(String s) {
    return SetSequence.fromSet(this.kinds).contains(s);
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IMayHaveEffect$Gp = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL, "org.iets3.core.expr.base.structure.IMayHaveEffect");
  }
}
