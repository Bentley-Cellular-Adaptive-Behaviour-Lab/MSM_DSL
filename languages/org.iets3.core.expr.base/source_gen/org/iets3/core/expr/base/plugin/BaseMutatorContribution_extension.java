package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.Extension;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.iets3.core.expr.base.runtime.runtime.PTF;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class BaseMutatorContribution_extension extends Extension.Default<MutatorFactory> {
  public BaseMutatorContribution_extension() {
    super("org.iets3.core.expr.base.mutatorContributions");
  }



  public MutatorFactory get() {
    return new MutatorFactory() {
      public List<Mutator> mutators() {
        List<Mutator> res = ListSequence.fromList(new ArrayList<Mutator>());
        ListSequence.fromList(res).addElement(new BinOpMutator(CONCEPTS.GreaterExpression$82, CONCEPTS.LessEqualsExpression$57));
        ListSequence.fromList(res).addElement(new BinOpMutator(CONCEPTS.GreaterExpression$82, CONCEPTS.LessExpression$4C));
        ListSequence.fromList(res).addElement(new BinOpMutator(CONCEPTS.GreaterExpression$82, CONCEPTS.GreaterEqualsExpression$TY));
        ListSequence.fromList(res).addElement(new BinOpMutator(CONCEPTS.EqualsExpression$k4, CONCEPTS.NotEqualsExpression$kz));
        ListSequence.fromList(res).addElement(new AbstractNonReversibleMutator(CONCEPTS.IfExpression$6$) {
          public SNode mutate(SNode source) {
            SNode oldIf = SNodeOperations.cast(source, CONCEPTS.IfExpression$6$);
            if ((SLinkOperations.getTarget(oldIf, LINKS.elseSection$kbJ$) != null)) {
              SNode newIf = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, "org.iets3.core.expr.base.structure.IfExpression"));
              SLinkOperations.setTarget(newIf, LINKS.condition$bVqa, SNodeOperations.copyNode(SLinkOperations.getTarget(oldIf, LINKS.condition$bVqa)));
              SLinkOperations.setTarget(newIf, LINKS.thenPart$bVSc, SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(oldIf, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v)));
              SLinkOperations.setTarget(SLinkOperations.getTarget(newIf, LINKS.elseSection$kbJ$), LINKS.expr$Fg_v, SNodeOperations.copyNode(SLinkOperations.getTarget(oldIf, LINKS.thenPart$bVSc)));
              return newIf;
            } else {
              return SNodeOperations.copyNode(oldIf);
            }
          }
        });
        ListSequence.fromList(res).addElement(new AbstractNonReversibleMutator(CONCEPTS.Expression$D_) {
          public SNode mutate(SNode source) {
            return createLogicalNotExpression_hm6u1c_a0a0a0a0a6a0a0a0a5(SNodeOperations.cast(SNodeOperations.copyNode(source), CONCEPTS.Expression$D_));
          }
          @Override
          public boolean appliesTo(SNode n) {
            return super.appliesTo(n) && PTF.isBooleanType(SNodeOperations.cast(TypecheckingFacade.getFromContext().getTypeOf(n), CONCEPTS.Type$WK)) && !(PTF.isOtherwiseLiteral(SNodeOperations.cast(n, CONCEPTS.Expression$D_)));
          }
        });

        return res;
      }
    };
  }
  private static SNode createLogicalNotExpression_hm6u1c_a0a0a0a0a6a0a0a0a5(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.LogicalNotExpression$QD);
    {
      SNodeBuilder n1 = n0.forChild(LINKS.expr$Hji0).init(CONCEPTS.ParensExpression$Tv);
      n1.forChild(LINKS.expr$m8gJ).initNode(p0, CONCEPTS.Expression$D_, true);
    }
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept GreaterExpression$82 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f94L, "org.iets3.core.expr.base.structure.GreaterExpression");
    /*package*/ static final SConcept LessEqualsExpression$57 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5013L, "org.iets3.core.expr.base.structure.LessEqualsExpression");
    /*package*/ static final SConcept LessExpression$4C = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5012L, "org.iets3.core.expr.base.structure.LessExpression");
    /*package*/ static final SConcept GreaterEqualsExpression$TY = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5011L, "org.iets3.core.expr.base.structure.GreaterEqualsExpression");
    /*package*/ static final SConcept EqualsExpression$k4 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6dc9L, "org.iets3.core.expr.base.structure.EqualsExpression");
    /*package*/ static final SConcept NotEqualsExpression$kz = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6dcaL, "org.iets3.core.expr.base.structure.NotEqualsExpression");
    /*package*/ static final SConcept IfExpression$6$ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, "org.iets3.core.expr.base.structure.IfExpression");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept LogicalNotExpression$QD = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f6aL, "org.iets3.core.expr.base.structure.LogicalNotExpression");
    /*package*/ static final SConcept ParensExpression$Tv = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86d2f11fL, "org.iets3.core.expr.base.structure.ParensExpression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink condition$bVqa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626bL, "condition");
    /*package*/ static final SContainmentLink thenPart$bVSc = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x6cef3d81a56f626dL, "thenPart");
    /*package*/ static final SContainmentLink elseSection$kbJ$ = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL, 0x86c00f011503ff8L, "elseSection");
    /*package*/ static final SContainmentLink expr$Fg_v = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL, 0x86c00f011503ffeL, "expr");
    /*package*/ static final SContainmentLink expr$Hji0 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L, 0x46ff3b3d86cd0f6bL, "expr");
    /*package*/ static final SContainmentLink expr$m8gJ = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86d2f11fL, 0x46ff3b3d86d2f172L, "expr");
  }
}
