package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import com.mbeddr.mpsutil.interpreter.rt.IContext;
import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class CVH {

  private static ConstraintViolationHandler handler = null;
  public static boolean overrideWithException = false;

  public static void reportErrorIfFalse(IContext ctx, String kind, Object causingValue, Object trueOrNot, SNode nodeWithError, MessageValue msg, ComputationTrace trace) {
    reportIfFalse(ctx, kind, causingValue, trueOrNot, nodeWithError, msg, trace, false);
  }

  public static void reportIfFalse(IContext ctx, String kind, Object causingValue, Object trueOrNot, SNode nodeWithError, MessageValue msg, ComputationTrace trace, boolean warning) {
    if (Boolean.TRUE.equals(trueOrNot)) {
      return;
    }

    MessageLog.log(ctx, msg);

    ConstraintViolationHandler handlerToUse = CVH.getHandlerToUse();

    if (warning) {
      handlerToUse.reportWarning(kind, causingValue, ctx, nodeWithError, msg, trace);
    } else {
      trace.markForReveal();
      handlerToUse.reportError(kind, causingValue, ctx, nodeWithError, msg, trace);
    }
  }

  private static ConstraintViolationHandler getHandlerToUse() {
    ConstraintViolationHandler handlerToUse;
    if (overrideWithException) {
      handlerToUse = new ThrowConstraintViolationHandler();
    } else {
      if (CVH.handler == null) {
        ExtensionPoint<ConstraintViolationHandler> ep = new ExtensionPoint<ConstraintViolationHandler>("org.iets3.core.expr.base.constraintViolationHandler");
        Iterable<ConstraintViolationHandler> handlers = ep.getObjects();
        if (Sequence.fromIterable(handlers).isEmpty()) {
          CVH.handler = new SysErrConstraintViolationHandler();
        } else {
          CVH.handler = Sequence.fromIterable(handlers).first();
        }
      }
      handlerToUse = CVH.handler;
    }
    return handlerToUse;
  }

}
