package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class IOptionDerefContext__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x588e25ed5b40bd76L, "org.iets3.core.expr.base.structure.IOptionDerefContext");

  public static final SMethod<String> invalidUseErrorMessage_id5ye9uPrgjJa = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("invalidUseErrorMessage").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrgjJa").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> findTheSomeQueries_id5ye9uPrkFwU = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("findTheSomeQueries").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrkFwU").build();
  public static final SMethod<Boolean> isValExpressionUsedLegally_id5ye9uPrkHVH = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isValExpressionUsedLegally").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrkHVH").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> filter_id3kzwyUOs0DA = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("filter").modifiers(SModifiersImpl.create(8, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("3kzwyUOs0DA").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Iterable<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(invalidUseErrorMessage_id5ye9uPrgjJa, findTheSomeQueries_id5ye9uPrkFwU, isValExpressionUsedLegally_id5ye9uPrkHVH, filter_id3kzwyUOs0DA);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> filter_id3kzwyUOs0DA(@NotNull SNode __thisNode__, SNode enclosingNode, Iterable<SNode> rawScope) {
    if (SNodeOperations.isInstanceOf(enclosingNode, CONCEPTS.IsSomeExpression$Ae)) {
      return rawScope;
    }

    Iterable<SNode> queries = IOptionDerefContext__BehaviorDescriptor.findTheSomeQueries_id5ye9uPrkFwU.invoke(__thisNode__);
    List<SNode> filteredScope = new ArrayList<SNode>();
    for (SNode it : Sequence.fromIterable(rawScope)) {
      boolean foundInSomes = false;
      for (SNode q : Sequence.fromIterable(queries)) {
        SNode optionValue = SLinkOperations.getTarget(q, LINKS.expr$abfa);
        if (SNodeOperations.isInstanceOf(optionValue, CONCEPTS.ISingleSymbolRef$yW)) {
          SNode ssOptionValue = SNodeOperations.cast(optionValue, CONCEPTS.ISingleSymbolRef$yW);
          if (IRef__BehaviorDescriptor.target_id6rGLT0TevFd.invoke(ssOptionValue) == it) {
            foundInSomes = true;
          }
        }
      }
      if (!(foundInSomes)) {
        ListSequence.fromList(filteredScope).addElement(it);
      }
    }
    return filteredScope;
  }

  /*package*/ IOptionDerefContext__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 3:
        return (T) ((Iterable<SNode>) filter_id3kzwyUOs0DA(node, (SNode) parameters[0], (Iterable<SNode>) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept IsSomeExpression$Ae = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, "org.iets3.core.expr.base.structure.IsSomeExpression");
    /*package*/ static final SInterfaceConcept ISingleSymbolRef$yW = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb470014aL, "org.iets3.core.expr.base.structure.ISingleSymbolRef");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$abfa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, 0x26f4f2a81cac5801L, "expr");
  }
}
