package org.iets3.core.expr.base.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import org.iets3.core.expr.base.editor.coverage_StyleSheet.CoverageColoringStyleClass;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class BaseConcept_showCoverage_conditionalEditor_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public BaseConcept_showCoverage_conditionalEditor_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createPriorityInfoCell_1();
  }

  private EditorCell createPriorityInfoCell_0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = null;
    editorCell = createAlternation_0();
    editorCell.setBig(true);
    setCellContext(editorCell);
    return editorCell;
  }
  private EditorCell createPriorityInfoCell_1() {
    return createPriorityInfoCell_0(getEditorContext(), myNode);
  }
  private EditorCell createAlternation_0() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_f7b4np_a0a();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createNextEditor_0();
    } else {
      editorCell = createNextEditor_1();
    }
    return editorCell;
  }
  private boolean nodeCondition_f7b4np_a0a() {
    if (SNodeOperations.isInstanceOf(myNode, CONCEPTS.IEmpty$6_)) {
      return false;
    }
    if ((SNodeOperations.getNodeAncestor(myNode, CONCEPTS.AssessmentContainer$Uv, false, false) != null)) {
      return false;
    }
    if ((SNodeOperations.getNodeAncestor(myNode, CONCEPTS.Chunk$sT, false, false) == null)) {
      return false;
    }
    return true;
  }
  private EditorCell createNextEditor_0() {
    {
      EditorCell editorCell = getCellFactory().createEditorCell(myNode, false, BaseConcept_showCoverage_conditionalEditor_Editor_coverageAnnotation.class);
      Style style = new StyleImpl();
      new CoverageColoringStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
      editorCell.getStyle().putAll(style);
      return editorCell;
    }
  }
  private EditorCell createNextEditor_1() {
    {
      EditorCell editorCell = getCellFactory().createEditorCell(myNode, false, BaseConcept_showCoverage_conditionalEditor_Editor_coverageAnnotation.class);
      return editorCell;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IEmpty$6_ = MetaAdapterFactory.getInterfaceConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xe900768cf47dcc3L, "com.mbeddr.core.base.structure.IEmpty");
    /*package*/ static final SConcept AssessmentContainer$Uv = MetaAdapterFactory.getConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xc022423d5828abbL, "com.mbeddr.core.base.structure.AssessmentContainer");
    /*package*/ static final SConcept Chunk$sT = MetaAdapterFactory.getConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x6315bcc6effb4ea6L, "com.mbeddr.core.base.structure.Chunk");
  }
}
