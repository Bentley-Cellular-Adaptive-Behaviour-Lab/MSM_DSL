package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.plugin.EffectHelper;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class IsSomeExpression__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, "org.iets3.core.expr.base.structure.IsSomeExpression");

  public static final SMethod<String> renderReadable_id4Y0vh0cfqjE = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Y0vh0cfqjE").build();
  public static final SMethod<String> invalidContextErrorMessage_id5ye9uPrghTl = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("invalidContextErrorMessage").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrghTl").build();
  public static final SMethod<Boolean> isInDerefContext_id5ye9uPrikT6 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInDerefContext").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ye9uPrikT6").build();
  public static final SMethod<String> getAutomaticName_idcJpacq408C = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getAutomaticName").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("cJpacq408C").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();
  public static final SMethod<String> allowsEffectForNode_idORfz$DS6Ap = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("allowsEffectForNode").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ORfz$DS6Ap").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(renderReadable_id4Y0vh0cfqjE, invalidContextErrorMessage_id5ye9uPrghTl, isInDerefContext_id5ye9uPrikT6, getAutomaticName_idcJpacq408C, effectDescriptor_id6GySMNjjWfO, allowsEffectForNode_idORfz$DS6Ap);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String renderReadable_id4Y0vh0cfqjE(@NotNull SNode __thisNode__) {
    return "isSome" + "(" + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.expr$abfa)) + ")";
  }
  /*package*/ static String invalidContextErrorMessage_id5ye9uPrghTl(@NotNull SNode __thisNode__) {
    SNode deref = SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.IOptionDerefContext$Vd, false, false);
    if (deref == null) {
      return "Cannot find a IOptionDerefContext among ancestors.";
    }
    String err = IOptionDerefContext__BehaviorDescriptor.invalidUseErrorMessage_id5ye9uPrgjJa.invoke(deref, __thisNode__);
    if (err != null) {
      return err;
    }
    return null;
  }
  /*package*/ static boolean isInDerefContext_id5ye9uPrikT6(@NotNull SNode __thisNode__) {
    return (SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.IOptionDerefContext$Vd, false, false) != null);
  }
  /*package*/ static String getAutomaticName_idcJpacq408C(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(__thisNode__, LINKS.expr$abfa), CONCEPTS.ISingleSymbolRef$yW)) {
      return IIsSingleSymbol__BehaviorDescriptor.getSymbolName_id6XENO0rcSx.invoke(SNodeOperations.cast(SLinkOperations.getTarget(__thisNode__, LINKS.expr$abfa), CONCEPTS.ISingleSymbolRef$yW));
    } else {
      return "val";
    }
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return ((EffectDescriptor) IMayHaveEffect__BehaviorDescriptor.deriveFrom_id6KxoTHgL$U0.invoke(__thisNode__, SLinkOperations.getTarget(__thisNode__, LINKS.expr$abfa)));
  }
  /*package*/ static String allowsEffectForNode_idORfz$DS6Ap(@NotNull SNode __thisNode__, SNode n) {
    return EffectHelper.allowsRead(n, "only read effects allowed here");
  }

  /*package*/ IsSomeExpression__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) renderReadable_id4Y0vh0cfqjE(node));
      case 1:
        return (T) ((String) invalidContextErrorMessage_id5ye9uPrghTl(node));
      case 2:
        return (T) ((Boolean) isInDerefContext_id5ye9uPrikT6(node));
      case 3:
        return (T) ((String) getAutomaticName_idcJpacq408C(node));
      case 4:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      case 5:
        return (T) ((String) allowsEffectForNode_idORfz$DS6Ap(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expr$abfa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L, 0x26f4f2a81cac5801L, "expr");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IOptionDerefContext$Vd = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x588e25ed5b40bd76L, "org.iets3.core.expr.base.structure.IOptionDerefContext");
    /*package*/ static final SInterfaceConcept ISingleSymbolRef$yW = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb470014aL, "org.iets3.core.expr.base.structure.ISingleSymbolRef");
  }
}
