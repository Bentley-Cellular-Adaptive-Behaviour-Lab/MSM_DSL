package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import org.iets3.core.expr.base.behavior.IMayHaveEffect__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.iets3.core.expr.base.behavior.IMayAllowEffect__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class check_IMayHaveEffect_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_IMayHaveEffect_NonTypesystemRule() {
  }
  public void applyRule(final SNode ie, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    EffectDescriptor effectDescriptor = IMayHaveEffect__BehaviorDescriptor.effectDescriptor_id6GySMNjjWfO.invoke(ie);
    if (effectDescriptor.readsOrModifiesMutableState()) {
      SNode allower = SNodeOperations.getNodeAncestor(ie, CONCEPTS.IMayAllowEffect$xY, false, false);
      if (allower == null) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ie, "no effect allowed in this context.", "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "952298261448802444", null, errorTarget);
        }
      } else {
        String effectError = IMayAllowEffect__BehaviorDescriptor.allowsEffectForNode_idORfz$DS6Ap.invoke(allower, ie);
        if (effectError != null) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ie, "Effects " + allower + ": " + effectError, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "952298261448804408", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.IMayHaveEffect$Gp;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IMayAllowEffect$xY = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L, "org.iets3.core.expr.base.structure.IMayAllowEffect");
    /*package*/ static final SInterfaceConcept IMayHaveEffect$Gp = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL, "org.iets3.core.expr.base.structure.IMayHaveEffect");
  }
}
