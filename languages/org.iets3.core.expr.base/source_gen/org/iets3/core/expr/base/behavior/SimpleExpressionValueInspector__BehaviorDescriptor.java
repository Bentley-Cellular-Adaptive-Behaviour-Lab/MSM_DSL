package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.httpsupport.runtime.base.HttpSupportUtil;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;

public final class SimpleExpressionValueInspector__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L, "org.iets3.core.expr.base.structure.SimpleExpressionValueInspector");

  public static final SMethod<Void> addValue_id2ufoZQIGI7Z = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addValue").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2ufoZQIGI7Z").build(SMethodBuilder.createJavaParameter(Object.class, ""));
  public static final SMethod<Void> clearValues_id2ufoZQIGI9k = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("clearValues").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2ufoZQIGI9k").build();
  public static final SMethod<List<Object>> getValues_id2ufoZQIKMt6 = new SMethodBuilder<List<Object>>(new SJavaCompoundTypeImpl((Class<List<Object>>) ((Class) Object.class))).name("getValues").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2ufoZQIKMt6").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(addValue_id2ufoZQIGI7Z, clearValues_id2ufoZQIGI9k, getValues_id2ufoZQIKMt6);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void addValue_id2ufoZQIGI7Z(@NotNull SNode __thisNode__, Object value) {
    List<Object> l = SimpleExpressionValueInspector__BehaviorDescriptor.getValues_id2ufoZQIKMt6.invoke(__thisNode__);
    if (l == null) {
      l = ListSequence.fromList(new ArrayList<Object>());
      __thisNode__.putUserObject("___inspect", l);
    }
    if (SPropertyOperations.getBoolean(__thisNode__, PROPS.onlyLast$grhO)) {
      ListSequence.fromList(l).clear();
    }
    if (SPropertyOperations.getBoolean(__thisNode__, PROPS.showOnConsole$uBbk)) {
      String tt = (isNotEmptyString(SPropertyOperations.getString(__thisNode__, PROPS.optionalLabel$ul$y)) ? (SPropertyOperations.getString(__thisNode__, PROPS.optionalLabel$ul$y) + " ") : "");
      System.err.println("inspect " + tt + HttpSupportUtil.getURL(__thisNode__) + "\n  " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SNodeOperations.getParent(__thisNode__)) + ": " + value);
    }
    ListSequence.fromList(l).addElement(value);
  }
  /*package*/ static void clearValues_id2ufoZQIGI9k(@NotNull SNode __thisNode__) {
    __thisNode__.putUserObject("___inspect", null);
  }
  /*package*/ static List<Object> getValues_id2ufoZQIKMt6(@NotNull SNode __thisNode__) {
    return (List<Object>) __thisNode__.getUserObject("___inspect");
  }

  /*package*/ SimpleExpressionValueInspector__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        addValue_id2ufoZQIGI7Z(node, (Object) parameters[0]);
        return null;
      case 1:
        clearValues_id2ufoZQIGI9k(node);
        return null;
      case 2:
        return (T) ((List<Object>) getValues_id2ufoZQIKMt6(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }

  private static final class PROPS {
    /*package*/ static final SProperty onlyLast$grhO = MetaAdapterFactory.getProperty(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L, 0x6283e1a8746a1552L, "onlyLast");
    /*package*/ static final SProperty optionalLabel$ul$y = MetaAdapterFactory.getProperty(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L, 0x1b62689b13c00c98L, "optionalLabel");
    /*package*/ static final SProperty showOnConsole$uBbk = MetaAdapterFactory.getProperty(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L, 0x1b62689b13405facL, "showOnConsole");
  }
}
