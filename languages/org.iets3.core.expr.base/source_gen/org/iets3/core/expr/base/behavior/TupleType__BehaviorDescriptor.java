package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class TupleType__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, "org.iets3.core.expr.base.structure.TupleType");

  public static final SMethod<Boolean> hasSameStructure_id2ck7OjOKh8Y = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasSameStructure").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2ck7OjOKh8Y").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<String> getPresentation_idhEwIMiw = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPresentation").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hEwIMiw").build();
  public static final SMethod<Boolean> isSameAs_idfIXgjlt4VE = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isSameAs").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("fIXgjlt4VE").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(hasSameStructure_id2ck7OjOKh8Y, getPresentation_idhEwIMiw, isSameAs_idfIXgjlt4VE);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean hasSameStructure_id2ck7OjOKh8Y(@NotNull SNode __thisNode__, SNode other) {
    if (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elementTypes$gWta)).count() == ListSequence.fromList(SLinkOperations.getChildren(other, LINKS.elementTypes$gWta)).count()) {
      for (SNode thisE : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elementTypes$gWta))) {
        if (SNodeOperations.getConcept(thisE) != SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(other, LINKS.elementTypes$gWta)).getElement(SNodeOperations.getIndexInParent(thisE)))) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  /*package*/ static String getPresentation_idhEwIMiw(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elementTypes$gWta)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return (String) BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(it);
      }
    }) + "";
  }
  /*package*/ static boolean isSameAs_idfIXgjlt4VE(@NotNull SNode __thisNode__, SNode other) {
    if (other == null) {
      return false;
    }
    if (!((SNodeOperations.isInstanceOf(other, CONCEPTS.TupleType$8E)))) {
      return false;
    }
    final SNode casted = SNodeOperations.cast(other, CONCEPTS.TupleType$8E);
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elementTypes$gWta)).count() == ListSequence.fromList(SLinkOperations.getChildren(casted, LINKS.elementTypes$gWta)).count() && ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elementTypes$gWta)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) Type__BehaviorDescriptor.isSameAs_idfIXgjlt4VE.invoke(it, ListSequence.fromList(SLinkOperations.getChildren(casted, LINKS.elementTypes$gWta)).getElement(SNodeOperations.getIndexInParent(it)));
      }
    });
  }

  /*package*/ TupleType__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) hasSameStructure_id2ck7OjOKh8Y(node, (SNode) parameters[0]));
      case 1:
        return (T) ((String) getPresentation_idhEwIMiw(node));
      case 2:
        return (T) ((Boolean) isSameAs_idfIXgjlt4VE(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elementTypes$gWta = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, 0xe247742183174bbL, "elementTypes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TupleType$8E = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, "org.iets3.core.expr.base.structure.TupleType");
  }
}
