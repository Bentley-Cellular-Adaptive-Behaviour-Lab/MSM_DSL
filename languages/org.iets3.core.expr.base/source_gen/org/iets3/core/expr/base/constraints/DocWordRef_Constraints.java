package org.iets3.core.expr.base.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.iets3.core.expr.base.behavior.IDocumentableWordProvider__BehaviorDescriptor;
import org.iets3.core.expr.base.behavior.IDocumentableWordContainer__BehaviorDescriptor;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class DocWordRef_Constraints extends BaseConstraintsDescriptor {
  public DocWordRef_Constraints() {
    super(CONCEPTS.DocWordRef$7D);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.node$xsqG, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_prshr8_a0a0a0a0a1a0a0a0d;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            List<SNode> words = new ArrayList<SNode>();
            SNode hostNode = SNodeOperations.getParent(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.ElementDocumentation$BO, true, false));
            if (SNodeOperations.isInstanceOf(hostNode, CONCEPTS.IDocumentableWordProvider$Kk)) {
              ListSequence.fromList(words).addSequence(Sequence.fromIterable(IDocumentableWordProvider__BehaviorDescriptor.namedNodesForComment_id5ElkanPUl6T.invoke(SNodeOperations.cast(hostNode, CONCEPTS.IDocumentableWordProvider$Kk))));
            }
            SNode container = SNodeOperations.getNodeAncestor(hostNode, CONCEPTS.IDocumentableWordContainer$2n, false, false);
            if (container != null) {
              ListSequence.fromList(words).addSequence(Sequence.fromIterable(IDocumentableWordContainer__BehaviorDescriptor.namedNodesForComment_id5ElkanQ81fv.invoke(container)));
            }
            return ListScope.forResolvableElements(ListSequence.fromList(words).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return !(SNodeOperations.isInstanceOf(it, CONCEPTS.IEmpty$6_));
              }
            }));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return (SNodeOperations.getNodeAncestor(parentNode, CONCEPTS.IDocumentableWordProvider$Kk, false, false) != null);
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:9750d418-880f-460d-9880-d67dd111722d(org.iets3.core.expr.base.constraints)", "7126186526844787177");
  private static final SNodePointer breakingNode_prshr8_a0a0a0a0a1a0a0a0d = new SNodePointer("r:9750d418-880f-460d-9880-d67dd111722d(org.iets3.core.expr.base.constraints)", "6527211908668944723");

  private static final class CONCEPTS {
    /*package*/ static final SConcept DocWordRef$7D = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L, "org.iets3.core.expr.base.structure.DocWordRef");
    /*package*/ static final SConcept ElementDocumentation$BO = MetaAdapterFactory.getConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x3588b64556af217cL, "com.mbeddr.core.base.structure.ElementDocumentation");
    /*package*/ static final SInterfaceConcept IDocumentableWordProvider$Kk = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95190L, "org.iets3.core.expr.base.structure.IDocumentableWordProvider");
    /*package*/ static final SInterfaceConcept IDocumentableWordContainer$2n = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f62013b8L, "org.iets3.core.expr.base.structure.IDocumentableWordContainer");
    /*package*/ static final SInterfaceConcept IEmpty$6_ = MetaAdapterFactory.getInterfaceConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xe900768cf47dcc3L, "com.mbeddr.core.base.structure.IEmpty");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink node$xsqG = MetaAdapterFactory.getReferenceLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L, 0x5a9550a5f5e9597bL, "node");
  }
}
