package org.iets3.core.expr.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractMinMaxExpression = createDescriptorForAbstractMinMaxExpression();
  /*package*/ final ConceptDescriptor myConceptAltOption = createDescriptorForAltOption();
  /*package*/ final ConceptDescriptor myConceptAlternativesExpression = createDescriptorForAlternativesExpression();
  /*package*/ final ConceptDescriptor myConceptAlwaysValue = createDescriptorForAlwaysValue();
  /*package*/ final ConceptDescriptor myConceptAndTag = createDescriptorForAndTag();
  /*package*/ final ConceptDescriptor myConceptAssignmentExpr = createDescriptorForAssignmentExpr();
  /*package*/ final ConceptDescriptor myConceptAttemptType = createDescriptorForAttemptType();
  /*package*/ final ConceptDescriptor myConceptBangOp = createDescriptorForBangOp();
  /*package*/ final ConceptDescriptor myConceptBinaryArithmeticExpression = createDescriptorForBinaryArithmeticExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryComparisonExpression = createDescriptorForBinaryComparisonExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryEqualityExpression = createDescriptorForBinaryEqualityExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryExpression = createDescriptorForBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryLogicalExpression = createDescriptorForBinaryLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptCastExpression = createDescriptorForCastExpression();
  /*package*/ final ConceptDescriptor myConceptCheckTypeConstraintsExpr = createDescriptorForCheckTypeConstraintsExpr();
  /*package*/ final ConceptDescriptor myConceptColonCast = createDescriptorForColonCast();
  /*package*/ final ConceptDescriptor myConceptConstraintAndErrorNode = createDescriptorForConstraintAndErrorNode();
  /*package*/ final ConceptDescriptor myConceptContract = createDescriptorForContract();
  /*package*/ final ConceptDescriptor myConceptContractItem = createDescriptorForContractItem();
  /*package*/ final ConceptDescriptor myConceptConvenientBoolean = createDescriptorForConvenientBoolean();
  /*package*/ final ConceptDescriptor myConceptConvenientBooleanValue = createDescriptorForConvenientBooleanValue();
  /*package*/ final ConceptDescriptor myConceptConvenientValueCond = createDescriptorForConvenientValueCond();
  /*package*/ final ConceptDescriptor myConceptDeRefTarget = createDescriptorForDeRefTarget();
  /*package*/ final ConceptDescriptor myConceptDefaultValueExpression = createDescriptorForDefaultValueExpression();
  /*package*/ final ConceptDescriptor myConceptDivExpression = createDescriptorForDivExpression();
  /*package*/ final ConceptDescriptor myConceptDocWordRef = createDescriptorForDocWordRef();
  /*package*/ final ConceptDescriptor myConceptDotExpression = createDescriptorForDotExpression();
  /*package*/ final ConceptDescriptor myConceptEmptyExpression = createDescriptorForEmptyExpression();
  /*package*/ final ConceptDescriptor myConceptEmptyValue = createDescriptorForEmptyValue();
  /*package*/ final ConceptDescriptor myConceptEqualsExpression = createDescriptorForEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptErrorExpression = createDescriptorForErrorExpression();
  /*package*/ final ConceptDescriptor myConceptErrorLiteral = createDescriptorForErrorLiteral();
  /*package*/ final ConceptDescriptor myConceptErrorTarget = createDescriptorForErrorTarget();
  /*package*/ final ConceptDescriptor myConceptExprInContract = createDescriptorForExprInContract();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFailExpr = createDescriptorForFailExpr();
  /*package*/ final ConceptDescriptor myConceptGenericErrorType = createDescriptorForGenericErrorType();
  /*package*/ final ConceptDescriptor myConceptGreaterEqualsExpression = createDescriptorForGreaterEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptGreaterExpression = createDescriptorForGreaterExpression();
  /*package*/ final ConceptDescriptor myConceptHasValueOp = createDescriptorForHasValueOp();
  /*package*/ final ConceptDescriptor myConceptIAllowDeletionOfDot = createDescriptorForIAllowDeletionOfDot();
  /*package*/ final ConceptDescriptor myConceptIAllowDotOnLeft = createDescriptorForIAllowDotOnLeft();
  /*package*/ final ConceptDescriptor myConceptIAllowsDocInChildExpressions = createDescriptorForIAllowsDocInChildExpressions();
  /*package*/ final ConceptDescriptor myConceptIAssertConstraints = createDescriptorForIAssertConstraints();
  /*package*/ final ConceptDescriptor myConceptIAttemptType = createDescriptorForIAttemptType();
  /*package*/ final ConceptDescriptor myConceptIBigExpression = createDescriptorForIBigExpression();
  /*package*/ final ConceptDescriptor myConceptIBlockLike = createDescriptorForIBlockLike();
  /*package*/ final ConceptDescriptor myConceptICanBeLValue = createDescriptorForICanBeLValue();
  /*package*/ final ConceptDescriptor myConceptICollectionType = createDescriptorForICollectionType();
  /*package*/ final ConceptDescriptor myConceptIContainmentStackMember = createDescriptorForIContainmentStackMember();
  /*package*/ final ConceptDescriptor myConceptIContextAssistantTypeProvider = createDescriptorForIContextAssistantTypeProvider();
  /*package*/ final ConceptDescriptor myConceptIContextTypeProvider = createDescriptorForIContextTypeProvider();
  /*package*/ final ConceptDescriptor myConceptIContextTypedOp = createDescriptorForIContextTypedOp();
  /*package*/ final ConceptDescriptor myConceptIContracted = createDescriptorForIContracted();
  /*package*/ final ConceptDescriptor myConceptIControlAdvancedFeatures_old = createDescriptorForIControlAdvancedFeatures_old();
  /*package*/ final ConceptDescriptor myConceptIDeclarativelyInterpretable = createDescriptorForIDeclarativelyInterpretable();
  /*package*/ final ConceptDescriptor myConceptIDocumentableWordContainer = createDescriptorForIDocumentableWordContainer();
  /*package*/ final ConceptDescriptor myConceptIDocumentableWordProvider = createDescriptorForIDocumentableWordProvider();
  /*package*/ final ConceptDescriptor myConceptIDotTarget = createDescriptorForIDotTarget();
  /*package*/ final ConceptDescriptor myConceptIHasBaseType = createDescriptorForIHasBaseType();
  /*package*/ final ConceptDescriptor myConceptIIgnoreTrivialErrorsContext = createDescriptorForIIgnoreTrivialErrorsContext();
  /*package*/ final ConceptDescriptor myConceptIIsSingleSymbol = createDescriptorForIIsSingleSymbol();
  /*package*/ final ConceptDescriptor myConceptIJoinTypeContext = createDescriptorForIJoinTypeContext();
  /*package*/ final ConceptDescriptor myConceptILiteral = createDescriptorForILiteral();
  /*package*/ final ConceptDescriptor myConceptIMainSlot = createDescriptorForIMainSlot();
  /*package*/ final ConceptDescriptor myConceptIMayAllowEffect = createDescriptorForIMayAllowEffect();
  /*package*/ final ConceptDescriptor myConceptIMayHaveEffect = createDescriptorForIMayHaveEffect();
  /*package*/ final ConceptDescriptor myConceptIMayReadMutableState = createDescriptorForIMayReadMutableState();
  /*package*/ final ConceptDescriptor myConceptIMultiTraceRoot = createDescriptorForIMultiTraceRoot();
  /*package*/ final ConceptDescriptor myConceptINameQualifier = createDescriptorForINameQualifier();
  /*package*/ final ConceptDescriptor myConceptINeverAllowDot = createDescriptorForINeverAllowDot();
  /*package*/ final ConceptDescriptor myConceptIOptionDerefContext = createDescriptorForIOptionDerefContext();
  /*package*/ final ConceptDescriptor myConceptIOptionallyTyped = createDescriptorForIOptionallyTyped();
  /*package*/ final ConceptDescriptor myConceptIParameterizedTypeSupportsEquals = createDescriptorForIParameterizedTypeSupportsEquals();
  /*package*/ final ConceptDescriptor myConceptIProgramLocationProvider = createDescriptorForIProgramLocationProvider();
  /*package*/ final ConceptDescriptor myConceptIProvidePathConstraints = createDescriptorForIProvidePathConstraints();
  /*package*/ final ConceptDescriptor myConceptIReducableExpression = createDescriptorForIReducableExpression();
  /*package*/ final ConceptDescriptor myConceptIRef = createDescriptorForIRef();
  /*package*/ final ConceptDescriptor myConceptIReferenceableType = createDescriptorForIReferenceableType();
  /*package*/ final ConceptDescriptor myConceptIRunningInterpreterContext = createDescriptorForIRunningInterpreterContext();
  /*package*/ final ConceptDescriptor myConceptISSConstrainedValue = createDescriptorForISSConstrainedValue();
  /*package*/ final ConceptDescriptor myConceptISSConstrainedValueRef = createDescriptorForISSConstrainedValueRef();
  /*package*/ final ConceptDescriptor myConceptISSDelegatingType = createDescriptorForISSDelegatingType();
  /*package*/ final ConceptDescriptor myConceptISSItValueRef = createDescriptorForISSItValueRef();
  /*package*/ final ConceptDescriptor myConceptIScopeFilterer = createDescriptorForIScopeFilterer();
  /*package*/ final ConceptDescriptor myConceptISingleSymbolRef = createDescriptorForISingleSymbolRef();
  /*package*/ final ConceptDescriptor myConceptIStructuredSyntax = createDescriptorForIStructuredSyntax();
  /*package*/ final ConceptDescriptor myConceptITargetThatCanDealWithNix = createDescriptorForITargetThatCanDealWithNix();
  /*package*/ final ConceptDescriptor myConceptITraceRoot = createDescriptorForITraceRoot();
  /*package*/ final ConceptDescriptor myConceptITypeFromMultiple = createDescriptorForITypeFromMultiple();
  /*package*/ final ConceptDescriptor myConceptITypeOverridingContext = createDescriptorForITypeOverridingContext();
  /*package*/ final ConceptDescriptor myConceptITypeSupportsDefaultValue = createDescriptorForITypeSupportsDefaultValue();
  /*package*/ final ConceptDescriptor myConceptITypeSupportsProposals = createDescriptorForITypeSupportsProposals();
  /*package*/ final ConceptDescriptor myConceptITypeable = createDescriptorForITypeable();
  /*package*/ final ConceptDescriptor myConceptITyped = createDescriptorForITyped();
  /*package*/ final ConceptDescriptor myConceptIValidOtherwiseContainer = createDescriptorForIValidOtherwiseContainer();
  /*package*/ final ConceptDescriptor myConceptIVoidContext = createDescriptorForIVoidContext();
  /*package*/ final ConceptDescriptor myConceptIWantNewLine = createDescriptorForIWantNewLine();
  /*package*/ final ConceptDescriptor myConceptIfElseSection = createDescriptorForIfElseSection();
  /*package*/ final ConceptDescriptor myConceptIfExpression = createDescriptorForIfExpression();
  /*package*/ final ConceptDescriptor myConceptImplicitValidityValExpr = createDescriptorForImplicitValidityValExpr();
  /*package*/ final ConceptDescriptor myConceptInlineMessage = createDescriptorForInlineMessage();
  /*package*/ final ConceptDescriptor myConceptInvariant = createDescriptorForInvariant();
  /*package*/ final ConceptDescriptor myConceptIsSomeExpression = createDescriptorForIsSomeExpression();
  /*package*/ final ConceptDescriptor myConceptJoinType = createDescriptorForJoinType();
  /*package*/ final ConceptDescriptor myConceptLessEqualsExpression = createDescriptorForLessEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptLessExpression = createDescriptorForLessExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalAndExpression = createDescriptorForLogicalAndExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalIffExpression = createDescriptorForLogicalIffExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalImpliesExpression = createDescriptorForLogicalImpliesExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalNotExpression = createDescriptorForLogicalNotExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalOrExpression = createDescriptorForLogicalOrExpression();
  /*package*/ final ConceptDescriptor myConceptMakeRefTarget = createDescriptorForMakeRefTarget();
  /*package*/ final ConceptDescriptor myConceptMaxExpression = createDescriptorForMaxExpression();
  /*package*/ final ConceptDescriptor myConceptMessageValueType = createDescriptorForMessageValueType();
  /*package*/ final ConceptDescriptor myConceptMinExpression = createDescriptorForMinExpression();
  /*package*/ final ConceptDescriptor myConceptMinusExpression = createDescriptorForMinusExpression();
  /*package*/ final ConceptDescriptor myConceptModExpression = createDescriptorForModExpression();
  /*package*/ final ConceptDescriptor myConceptMulExpression = createDescriptorForMulExpression();
  /*package*/ final ConceptDescriptor myConceptMulTag = createDescriptorForMulTag();
  /*package*/ final ConceptDescriptor myConceptNeverValue = createDescriptorForNeverValue();
  /*package*/ final ConceptDescriptor myConceptNonStrictEqualsExpression = createDescriptorForNonStrictEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptNoneLiteral = createDescriptorForNoneLiteral();
  /*package*/ final ConceptDescriptor myConceptNoneType = createDescriptorForNoneType();
  /*package*/ final ConceptDescriptor myConceptNotEqualsExpression = createDescriptorForNotEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptOkTarget = createDescriptorForOkTarget();
  /*package*/ final ConceptDescriptor myConceptOneOfTarget = createDescriptorForOneOfTarget();
  /*package*/ final ConceptDescriptor myConceptOperatorGroup = createDescriptorForOperatorGroup();
  /*package*/ final ConceptDescriptor myConceptOperatorTag = createDescriptorForOperatorTag();
  /*package*/ final ConceptDescriptor myConceptOptionOrExpression = createDescriptorForOptionOrExpression();
  /*package*/ final ConceptDescriptor myConceptOptionType = createDescriptorForOptionType();
  /*package*/ final ConceptDescriptor myConceptOrTag = createDescriptorForOrTag();
  /*package*/ final ConceptDescriptor myConceptParensExpression = createDescriptorForParensExpression();
  /*package*/ final ConceptDescriptor myConceptPlainConstraint = createDescriptorForPlainConstraint();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = createDescriptorForPlusExpression();
  /*package*/ final ConceptDescriptor myConceptPlusTag = createDescriptorForPlusTag();
  /*package*/ final ConceptDescriptor myConceptPostcondition = createDescriptorForPostcondition();
  /*package*/ final ConceptDescriptor myConceptPragmaDisableCaching = createDescriptorForPragmaDisableCaching();
  /*package*/ final ConceptDescriptor myConceptPragmaExpression = createDescriptorForPragmaExpression();
  /*package*/ final ConceptDescriptor myConceptPrecondition = createDescriptorForPrecondition();
  /*package*/ final ConceptDescriptor myConceptPrimitiveLiteral = createDescriptorForPrimitiveLiteral();
  /*package*/ final ConceptDescriptor myConceptPrimitiveType = createDescriptorForPrimitiveType();
  /*package*/ final ConceptDescriptor myConceptProgramLocationOp = createDescriptorForProgramLocationOp();
  /*package*/ final ConceptDescriptor myConceptProgramLocationType = createDescriptorForProgramLocationType();
  /*package*/ final ConceptDescriptor myConceptProgramLocationUrlOp = createDescriptorForProgramLocationUrlOp();
  /*package*/ final ConceptDescriptor myConceptRangeTarget = createDescriptorForRangeTarget();
  /*package*/ final ConceptDescriptor myConceptReductionInspector = createDescriptorForReductionInspector();
  /*package*/ final ConceptDescriptor myConceptReferenceType = createDescriptorForReferenceType();
  /*package*/ final ConceptDescriptor myConceptRevealer = createDescriptorForRevealer();
  /*package*/ final ConceptDescriptor myConceptRevealerThis = createDescriptorForRevealerThis();
  /*package*/ final ConceptDescriptor myConceptSimpleExpressionValueInspector = createDescriptorForSimpleExpressionValueInspector();
  /*package*/ final ConceptDescriptor myConceptSomeValExpr = createDescriptorForSomeValExpr();
  /*package*/ final ConceptDescriptor myConceptSpecificErrorType = createDescriptorForSpecificErrorType();
  /*package*/ final ConceptDescriptor myConceptSuccessExpression = createDescriptorForSuccessExpression();
  /*package*/ final ConceptDescriptor myConceptSuccessType = createDescriptorForSuccessType();
  /*package*/ final ConceptDescriptor myConceptSuccessValueExpr = createDescriptorForSuccessValueExpr();
  /*package*/ final ConceptDescriptor myConceptThisExpression = createDescriptorForThisExpression();
  /*package*/ final ConceptDescriptor myConceptTracerExpression = createDescriptorForTracerExpression();
  /*package*/ final ConceptDescriptor myConceptTryErrorClause = createDescriptorForTryErrorClause();
  /*package*/ final ConceptDescriptor myConceptTryExpression = createDescriptorForTryExpression();
  /*package*/ final ConceptDescriptor myConceptTrySuccessClause = createDescriptorForTrySuccessClause();
  /*package*/ final ConceptDescriptor myConceptTupleAccessExpr = createDescriptorForTupleAccessExpr();
  /*package*/ final ConceptDescriptor myConceptTupleType = createDescriptorForTupleType();
  /*package*/ final ConceptDescriptor myConceptTupleValue = createDescriptorForTupleValue();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptUnaryExpression = createDescriptorForUnaryExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryMinusExpression = createDescriptorForUnaryMinusExpression();
  /*package*/ final ConceptDescriptor myConceptValidityType = createDescriptorForValidityType();
  /*package*/ final ConceptDescriptor myConceptVoidType = createDescriptorForVoidType();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.extendedLanguage(0x47f075a6558e4640L, 0xa6067ce0236c8023L, "com.mbeddr.mpsutil.interpreter");
    deps.extendedLanguage(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, "com.mbeddr.core.base");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractMinMaxExpression, myConceptAltOption, myConceptAlternativesExpression, myConceptAlwaysValue, myConceptAndTag, myConceptAssignmentExpr, myConceptAttemptType, myConceptBangOp, myConceptBinaryArithmeticExpression, myConceptBinaryComparisonExpression, myConceptBinaryEqualityExpression, myConceptBinaryExpression, myConceptBinaryLogicalExpression, myConceptCastExpression, myConceptCheckTypeConstraintsExpr, myConceptColonCast, myConceptConstraintAndErrorNode, myConceptContract, myConceptContractItem, myConceptConvenientBoolean, myConceptConvenientBooleanValue, myConceptConvenientValueCond, myConceptDeRefTarget, myConceptDefaultValueExpression, myConceptDivExpression, myConceptDocWordRef, myConceptDotExpression, myConceptEmptyExpression, myConceptEmptyValue, myConceptEqualsExpression, myConceptErrorExpression, myConceptErrorLiteral, myConceptErrorTarget, myConceptExprInContract, myConceptExpression, myConceptFailExpr, myConceptGenericErrorType, myConceptGreaterEqualsExpression, myConceptGreaterExpression, myConceptHasValueOp, myConceptIAllowDeletionOfDot, myConceptIAllowDotOnLeft, myConceptIAllowsDocInChildExpressions, myConceptIAssertConstraints, myConceptIAttemptType, myConceptIBigExpression, myConceptIBlockLike, myConceptICanBeLValue, myConceptICollectionType, myConceptIContainmentStackMember, myConceptIContextAssistantTypeProvider, myConceptIContextTypeProvider, myConceptIContextTypedOp, myConceptIContracted, myConceptIControlAdvancedFeatures_old, myConceptIDeclarativelyInterpretable, myConceptIDocumentableWordContainer, myConceptIDocumentableWordProvider, myConceptIDotTarget, myConceptIHasBaseType, myConceptIIgnoreTrivialErrorsContext, myConceptIIsSingleSymbol, myConceptIJoinTypeContext, myConceptILiteral, myConceptIMainSlot, myConceptIMayAllowEffect, myConceptIMayHaveEffect, myConceptIMayReadMutableState, myConceptIMultiTraceRoot, myConceptINameQualifier, myConceptINeverAllowDot, myConceptIOptionDerefContext, myConceptIOptionallyTyped, myConceptIParameterizedTypeSupportsEquals, myConceptIProgramLocationProvider, myConceptIProvidePathConstraints, myConceptIReducableExpression, myConceptIRef, myConceptIReferenceableType, myConceptIRunningInterpreterContext, myConceptISSConstrainedValue, myConceptISSConstrainedValueRef, myConceptISSDelegatingType, myConceptISSItValueRef, myConceptIScopeFilterer, myConceptISingleSymbolRef, myConceptIStructuredSyntax, myConceptITargetThatCanDealWithNix, myConceptITraceRoot, myConceptITypeFromMultiple, myConceptITypeOverridingContext, myConceptITypeSupportsDefaultValue, myConceptITypeSupportsProposals, myConceptITypeable, myConceptITyped, myConceptIValidOtherwiseContainer, myConceptIVoidContext, myConceptIWantNewLine, myConceptIfElseSection, myConceptIfExpression, myConceptImplicitValidityValExpr, myConceptInlineMessage, myConceptInvariant, myConceptIsSomeExpression, myConceptJoinType, myConceptLessEqualsExpression, myConceptLessExpression, myConceptLogicalAndExpression, myConceptLogicalIffExpression, myConceptLogicalImpliesExpression, myConceptLogicalNotExpression, myConceptLogicalOrExpression, myConceptMakeRefTarget, myConceptMaxExpression, myConceptMessageValueType, myConceptMinExpression, myConceptMinusExpression, myConceptModExpression, myConceptMulExpression, myConceptMulTag, myConceptNeverValue, myConceptNonStrictEqualsExpression, myConceptNoneLiteral, myConceptNoneType, myConceptNotEqualsExpression, myConceptOkTarget, myConceptOneOfTarget, myConceptOperatorGroup, myConceptOperatorTag, myConceptOptionOrExpression, myConceptOptionType, myConceptOrTag, myConceptParensExpression, myConceptPlainConstraint, myConceptPlusExpression, myConceptPlusTag, myConceptPostcondition, myConceptPragmaDisableCaching, myConceptPragmaExpression, myConceptPrecondition, myConceptPrimitiveLiteral, myConceptPrimitiveType, myConceptProgramLocationOp, myConceptProgramLocationType, myConceptProgramLocationUrlOp, myConceptRangeTarget, myConceptReductionInspector, myConceptReferenceType, myConceptRevealer, myConceptRevealerThis, myConceptSimpleExpressionValueInspector, myConceptSomeValExpr, myConceptSpecificErrorType, myConceptSuccessExpression, myConceptSuccessType, myConceptSuccessValueExpr, myConceptThisExpression, myConceptTracerExpression, myConceptTryErrorClause, myConceptTryExpression, myConceptTrySuccessClause, myConceptTupleAccessExpr, myConceptTupleType, myConceptTupleValue, myConceptType, myConceptUnaryExpression, myConceptUnaryMinusExpression, myConceptValidityType, myConceptVoidType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AbstractMinMaxExpression:
        return myConceptAbstractMinMaxExpression;
      case LanguageConceptSwitch.AltOption:
        return myConceptAltOption;
      case LanguageConceptSwitch.AlternativesExpression:
        return myConceptAlternativesExpression;
      case LanguageConceptSwitch.AlwaysValue:
        return myConceptAlwaysValue;
      case LanguageConceptSwitch.AndTag:
        return myConceptAndTag;
      case LanguageConceptSwitch.AssignmentExpr:
        return myConceptAssignmentExpr;
      case LanguageConceptSwitch.AttemptType:
        return myConceptAttemptType;
      case LanguageConceptSwitch.BangOp:
        return myConceptBangOp;
      case LanguageConceptSwitch.BinaryArithmeticExpression:
        return myConceptBinaryArithmeticExpression;
      case LanguageConceptSwitch.BinaryComparisonExpression:
        return myConceptBinaryComparisonExpression;
      case LanguageConceptSwitch.BinaryEqualityExpression:
        return myConceptBinaryEqualityExpression;
      case LanguageConceptSwitch.BinaryExpression:
        return myConceptBinaryExpression;
      case LanguageConceptSwitch.BinaryLogicalExpression:
        return myConceptBinaryLogicalExpression;
      case LanguageConceptSwitch.CastExpression:
        return myConceptCastExpression;
      case LanguageConceptSwitch.CheckTypeConstraintsExpr:
        return myConceptCheckTypeConstraintsExpr;
      case LanguageConceptSwitch.ColonCast:
        return myConceptColonCast;
      case LanguageConceptSwitch.ConstraintAndErrorNode:
        return myConceptConstraintAndErrorNode;
      case LanguageConceptSwitch.Contract:
        return myConceptContract;
      case LanguageConceptSwitch.ContractItem:
        return myConceptContractItem;
      case LanguageConceptSwitch.ConvenientBoolean:
        return myConceptConvenientBoolean;
      case LanguageConceptSwitch.ConvenientBooleanValue:
        return myConceptConvenientBooleanValue;
      case LanguageConceptSwitch.ConvenientValueCond:
        return myConceptConvenientValueCond;
      case LanguageConceptSwitch.DeRefTarget:
        return myConceptDeRefTarget;
      case LanguageConceptSwitch.DefaultValueExpression:
        return myConceptDefaultValueExpression;
      case LanguageConceptSwitch.DivExpression:
        return myConceptDivExpression;
      case LanguageConceptSwitch.DocWordRef:
        return myConceptDocWordRef;
      case LanguageConceptSwitch.DotExpression:
        return myConceptDotExpression;
      case LanguageConceptSwitch.EmptyExpression:
        return myConceptEmptyExpression;
      case LanguageConceptSwitch.EmptyValue:
        return myConceptEmptyValue;
      case LanguageConceptSwitch.EqualsExpression:
        return myConceptEqualsExpression;
      case LanguageConceptSwitch.ErrorExpression:
        return myConceptErrorExpression;
      case LanguageConceptSwitch.ErrorLiteral:
        return myConceptErrorLiteral;
      case LanguageConceptSwitch.ErrorTarget:
        return myConceptErrorTarget;
      case LanguageConceptSwitch.ExprInContract:
        return myConceptExprInContract;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.FailExpr:
        return myConceptFailExpr;
      case LanguageConceptSwitch.GenericErrorType:
        return myConceptGenericErrorType;
      case LanguageConceptSwitch.GreaterEqualsExpression:
        return myConceptGreaterEqualsExpression;
      case LanguageConceptSwitch.GreaterExpression:
        return myConceptGreaterExpression;
      case LanguageConceptSwitch.HasValueOp:
        return myConceptHasValueOp;
      case LanguageConceptSwitch.IAllowDeletionOfDot:
        return myConceptIAllowDeletionOfDot;
      case LanguageConceptSwitch.IAllowDotOnLeft:
        return myConceptIAllowDotOnLeft;
      case LanguageConceptSwitch.IAllowsDocInChildExpressions:
        return myConceptIAllowsDocInChildExpressions;
      case LanguageConceptSwitch.IAssertConstraints:
        return myConceptIAssertConstraints;
      case LanguageConceptSwitch.IAttemptType:
        return myConceptIAttemptType;
      case LanguageConceptSwitch.IBigExpression:
        return myConceptIBigExpression;
      case LanguageConceptSwitch.IBlockLike:
        return myConceptIBlockLike;
      case LanguageConceptSwitch.ICanBeLValue:
        return myConceptICanBeLValue;
      case LanguageConceptSwitch.ICollectionType:
        return myConceptICollectionType;
      case LanguageConceptSwitch.IContainmentStackMember:
        return myConceptIContainmentStackMember;
      case LanguageConceptSwitch.IContextAssistantTypeProvider:
        return myConceptIContextAssistantTypeProvider;
      case LanguageConceptSwitch.IContextTypeProvider:
        return myConceptIContextTypeProvider;
      case LanguageConceptSwitch.IContextTypedOp:
        return myConceptIContextTypedOp;
      case LanguageConceptSwitch.IContracted:
        return myConceptIContracted;
      case LanguageConceptSwitch.IControlAdvancedFeatures_old:
        return myConceptIControlAdvancedFeatures_old;
      case LanguageConceptSwitch.IDeclarativelyInterpretable:
        return myConceptIDeclarativelyInterpretable;
      case LanguageConceptSwitch.IDocumentableWordContainer:
        return myConceptIDocumentableWordContainer;
      case LanguageConceptSwitch.IDocumentableWordProvider:
        return myConceptIDocumentableWordProvider;
      case LanguageConceptSwitch.IDotTarget:
        return myConceptIDotTarget;
      case LanguageConceptSwitch.IHasBaseType:
        return myConceptIHasBaseType;
      case LanguageConceptSwitch.IIgnoreTrivialErrorsContext:
        return myConceptIIgnoreTrivialErrorsContext;
      case LanguageConceptSwitch.IIsSingleSymbol:
        return myConceptIIsSingleSymbol;
      case LanguageConceptSwitch.IJoinTypeContext:
        return myConceptIJoinTypeContext;
      case LanguageConceptSwitch.ILiteral:
        return myConceptILiteral;
      case LanguageConceptSwitch.IMainSlot:
        return myConceptIMainSlot;
      case LanguageConceptSwitch.IMayAllowEffect:
        return myConceptIMayAllowEffect;
      case LanguageConceptSwitch.IMayHaveEffect:
        return myConceptIMayHaveEffect;
      case LanguageConceptSwitch.IMayReadMutableState:
        return myConceptIMayReadMutableState;
      case LanguageConceptSwitch.IMultiTraceRoot:
        return myConceptIMultiTraceRoot;
      case LanguageConceptSwitch.INameQualifier:
        return myConceptINameQualifier;
      case LanguageConceptSwitch.INeverAllowDot:
        return myConceptINeverAllowDot;
      case LanguageConceptSwitch.IOptionDerefContext:
        return myConceptIOptionDerefContext;
      case LanguageConceptSwitch.IOptionallyTyped:
        return myConceptIOptionallyTyped;
      case LanguageConceptSwitch.IParameterizedTypeSupportsEquals:
        return myConceptIParameterizedTypeSupportsEquals;
      case LanguageConceptSwitch.IProgramLocationProvider:
        return myConceptIProgramLocationProvider;
      case LanguageConceptSwitch.IProvidePathConstraints:
        return myConceptIProvidePathConstraints;
      case LanguageConceptSwitch.IReducableExpression:
        return myConceptIReducableExpression;
      case LanguageConceptSwitch.IRef:
        return myConceptIRef;
      case LanguageConceptSwitch.IReferenceableType:
        return myConceptIReferenceableType;
      case LanguageConceptSwitch.IRunningInterpreterContext:
        return myConceptIRunningInterpreterContext;
      case LanguageConceptSwitch.ISSConstrainedValue:
        return myConceptISSConstrainedValue;
      case LanguageConceptSwitch.ISSConstrainedValueRef:
        return myConceptISSConstrainedValueRef;
      case LanguageConceptSwitch.ISSDelegatingType:
        return myConceptISSDelegatingType;
      case LanguageConceptSwitch.ISSItValueRef:
        return myConceptISSItValueRef;
      case LanguageConceptSwitch.IScopeFilterer:
        return myConceptIScopeFilterer;
      case LanguageConceptSwitch.ISingleSymbolRef:
        return myConceptISingleSymbolRef;
      case LanguageConceptSwitch.IStructuredSyntax:
        return myConceptIStructuredSyntax;
      case LanguageConceptSwitch.ITargetThatCanDealWithNix:
        return myConceptITargetThatCanDealWithNix;
      case LanguageConceptSwitch.ITraceRoot:
        return myConceptITraceRoot;
      case LanguageConceptSwitch.ITypeFromMultiple:
        return myConceptITypeFromMultiple;
      case LanguageConceptSwitch.ITypeOverridingContext:
        return myConceptITypeOverridingContext;
      case LanguageConceptSwitch.ITypeSupportsDefaultValue:
        return myConceptITypeSupportsDefaultValue;
      case LanguageConceptSwitch.ITypeSupportsProposals:
        return myConceptITypeSupportsProposals;
      case LanguageConceptSwitch.ITypeable:
        return myConceptITypeable;
      case LanguageConceptSwitch.ITyped:
        return myConceptITyped;
      case LanguageConceptSwitch.IValidOtherwiseContainer:
        return myConceptIValidOtherwiseContainer;
      case LanguageConceptSwitch.IVoidContext:
        return myConceptIVoidContext;
      case LanguageConceptSwitch.IWantNewLine:
        return myConceptIWantNewLine;
      case LanguageConceptSwitch.IfElseSection:
        return myConceptIfElseSection;
      case LanguageConceptSwitch.IfExpression:
        return myConceptIfExpression;
      case LanguageConceptSwitch.ImplicitValidityValExpr:
        return myConceptImplicitValidityValExpr;
      case LanguageConceptSwitch.InlineMessage:
        return myConceptInlineMessage;
      case LanguageConceptSwitch.Invariant:
        return myConceptInvariant;
      case LanguageConceptSwitch.IsSomeExpression:
        return myConceptIsSomeExpression;
      case LanguageConceptSwitch.JoinType:
        return myConceptJoinType;
      case LanguageConceptSwitch.LessEqualsExpression:
        return myConceptLessEqualsExpression;
      case LanguageConceptSwitch.LessExpression:
        return myConceptLessExpression;
      case LanguageConceptSwitch.LogicalAndExpression:
        return myConceptLogicalAndExpression;
      case LanguageConceptSwitch.LogicalIffExpression:
        return myConceptLogicalIffExpression;
      case LanguageConceptSwitch.LogicalImpliesExpression:
        return myConceptLogicalImpliesExpression;
      case LanguageConceptSwitch.LogicalNotExpression:
        return myConceptLogicalNotExpression;
      case LanguageConceptSwitch.LogicalOrExpression:
        return myConceptLogicalOrExpression;
      case LanguageConceptSwitch.MakeRefTarget:
        return myConceptMakeRefTarget;
      case LanguageConceptSwitch.MaxExpression:
        return myConceptMaxExpression;
      case LanguageConceptSwitch.MessageValueType:
        return myConceptMessageValueType;
      case LanguageConceptSwitch.MinExpression:
        return myConceptMinExpression;
      case LanguageConceptSwitch.MinusExpression:
        return myConceptMinusExpression;
      case LanguageConceptSwitch.ModExpression:
        return myConceptModExpression;
      case LanguageConceptSwitch.MulExpression:
        return myConceptMulExpression;
      case LanguageConceptSwitch.MulTag:
        return myConceptMulTag;
      case LanguageConceptSwitch.NeverValue:
        return myConceptNeverValue;
      case LanguageConceptSwitch.NonStrictEqualsExpression:
        return myConceptNonStrictEqualsExpression;
      case LanguageConceptSwitch.NoneLiteral:
        return myConceptNoneLiteral;
      case LanguageConceptSwitch.NoneType:
        return myConceptNoneType;
      case LanguageConceptSwitch.NotEqualsExpression:
        return myConceptNotEqualsExpression;
      case LanguageConceptSwitch.OkTarget:
        return myConceptOkTarget;
      case LanguageConceptSwitch.OneOfTarget:
        return myConceptOneOfTarget;
      case LanguageConceptSwitch.OperatorGroup:
        return myConceptOperatorGroup;
      case LanguageConceptSwitch.OperatorTag:
        return myConceptOperatorTag;
      case LanguageConceptSwitch.OptionOrExpression:
        return myConceptOptionOrExpression;
      case LanguageConceptSwitch.OptionType:
        return myConceptOptionType;
      case LanguageConceptSwitch.OrTag:
        return myConceptOrTag;
      case LanguageConceptSwitch.ParensExpression:
        return myConceptParensExpression;
      case LanguageConceptSwitch.PlainConstraint:
        return myConceptPlainConstraint;
      case LanguageConceptSwitch.PlusExpression:
        return myConceptPlusExpression;
      case LanguageConceptSwitch.PlusTag:
        return myConceptPlusTag;
      case LanguageConceptSwitch.Postcondition:
        return myConceptPostcondition;
      case LanguageConceptSwitch.PragmaDisableCaching:
        return myConceptPragmaDisableCaching;
      case LanguageConceptSwitch.PragmaExpression:
        return myConceptPragmaExpression;
      case LanguageConceptSwitch.Precondition:
        return myConceptPrecondition;
      case LanguageConceptSwitch.PrimitiveLiteral:
        return myConceptPrimitiveLiteral;
      case LanguageConceptSwitch.PrimitiveType:
        return myConceptPrimitiveType;
      case LanguageConceptSwitch.ProgramLocationOp:
        return myConceptProgramLocationOp;
      case LanguageConceptSwitch.ProgramLocationType:
        return myConceptProgramLocationType;
      case LanguageConceptSwitch.ProgramLocationUrlOp:
        return myConceptProgramLocationUrlOp;
      case LanguageConceptSwitch.RangeTarget:
        return myConceptRangeTarget;
      case LanguageConceptSwitch.ReductionInspector:
        return myConceptReductionInspector;
      case LanguageConceptSwitch.ReferenceType:
        return myConceptReferenceType;
      case LanguageConceptSwitch.Revealer:
        return myConceptRevealer;
      case LanguageConceptSwitch.RevealerThis:
        return myConceptRevealerThis;
      case LanguageConceptSwitch.SimpleExpressionValueInspector:
        return myConceptSimpleExpressionValueInspector;
      case LanguageConceptSwitch.SomeValExpr:
        return myConceptSomeValExpr;
      case LanguageConceptSwitch.SpecificErrorType:
        return myConceptSpecificErrorType;
      case LanguageConceptSwitch.SuccessExpression:
        return myConceptSuccessExpression;
      case LanguageConceptSwitch.SuccessType:
        return myConceptSuccessType;
      case LanguageConceptSwitch.SuccessValueExpr:
        return myConceptSuccessValueExpr;
      case LanguageConceptSwitch.ThisExpression:
        return myConceptThisExpression;
      case LanguageConceptSwitch.TracerExpression:
        return myConceptTracerExpression;
      case LanguageConceptSwitch.TryErrorClause:
        return myConceptTryErrorClause;
      case LanguageConceptSwitch.TryExpression:
        return myConceptTryExpression;
      case LanguageConceptSwitch.TrySuccessClause:
        return myConceptTrySuccessClause;
      case LanguageConceptSwitch.TupleAccessExpr:
        return myConceptTupleAccessExpr;
      case LanguageConceptSwitch.TupleType:
        return myConceptTupleType;
      case LanguageConceptSwitch.TupleValue:
        return myConceptTupleValue;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.UnaryExpression:
        return myConceptUnaryExpression;
      case LanguageConceptSwitch.UnaryMinusExpression:
        return myConceptUnaryMinusExpression;
      case LanguageConceptSwitch.ValidityType:
        return myConceptValidityType;
      case LanguageConceptSwitch.VoidType:
        return myConceptVoidType;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbstractMinMaxExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AbstractMinMaxExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2152957725070409762");
    b.version(2);
    b.aggregate("values", 0x1de0d7a4e3414023L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(true).origin("2152957725070409763").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAltOption() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AltOption", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x649a3edce7d544d9L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x50ccd0fa593272c9L);
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x3588b64556af2180L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x617d88a37ecb2fa8L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7971844778466793051");
    b.version(2);
    b.aggregate("when", 0x6ea1ae96e110d66eL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7971844778466793070").done();
    b.aggregate("then", 0x6ea1ae96e110d670L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7971844778466793072").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAlternativesExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AlternativesExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d644L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f93b4L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb63e034L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10bcdcc088efeb1aL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x649a3edce7d544d9L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x5bb0bdbbedce7ccbL);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x465448d4061f13d7L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3dabdba733bd8c80L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x50ccd0fa593272c9L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x588e25ed5b40bd76L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7971844778466793028");
    b.version(2);
    b.aggregate("alternatives", 0x6ea1ae96e110d6caL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6ea1ae96e110d65bL).optional(true).ordered(true).multiple(true).origin("7971844778466793162").done();
    b.alias("alt");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAlwaysValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AlwaysValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3eL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ConvenientBooleanValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3dL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8435714728543612222");
    b.version(2);
    b.alias("always");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAndTag() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AndTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680d6a7L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.OperatorTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5338017450510309031");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignmentExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AssignmentExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcfa1bafL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xfbdc2a1c9b969d2L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x954cdf0b62fb3cbL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/195141004745644975");
    b.version(2);
    b.alias(":=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAttemptType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "AttemptType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e777a2efL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c7518fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6481804410366698223");
    b.version(2);
    b.aggregate("successType", 0x10bcdcc088f63193L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("1206081519718117779").done();
    b.aggregate("errorLiterals", 0x10bcdcc088f63195L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L).optional(true).ordered(true).multiple(true).origin("1206081519718117781").done();
    b.alias("attempt");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBangOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "BangOp", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x212b38c1011c3e9cL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.UnaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2390066428848651932");
    b.version(2);
    b.aggregate("optionValue", 0x212b38c1011c3e9dL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(false).origin("2390066428848651933").done();
    b.alias("!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryArithmeticExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "BinaryArithmeticExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156687762");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryComparisonExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "BinaryComparisonExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f93L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156687763");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryEqualityExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "BinaryEqualityExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6d99L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156760985");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x241656660e75685L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156576277");
    b.version(2);
    b.aggregate("left", 0x46ff3b3d86c99c16L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5115872837156576278").done();
    b.aggregate("right", 0x46ff3b3d86c99c18L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5115872837156576280").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "BinaryLogicalExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdbe7L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156723687");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCastExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "CastExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2d8b76405dcec884L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x5bb0bdbbedce7ccbL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x465448d4061f13d7L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabcL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabbL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3281846772293355652");
    b.version(2);
    b.aggregate("expr", 0x2142daea638ddd94L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("2396718651941969300").done();
    b.aggregate("expectedType", 0x2d8b76405dcec889L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("3281846772293355657").done();
    b.alias("cast");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheckTypeConstraintsExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "CheckTypeConstraintsExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500635b4b0bL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8219602584757553931");
    b.version(2);
    b.property("failIfInvalid", 0x5d23e1084df12bb4L).type(PrimitiveTypeId.BOOLEAN).origin("6711455295495809972").done();
    b.aggregate("expr", 0x7211e500635b4b0cL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("8219602584757553932").done();
    b.aggregate("tp", 0x7211e500635b4b0eL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("8219602584757553934").done();
    b.alias("check");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForColonCast() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ColonCast", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x52a5783d23e687ffL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabcL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabbL);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x465448d4061f13d7L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5955298286257997823");
    b.version(2);
    b.aggregate("expr", 0x52a5783d23e68806L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5955298286257997830").done();
    b.aggregate("type", 0x52a5783d23e68809L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("5955298286257997833").done();
    b.alias(":");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstraintAndErrorNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ConstraintAndErrorNode", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x192c2b4e0b24597bL);
    b.class_(false, false, false);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1813872364117842299");
    b.version(2);
    b.associate("expression", 0x192c2b4e0b245996L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).origin("1813872364117842326").done();
    b.associate("source", 0x192c2b4e0b245999L).target(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL).optional(true).origin("1813872364117842329").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContract() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Contract", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e561L);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877811041");
    b.version(2);
    b.aggregate("items", 0xc0aff242212e565L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL).optional(true).ordered(true).multiple(true).origin("867786408877811045").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContractItem() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ContractItem", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL);
    b.class_(false, true, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877811036");
    b.version(2);
    b.property("warning", 0x385d460090bdc1c4L).type(PrimitiveTypeId.BOOLEAN).origin("4061479407200354756").done();
    b.aggregate("expr", 0xc0aff242212e55eL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("867786408877811038").done();
    b.aggregate("err", 0x5ac87922c845c4eaL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(false).origin("6541611649051509994").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConvenientBoolean() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ConvenientBoolean", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3cL);
    b.class_(false, false, false);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8435714728543612220");
    b.version(2);
    b.aggregate("value", 0x7511add9ed6e7a2cL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3dL).optional(false).ordered(true).multiple(false).origin("8435714728544598572").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConvenientBooleanValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ConvenientBooleanValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3dL);
    b.class_(false, true, false);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8435714728543612221");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConvenientValueCond() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ConvenientValueCond", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d7cL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ConvenientBooleanValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3dL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8435714728543612284");
    b.version(2);
    b.aggregate("expr", 0x7511add9ed5f6d7dL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("8435714728543612285").done();
    b.alias("if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeRefTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "DeRefTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cf47a6cL);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7782108600712067692");
    b.version(2);
    b.alias("deref");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDefaultValueExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "DefaultValueExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x60362815255f2e30L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6932772747669876272");
    b.version(2);
    b.aggregate("type", 0x60362815255f2e31L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("6932772747669876273").done();
    b.alias("default");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "DivExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cac63bL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryArithmeticExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156652603");
    b.version(2);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDocWordRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "DocWordRef", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L);
    b.class_(false, false, false);
    b.parent(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9e7aecL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6527211908668938616");
    b.version(2);
    b.associate("node", 0x5a9550a5f5e9597bL).target(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a179034L).optional(false).origin("6527211908668938619").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "DotExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f4249L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.UnaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcf93594L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabcL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/9002563722476995145");
    b.version(2);
    b.aggregate("target", 0x7cef88020a0f424bL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL).optional(false).ordered(true).multiple(false).origin("9002563722476995147").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "EmptyExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1d7438cL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xe900768cf47dcc3L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xfbdc2a1c9b969d2L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7089558164908491660");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "EmptyValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35fb8ae75bfe7cc9L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3889855429450038473");
    b.version(2);
    b.aggregate("type", 0x35fb8ae75bfe7ccaL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("3889855429450038474").done();
    b.alias("empty");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "EqualsExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6dc9L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryEqualityExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6d99L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156761033");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForErrorExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ErrorExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148b5e1f0L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1919538606560895472");
    b.version(2);
    b.aggregate("error", 0x1aa3923148b5e1f1L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L).optional(true).ordered(true).multiple(false).origin("1919538606560895473").done();
    b.alias("error");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForErrorLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ErrorLiteral", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L);
    b.class_(false, false, false);
    b.parent(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a179034L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1919538606559981270");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForErrorTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ErrorTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500636a361dL);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8219602584758531613");
    b.version(2);
    b.alias("err");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExprInContract() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ExprInContract", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff24221414bfL);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877888703");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.class_(false, true, false);
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x617d88a37ecb2fa8L);
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x3588b64556af2180L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7425695345928347719");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFailExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "FailExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b6b0ca1fd5e3baL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/411710798114972602");
    b.version(2);
    b.aggregate("message", 0x5b6b0ca1fd5e3beL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("411710798114972606").done();
    b.aggregate("contextExpression", 0x4a147296d583d621L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(false).origin("5338017450493728289").done();
    b.aggregate("type", 0x64f912ca604267f5L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(true).ordered(true).multiple(false).origin("7275867333401405429").done();
    b.alias("fail");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGenericErrorType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "GenericErrorType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47bcdL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c7518fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1919538606561852365");
    b.version(2);
    b.alias("error");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "GreaterEqualsExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5011L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryComparisonExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f93L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156687889");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "GreaterExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f94L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryComparisonExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f93L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156687764");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHasValueOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "HasValueOp", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35fb8ae75bfd4263L);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x218c4f79a9499b36L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3889855429449957987");
    b.version(2);
    b.alias("hasValue");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIAllowDeletionOfDot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IAllowDeletionOfDot", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45d6f895c8d2a52dL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5032482955836171565");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIAllowDotOnLeft() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IAllowDotOnLeft", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45d6f895c8b83417L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5032482955834438679");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIAllowsDocInChildExpressions() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IAllowsDocInChildExpressions", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35d20fc48d83ecebL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3878179565981658347");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIAssertConstraints() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IAssertConstraints", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10725209af7503e9L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1185099853503726569");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIAttemptType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IAttemptType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c7518fL);
    b.interface_();
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x62ec1b29abde62acL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1919538606562038159");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIBigExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IBigExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f93b4L);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xfbdc2a1c9b969d2L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7849560302565692340");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIBlockLike() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IBlockLike", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x70f55ca872ff038L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/508719611255975992");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForICanBeLValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ICanBeLValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcf93594L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/195141004745586068");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForICollectionType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ICollectionType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5f335af1e96375a1L);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x363cad8849174f6cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6859926652464625057");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIContainmentStackMember() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IContainmentStackMember", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x649a3edce7d544d9L);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7249175668709475545");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIContextAssistantTypeProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IContextAssistantTypeProvider", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x954cdf0b62fb3cbL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/672388678117471179");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIContextTypeProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IContextTypeProvider", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x43d0987d9bc3829cL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/4886573260948603548");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIContextTypedOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IContextTypedOp", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x68c5f3e3753315e3L);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7549708508605912547");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIContracted() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IContracted", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e4a3L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877810851");
    b.version(2);
    b.aggregate("contract", 0xc0aff242212e562L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e561L).optional(true).ordered(true).multiple(false).origin("867786408877811042").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIControlAdvancedFeatures_old() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IControlAdvancedFeatures_old", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x69e8e71b93a1b282L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7631603674206286466");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDeclarativelyInterpretable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IDeclarativelyInterpretable", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x78c2a0e7debf5afL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/543855896735511983");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDocumentableWordContainer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IDocumentableWordContainer", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f62013b8L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6527211908672525240");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDocumentableWordProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IDocumentableWordProvider", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95190L);
    b.interface_();
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x3588b64556af2180L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6527211908668936592");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDotTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IDotTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.interface_();
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/9002563722476995146");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIHasBaseType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IHasBaseType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x363cad8849174f6cL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3908189377504169836");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIIgnoreTrivialErrorsContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IIgnoreTrivialErrorsContext", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x364e1fe0b7f278b5L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3913100176250796213");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIIsSingleSymbol() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IIsSingleSymbol", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1bdab3d006f14c7L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/125444643124876487");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIJoinTypeContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IJoinTypeContext", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x54992997431544ecL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6095949300264944876");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForILiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ILiteral", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cdaf784L);
    b.interface_();
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x3e4402fed00d643fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7782108600710395780");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIMainSlot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IMainSlot", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x241656660e75685L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/162522551948891781");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIMayAllowEffect() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IMayAllowEffect", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/952298261448780116");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIMayHaveEffect() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IMayHaveEffect", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7791618349053901166");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIMayReadMutableState() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IMayReadMutableState", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x35d20fc48dec6791L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3878179565988505489");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIMultiTraceRoot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IMultiTraceRoot", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xf4b54f714ba06c9L);
    b.interface_();
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1102067954003609289");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForINameQualifier() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "INameQualifier", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x488adb107e398e30L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5227231181400542768");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForINeverAllowDot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "INeverAllowDot", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x72b77efdaa227a88L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8266215269008046728");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIOptionDerefContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IOptionDerefContext", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x588e25ed5b40bd76L);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb4700a4aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6381079423399017846");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIOptionallyTyped() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IOptionallyTyped", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ab0b7cL);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x954cdf0b62fb3cbL);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x5bb0bdbbedce7ccbL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7089558164905593724");
    b.version(2);
    b.aggregate("type", 0x62632b96c1ab0b7dL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(true).ordered(true).multiple(false).origin("7089558164905593725").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIParameterizedTypeSupportsEquals() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IParameterizedTypeSupportsEquals", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7c29ed49aa581218L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8946943035394495000");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIProgramLocationProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IProgramLocationProvider", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77aced6f6L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5299123466384889590");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIProvidePathConstraints() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IProvidePathConstraints", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3dabdba733bd8c80L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/4443886968505207936");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIReducableExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IReducableExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb63e034L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8092372783983747124");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IRef", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x66ecc7903939fab1L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7416522108621683377");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIReferenceableType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IReferenceableType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb9a0feL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7782108600708210942");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIRunningInterpreterContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IRunningInterpreterContext", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x45fe014ac8835911L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5043470053404793105");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForISSConstrainedValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ISSConstrainedValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabbL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6571046568849029819");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForISSConstrainedValueRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ISSConstrainedValueRef", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5b310c0a1acbbabcL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6571046568849029820");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForISSDelegatingType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ISSDelegatingType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x626f78ee82fe21a5L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7093020903927062949");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForISSItValueRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ISSItValueRef", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x626f78ee828dc471L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7093020903919699057");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIScopeFilterer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IScopeFilterer", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb4700a4aL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3829047245302401610");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForISingleSymbolRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ISingleSymbolRef", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb470014aL);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1bdab3d006f14c7L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x66ecc7903939fab1L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3829047245302399306");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIStructuredSyntax() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IStructuredSyntax", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7a477bfec265d9b6L);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xfbdc2a1c9b969d2L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8811147530087029174");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITargetThatCanDealWithNix() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITargetThatCanDealWithNix", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x218c4f79a9499b36L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2417394483940924214");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITraceRoot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITraceRoot", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x760b48e4e8448dc2L);
    b.interface_();
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8505972469205863874");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITypeFromMultiple() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITypeFromMultiple", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10bcdcc088efeb1aL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1206081519717706522");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITypeOverridingContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITypeOverridingContext", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x521b6644acb5b47L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/369777186288917319");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITypeSupportsDefaultValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITypeSupportsDefaultValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x60362815255ee08fL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6932772747669856399");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITypeSupportsProposals() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITypeSupportsProposals", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x954cdf0b5f6ee74L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/672388678113750644");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITypeable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITypeable", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4f3180ef560f8ee0L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5706483968284528352");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITyped() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ITyped", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x622163b5c76a6c48L);
    b.interface_();
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4f3180ef560f8ee0L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7071042522334260296");
    b.version(2);
    b.aggregate("type", 0x7a477bfec24be9a9L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(true).ordered(true).multiple(false).origin("8811147530085329321").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIValidOtherwiseContainer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IValidOtherwiseContainer", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x50ccd0fa593272c9L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5822258191940088521");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIVoidContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IVoidContext", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7253306fa30e8eeaL);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8237981399425912554");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIWantNewLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IWantNewLine", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xfbdc2a1c9b969d2L);
    b.interface_();
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1134276681297127890");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfElseSection() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IfElseSection", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL);
    b.class_(false, false, false);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/606861080870797309");
    b.version(2);
    b.aggregate("expr", 0x86c00f011503ffeL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("606861080870797310").done();
    b.alias("else");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IfExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f93b4L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10bcdcc088efeb1aL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x588e25ed5b40bd76L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x760b48e4e8391c1fL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x241656660e75685L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3dabdba733bd8c80L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7849560302565679722");
    b.version(2);
    b.aggregate("condition", 0x6cef3d81a56f626bL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7849560302565679723").done();
    b.aggregate("thenPart", 0x6cef3d81a56f626dL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7849560302565679725").done();
    b.aggregate("elsePart", 0x6cef3d81a56f6270L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(false).origin("7849560302565679728").done();
    b.aggregate("elseSection", 0x86c00f011503ff8L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x86c00f011503ffdL).optional(true).ordered(true).multiple(false).origin("606861080870797304").done();
    b.alias("if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImplicitValidityValExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ImplicitValidityValExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500642440d1L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x626f78ee828dc471L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8219602584770724049");
    b.version(2);
    b.aggregate("type", 0x7211e500645fdabbL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("8219602584774630075").done();
    b.alias("it");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInlineMessage() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "InlineMessage", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77b9aa812L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5299123466398246930");
    b.version(2);
    b.aggregate("text", 0x498a44b77b9aa813L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5299123466398246931").done();
    b.alias("message");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInvariant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Invariant", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5edL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ContractItem", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877811181");
    b.version(2);
    b.alias("inv");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIsSomeExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "IsSomeExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a100207L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xd373e3929e06954L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2807135271608145920");
    b.version(2);
    b.aggregate("expr", 0x26f4f2a81cac5801L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("2807135271608145921").done();
    b.alias("isSome");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForJoinType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "JoinType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7edef95a36fc3555L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/9142018459473556821");
    b.version(2);
    b.aggregate("types", 0x7edef95a36fc3556L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(true).ordered(true).multiple(true).origin("9142018459473556822").done();
    b.alias("join");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LessEqualsExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5013L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryComparisonExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f93L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156687891");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LessExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb5012L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryComparisonExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f93L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156687890");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalAndExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LogicalAndExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdd39L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryLogicalExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdbe7L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156724025");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalIffExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LogicalIffExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x753e449f1c7cd7bcL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryLogicalExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdbe7L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8448265401162061756");
    b.version(2);
    b.alias("<=>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalImpliesExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LogicalImpliesExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x15035178cd135185L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryLogicalExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdbe7L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1514143479005139333");
    b.version(2);
    b.alias("=>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalNotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LogicalNotExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f6aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.UnaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156802410");
    b.version(2);
    b.alias("!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalOrExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "LogicalOrExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdcbbL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryLogicalExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cbdbe7L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156723899");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMakeRefTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MakeRefTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cc7d24bL);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7782108600709141067");
    b.version(2);
    b.alias("ref");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMaxExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MaxExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e342ea99L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.AbstractMinMaxExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2152957725070518937");
    b.version(2);
    b.alias("max");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMessageValueType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MessageValueType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ac768faL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5299123466384402682");
    b.version(2);
    b.alias("message");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MinExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e342ea9aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.AbstractMinMaxExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1de0d7a4e3414022L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2152957725070518938");
    b.version(2);
    b.alias("min");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MinusExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cac5a5L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryArithmeticExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156652453");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ModExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x53e292c5b9d6ff5aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryArithmeticExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6044555027808714586");
    b.version(2);
    b.alias("mod");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMulExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MulExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c9a56fL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryArithmeticExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156578671");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMulTag() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "MulTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x76cdcb8c5573ff6fL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.OperatorTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8560722270290706287");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNeverValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "NeverValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d5dL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ConvenientBooleanValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7511add9ed5f6d3dL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8435714728543612253");
    b.version(2);
    b.alias("never");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNonStrictEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "NonStrictEqualsExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x31dd94e932252d34L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryEqualityExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6d99L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3593191807001111860");
    b.version(2);
    b.alias("===");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoneLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "NoneLiteral", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cae2cf5L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2807135271608265973");
    b.version(2);
    b.aggregate("optionalBaseType", 0x73f429a451eead54L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(true).ordered(true).multiple(false).origin("8355348994405084500").done();
    b.alias("none");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoneType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "NoneType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca934a5L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2807135271607940261");
    b.version(2);
    b.alias("none");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "NotEqualsExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6dcaL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryEqualityExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cc6d99L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156761034");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOkTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OkTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e50063654b25L);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8219602584758209317");
    b.version(2);
    b.alias("ok");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOneOfTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OneOfTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2e85d8007a529cb6L);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x78c2a0e7debf5afL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3352322994211036342");
    b.version(2);
    b.aggregate("values", 0x2e85d8007a529cbfL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(true).origin("3352322994211036351").done();
    b.alias("oneOf");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperatorGroup() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OperatorGroup", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07bL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5338017450510303355");
    b.version(2);
    b.aggregate("expressions", 0x4a147296d680c344L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(true).origin("5338017450510304068").done();
    b.aggregate("tag", 0x4a147296d680c342L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL).optional(false).ordered(true).multiple(false).origin("5338017450510304066").done();
    b.alias("join");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperatorTag() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OperatorTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL);
    b.class_(false, true, false);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5338017450510303356");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOptionOrExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OptionOrExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x3523822eb4da44aaL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/3829047245309363370");
    b.version(2);
    b.alias("?:");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOptionType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OptionType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca93310L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x62ec1b29abde62acL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x60362815255ee08fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2807135271607939856");
    b.version(2);
    b.aggregate("baseType", 0x26f4f2a81ca93311L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("2807135271607939857").done();
    b.alias("opt");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrTag() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "OrTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6f1c76e8c8b0c30dL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.OperatorTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8006404979729416973");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParensExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ParensExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86d2f11fL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837157187871");
    b.version(2);
    b.aggregate("expr", 0x46ff3b3d86d2f172L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5115872837157187954").done();
    b.alias("(");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlainConstraint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PlainConstraint", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff2422571594L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ContractItem", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408882279828");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PlusExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c9a4f2L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.BinaryArithmeticExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cb4f92L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156578546");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusTag() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PlusTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x76cdcb8c55662b4eL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.OperatorTag", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4a147296d680c07cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8560722270289800014");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPostcondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Postcondition", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5ecL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ContractItem", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877811180");
    b.version(2);
    b.alias("post");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPragmaDisableCaching() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PragmaDisableCaching", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4d521af227ea5dd2L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.PragmaExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4d521af227ea4d32L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5571545316364803538");
    b.version(2);
    b.alias("§disable-caching-globally");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPragmaExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PragmaExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x4d521af227ea4d32L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5571545316364799282");
    b.version(2);
    b.aggregate("expr", 0x4d521af227edcfb4L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5571545316365029300").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrecondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Precondition", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55dL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ContractItem", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/867786408877811037");
    b.version(2);
    b.alias("pre");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimitiveLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PrimitiveLiteral", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x744a56d3ba8dc333L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cdaf784L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8379605524044170035");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimitiveType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "PrimitiveType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f8572e33L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7425695345928515123");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProgramLocationOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ProgramLocationOp", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade190cL);
    b.class_(false, true, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5299123466385889548");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProgramLocationType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ProgramLocationType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade142dL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5299123466385888301");
    b.version(2);
    b.alias("loc");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProgramLocationUrlOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ProgramLocationUrlOp", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade44bfL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.ProgramLocationOp", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x498a44b77ade190cL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5299123466385900735");
    b.version(2);
    b.alias("url");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRangeTarget() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "RangeTarget", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1f284427516350b0L);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7cef88020a0f424aL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x78c2a0e7debf5afL);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2245119349904068784");
    b.version(2);
    b.property("upperExcluding", 0xe377da732e95512L).type(PrimitiveTypeId.BOOLEAN).origin("1024425597317240082").done();
    b.property("lowerExcluding", 0xe377da732e95515L).type(PrimitiveTypeId.BOOLEAN).origin("1024425597317240085").done();
    b.aggregate("min", 0x1f284427516350ceL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("2245119349904068814").done();
    b.aggregate("max", 0x1f284427516350cfL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("2245119349904068815").done();
    b.alias("inRange");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReductionInspector() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ReductionInspector", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb65941dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.core.structure.NodeAttribute", 0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8092372783983858717");
    b.version(2);
    b.aggregate("reduced", 0x704de22bfb659422L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("8092372783983858722").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReferenceType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ReferenceType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6bff9a8a7cb8fcfcL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7782108600708168956");
    b.version(2);
    b.aggregate("baseType", 0x6bff9a8a7cb8fcfdL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("7782108600708168957").done();
    b.alias("ref");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRevealer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Revealer", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x447c2333802f6f96L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.core.structure.NodeAttribute", 0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L);
    b.parent(0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x447c2333802b1b10L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/4934857995792117654");
    b.version(2);
    b.aggregate("condition", 0x447c2333802f712eL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(false).origin("4934857995792118062").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRevealerThis() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "RevealerThis", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7dfd4c72d47fa4dcL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/9078496479923905756");
    b.version(2);
    b.alias("revealed");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSimpleExpressionValueInspector() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "SimpleExpressionValueInspector", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x278f63fdaec2d699L);
    b.class_(false, false, false);
    b.super_("com.mbeddr.mpsutil.interpreter.structure.ValueInspector", 0x47f075a6558e4640L, 0xa6067ce0236c8023L, 0x278f63fdaeb2e1d6L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2850607030358693529");
    b.version(2);
    b.property("onlyLast", 0x6283e1a8746a1552L).type(PrimitiveTypeId.BOOLEAN).origin("7098765551289898322").done();
    b.property("showOnTop", 0x6283e1a874774867L).type(PrimitiveTypeId.BOOLEAN).origin("7098765551290763367").done();
    b.property("showOnConsole", 0x1b62689b13405facL).type(PrimitiveTypeId.BOOLEAN).origin("1973254601993904044").done();
    b.property("optionalLabel", 0x1b62689b13c00c98L).type(PrimitiveTypeId.STRING).origin("1973254602002271384").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSomeValExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "SomeValExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xeb308f771ea15b3L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1059200196223309235");
    b.version(2);
    b.associate("someQuery", 0xeb308f771ea15b4L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cac5800L).optional(false).origin("1059200196223309236").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpecificErrorType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "SpecificErrorType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47becL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c7518fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1919538606561852396");
    b.version(2);
    b.aggregate("error", 0x1aa3923148c47bedL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L).optional(false).ordered(true).multiple(false).origin("1919538606561852397").done();
    b.alias("error[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSuccessExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "SuccessExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x52ea52e64e450e9aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5974679004769488538");
    b.version(2);
    b.aggregate("expr", 0x52ea52e64e450ea1L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5974679004769488545").done();
    b.alias("success");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSuccessType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "SuccessType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c47a94L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148c7518fL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1919538606561852052");
    b.version(2);
    b.aggregate("baseType", 0x1aa3923148c47a95L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(false).origin("1919538606561852053").done();
    b.alias("success");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSuccessValueExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "SuccessValueExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1f940d6L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7089558164910719190");
    b.version(2);
    b.associate("try", 0x62632b96c1f940d7L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L).optional(false).origin("7089558164910719191").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThisExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ThisExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x43d0987d9bc38737L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/4886573260948604727");
    b.version(2);
    b.alias("this");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTracerExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TracerExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8092372783984279054");
    b.version(2);
    b.property("traceLabel", 0x704de22bfb6c0408L).type(PrimitiveTypeId.STRING).origin("8092372783984280584").done();
    b.associate("target", 0x704de22bfb6c040aL).target(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL).optional(false).origin("8092372783984280586").done();
    b.aggregate("traced", 0x704de22bfb6bfe0fL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(false).origin("8092372783984279055").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTryErrorClause() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TryErrorClause", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL);
    b.class_(false, false, false);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7089558164909884363");
    b.version(2);
    b.aggregate("expr", 0x62632b96c1ec83eeL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7089558164909884398").done();
    b.aggregate("errorLiteral", 0x62632b96c1fc6083L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x1aa3923148a7eed6L).optional(true).ordered(true).multiple(false).origin("7089558164910923907").done();
    b.alias("error");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e77fb428L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a100207L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x10bcdcc088efeb1aL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x241656660e75685L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7a477bfec265d9b6L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6481804410367226920");
    b.version(2);
    b.property("complete", 0x52ad51a0a003e90eL).type(PrimitiveTypeId.BOOLEAN).origin("5957507632402262286").done();
    b.aggregate("expr", 0x59f3fec4e77fb444L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("6481804410367226948").done();
    b.aggregate("successClause", 0x59f3fec4e785820eL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL).optional(false).ordered(true).multiple(false).origin("6481804410367607310").done();
    b.aggregate("errorClauses", 0x62632b96c1ec86c3L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ec83cbL).optional(true).ordered(true).multiple(true).origin("7089558164909885123").done();
    b.alias("try");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrySuccessClause() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TrySuccessClause", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x59f3fec4e78581bfL);
    b.class_(false, false, false);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/6481804410367607231");
    b.version(2);
    b.aggregate("expr", 0x59f3fec4e78581c0L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("6481804410367607232").done();
    b.alias("=>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTupleAccessExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TupleAccessExpr", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x23141f44f4c5014aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/2527679671886479690");
    b.version(2);
    b.property("index", 0x23141f44f4c675b6L).type(PrimitiveTypeId.INTEGER).origin("2527679671886575030").done();
    b.aggregate("tuple", 0x23141f44f4c50165L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("2527679671886479717").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTupleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TupleType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1019070541450015930");
    b.version(2);
    b.aggregate("elementTypes", 0xe247742183174bbL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L).optional(false).ordered(true).multiple(true).origin("1019070541450015931").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTupleValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "TupleValue", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe2477421831765aL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x2b547b5bcf93594L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/1019070541450016346");
    b.version(2);
    b.aggregate("values", 0xe2477421831765bL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(true).ordered(true).multiple(true).origin("1019070541450016347").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L);
    b.parent(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x617d88a37ecb2fa8L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/7425695345928349204");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "UnaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L);
    b.class_(false, true, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.parent(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6c21639b50c5f96eL);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156802409");
    b.version(2);
    b.aggregate("expr", 0x46ff3b3d86cd0f6bL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("5115872837156802411").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "UnaryMinusExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cdddbbL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.UnaryExpression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86cd0f69L);
    b.parent(0xdb8bd0353f5141d8L, 0x8fed954c202d18beL, 0x4d1099f0f3119e43L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/5115872837156855227");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValidityType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "ValidityType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7211e500635b4b5fL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8219602584757554015");
    b.version(2);
    b.alias("validity");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVoidType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("org.iets3.core.expr.base", "VoidType", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x7253306fa30e8ecdL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Type", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L);
    b.origin("r:66e07cb4-a4b0-4bf3-a36d-5e9ed1ff1bd3(org.iets3.core.expr.base.structure)/8237981399425912525");
    b.version(2);
    b.alias("void");
    return b.create();
  }
}
