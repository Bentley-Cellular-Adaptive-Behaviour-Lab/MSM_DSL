package org.iets3.core.expr.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractMinMaxExpression;
  private ConceptPresentation props_AltOption;
  private ConceptPresentation props_AlternativesExpression;
  private ConceptPresentation props_AlwaysValue;
  private ConceptPresentation props_AndTag;
  private ConceptPresentation props_AssignmentExpr;
  private ConceptPresentation props_AttemptType;
  private ConceptPresentation props_BangOp;
  private ConceptPresentation props_BinaryArithmeticExpression;
  private ConceptPresentation props_BinaryComparisonExpression;
  private ConceptPresentation props_BinaryEqualityExpression;
  private ConceptPresentation props_BinaryExpression;
  private ConceptPresentation props_BinaryLogicalExpression;
  private ConceptPresentation props_CastExpression;
  private ConceptPresentation props_CheckTypeConstraintsExpr;
  private ConceptPresentation props_ColonCast;
  private ConceptPresentation props_ConstraintAndErrorNode;
  private ConceptPresentation props_Contract;
  private ConceptPresentation props_ContractItem;
  private ConceptPresentation props_ConvenientBoolean;
  private ConceptPresentation props_ConvenientBooleanValue;
  private ConceptPresentation props_ConvenientValueCond;
  private ConceptPresentation props_DeRefTarget;
  private ConceptPresentation props_DefaultValueExpression;
  private ConceptPresentation props_DivExpression;
  private ConceptPresentation props_DocWordRef;
  private ConceptPresentation props_DotExpression;
  private ConceptPresentation props_EmptyExpression;
  private ConceptPresentation props_EmptyValue;
  private ConceptPresentation props_EqualsExpression;
  private ConceptPresentation props_ErrorExpression;
  private ConceptPresentation props_ErrorLiteral;
  private ConceptPresentation props_ErrorTarget;
  private ConceptPresentation props_ExprInContract;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_FailExpr;
  private ConceptPresentation props_GenericErrorType;
  private ConceptPresentation props_GreaterEqualsExpression;
  private ConceptPresentation props_GreaterExpression;
  private ConceptPresentation props_HasValueOp;
  private ConceptPresentation props_IAllowDeletionOfDot;
  private ConceptPresentation props_IAllowDotOnLeft;
  private ConceptPresentation props_IAllowsDocInChildExpressions;
  private ConceptPresentation props_IAssertConstraints;
  private ConceptPresentation props_IAttemptType;
  private ConceptPresentation props_IBigExpression;
  private ConceptPresentation props_IBlockLike;
  private ConceptPresentation props_ICanBeLValue;
  private ConceptPresentation props_ICollectionType;
  private ConceptPresentation props_IContainmentStackMember;
  private ConceptPresentation props_IContextAssistantTypeProvider;
  private ConceptPresentation props_IContextTypeProvider;
  private ConceptPresentation props_IContextTypedOp;
  private ConceptPresentation props_IContracted;
  private ConceptPresentation props_IControlAdvancedFeatures_old;
  private ConceptPresentation props_IDeclarativelyInterpretable;
  private ConceptPresentation props_IDocumentableWordContainer;
  private ConceptPresentation props_IDocumentableWordProvider;
  private ConceptPresentation props_IDotTarget;
  private ConceptPresentation props_IHasBaseType;
  private ConceptPresentation props_IIgnoreTrivialErrorsContext;
  private ConceptPresentation props_IIsSingleSymbol;
  private ConceptPresentation props_IJoinTypeContext;
  private ConceptPresentation props_ILiteral;
  private ConceptPresentation props_IMainSlot;
  private ConceptPresentation props_IMayAllowEffect;
  private ConceptPresentation props_IMayHaveEffect;
  private ConceptPresentation props_IMayReadMutableState;
  private ConceptPresentation props_IMultiTraceRoot;
  private ConceptPresentation props_INameQualifier;
  private ConceptPresentation props_INeverAllowDot;
  private ConceptPresentation props_IOptionDerefContext;
  private ConceptPresentation props_IOptionallyTyped;
  private ConceptPresentation props_IParameterizedTypeSupportsEquals;
  private ConceptPresentation props_IProgramLocationProvider;
  private ConceptPresentation props_IProvidePathConstraints;
  private ConceptPresentation props_IReducableExpression;
  private ConceptPresentation props_IRef;
  private ConceptPresentation props_IReferenceableType;
  private ConceptPresentation props_IRunningInterpreterContext;
  private ConceptPresentation props_ISSConstrainedValue;
  private ConceptPresentation props_ISSConstrainedValueRef;
  private ConceptPresentation props_ISSDelegatingType;
  private ConceptPresentation props_ISSItValueRef;
  private ConceptPresentation props_IScopeFilterer;
  private ConceptPresentation props_ISingleSymbolRef;
  private ConceptPresentation props_IStructuredSyntax;
  private ConceptPresentation props_ITargetThatCanDealWithNix;
  private ConceptPresentation props_ITraceRoot;
  private ConceptPresentation props_ITypeFromMultiple;
  private ConceptPresentation props_ITypeOverridingContext;
  private ConceptPresentation props_ITypeSupportsDefaultValue;
  private ConceptPresentation props_ITypeSupportsProposals;
  private ConceptPresentation props_ITypeable;
  private ConceptPresentation props_ITyped;
  private ConceptPresentation props_IValidOtherwiseContainer;
  private ConceptPresentation props_IVoidContext;
  private ConceptPresentation props_IWantNewLine;
  private ConceptPresentation props_IfElseSection;
  private ConceptPresentation props_IfExpression;
  private ConceptPresentation props_ImplicitValidityValExpr;
  private ConceptPresentation props_InlineMessage;
  private ConceptPresentation props_Invariant;
  private ConceptPresentation props_IsSomeExpression;
  private ConceptPresentation props_JoinType;
  private ConceptPresentation props_LessEqualsExpression;
  private ConceptPresentation props_LessExpression;
  private ConceptPresentation props_LogicalAndExpression;
  private ConceptPresentation props_LogicalIffExpression;
  private ConceptPresentation props_LogicalImpliesExpression;
  private ConceptPresentation props_LogicalNotExpression;
  private ConceptPresentation props_LogicalOrExpression;
  private ConceptPresentation props_MakeRefTarget;
  private ConceptPresentation props_MaxExpression;
  private ConceptPresentation props_MessageValueType;
  private ConceptPresentation props_MinExpression;
  private ConceptPresentation props_MinusExpression;
  private ConceptPresentation props_ModExpression;
  private ConceptPresentation props_MulExpression;
  private ConceptPresentation props_MulTag;
  private ConceptPresentation props_NeverValue;
  private ConceptPresentation props_NonStrictEqualsExpression;
  private ConceptPresentation props_NoneLiteral;
  private ConceptPresentation props_NoneType;
  private ConceptPresentation props_NotEqualsExpression;
  private ConceptPresentation props_OkTarget;
  private ConceptPresentation props_OneOfTarget;
  private ConceptPresentation props_OperatorGroup;
  private ConceptPresentation props_OperatorTag;
  private ConceptPresentation props_OptionOrExpression;
  private ConceptPresentation props_OptionType;
  private ConceptPresentation props_OrTag;
  private ConceptPresentation props_ParensExpression;
  private ConceptPresentation props_PlainConstraint;
  private ConceptPresentation props_PlusExpression;
  private ConceptPresentation props_PlusTag;
  private ConceptPresentation props_Postcondition;
  private ConceptPresentation props_PragmaDisableCaching;
  private ConceptPresentation props_PragmaExpression;
  private ConceptPresentation props_Precondition;
  private ConceptPresentation props_PrimitiveLiteral;
  private ConceptPresentation props_PrimitiveType;
  private ConceptPresentation props_ProgramLocationOp;
  private ConceptPresentation props_ProgramLocationType;
  private ConceptPresentation props_ProgramLocationUrlOp;
  private ConceptPresentation props_RangeTarget;
  private ConceptPresentation props_ReductionInspector;
  private ConceptPresentation props_ReferenceType;
  private ConceptPresentation props_Revealer;
  private ConceptPresentation props_RevealerThis;
  private ConceptPresentation props_SimpleExpressionValueInspector;
  private ConceptPresentation props_SomeValExpr;
  private ConceptPresentation props_SpecificErrorType;
  private ConceptPresentation props_SuccessExpression;
  private ConceptPresentation props_SuccessType;
  private ConceptPresentation props_SuccessValueExpr;
  private ConceptPresentation props_ThisExpression;
  private ConceptPresentation props_TracerExpression;
  private ConceptPresentation props_TryErrorClause;
  private ConceptPresentation props_TryExpression;
  private ConceptPresentation props_TrySuccessClause;
  private ConceptPresentation props_TupleAccessExpr;
  private ConceptPresentation props_TupleType;
  private ConceptPresentation props_TupleValue;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_UnaryExpression;
  private ConceptPresentation props_UnaryMinusExpression;
  private ConceptPresentation props_ValidityType;
  private ConceptPresentation props_VoidType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractMinMaxExpression:
        if (props_AbstractMinMaxExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_AbstractMinMaxExpression = cpb.create();
        }
        return props_AbstractMinMaxExpression;
      case LanguageConceptSwitch.AltOption:
        if (props_AltOption == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.presentationByName();
          props_AltOption = cpb.create();
        }
        return props_AltOption;
      case LanguageConceptSwitch.AlternativesExpression:
        if (props_AlternativesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("decide between several alternatives");
          cpb.presentationByName();
          props_AlternativesExpression = cpb.create();
        }
        return props_AlternativesExpression;
      case LanguageConceptSwitch.AlwaysValue:
        if (props_AlwaysValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("always");
          props_AlwaysValue = cpb.create();
        }
        return props_AlwaysValue;
      case LanguageConceptSwitch.AndTag:
        if (props_AndTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&&");
          props_AndTag = cpb.create();
        }
        return props_AndTag;
      case LanguageConceptSwitch.AssignmentExpr:
        if (props_AssignmentExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("assign a value to a variable or ref");
          cpb.rawPresentation(":=");
          props_AssignmentExpr = cpb.create();
        }
        return props_AssignmentExpr;
      case LanguageConceptSwitch.AttemptType:
        if (props_AttemptType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("type that can represent errors");
          cpb.rawPresentation("attempt");
          props_AttemptType = cpb.create();
        }
        return props_AttemptType;
      case LanguageConceptSwitch.BangOp:
        if (props_BangOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x212b38c1011c3e9cL);
          cpb.deprecateAggregation(0x212b38c1011c3e9dL, "optionValue");
          cpb.shortDesc("force away option");
          cpb.rawPresentation("!");
          props_BangOp = cpb.create();
        }
        return props_BangOp;
      case LanguageConceptSwitch.BinaryArithmeticExpression:
        if (props_BinaryArithmeticExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_BinaryArithmeticExpression = cpb.create();
        }
        return props_BinaryArithmeticExpression;
      case LanguageConceptSwitch.BinaryComparisonExpression:
        if (props_BinaryComparisonExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_BinaryComparisonExpression = cpb.create();
        }
        return props_BinaryComparisonExpression;
      case LanguageConceptSwitch.BinaryEqualityExpression:
        if (props_BinaryEqualityExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_BinaryEqualityExpression = cpb.create();
        }
        return props_BinaryEqualityExpression;
      case LanguageConceptSwitch.BinaryExpression:
        if (props_BinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_BinaryExpression = cpb.create();
        }
        return props_BinaryExpression;
      case LanguageConceptSwitch.BinaryLogicalExpression:
        if (props_BinaryLogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_BinaryLogicalExpression = cpb.create();
        }
        return props_BinaryLogicalExpression;
      case LanguageConceptSwitch.CastExpression:
        if (props_CastExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("cast general type to a more specific one");
          cpb.rawPresentation("cast");
          props_CastExpression = cpb.create();
        }
        return props_CastExpression;
      case LanguageConceptSwitch.CheckTypeConstraintsExpr:
        if (props_CheckTypeConstraintsExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("check whether the constraints for a type hold");
          cpb.rawPresentation("check");
          props_CheckTypeConstraintsExpr = cpb.create();
        }
        return props_CheckTypeConstraintsExpr;
      case LanguageConceptSwitch.ColonCast:
        if (props_ColonCast == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("cast a general type to a more specific one (postfix)");
          cpb.rawPresentation(":");
          props_ColonCast = cpb.create();
        }
        return props_ColonCast;
      case LanguageConceptSwitch.ConstraintAndErrorNode:
        if (props_ConstraintAndErrorNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("ConstraintAndErrorNode");
          props_ConstraintAndErrorNode = cpb.create();
        }
        return props_ConstraintAndErrorNode;
      case LanguageConceptSwitch.Contract:
        if (props_Contract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a collections of constraints");
          cpb.rawPresentation("Contract");
          props_Contract = cpb.create();
        }
        return props_Contract;
      case LanguageConceptSwitch.ContractItem:
        if (props_ContractItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a constraint plus an optional error message");
          props_ContractItem = cpb.create();
        }
        return props_ContractItem;
      case LanguageConceptSwitch.ConvenientBoolean:
        if (props_ConvenientBoolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConvenientBoolean");
          props_ConvenientBoolean = cpb.create();
        }
        return props_ConvenientBoolean;
      case LanguageConceptSwitch.ConvenientBooleanValue:
        if (props_ConvenientBooleanValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConvenientBooleanValue = cpb.create();
        }
        return props_ConvenientBooleanValue;
      case LanguageConceptSwitch.ConvenientValueCond:
        if (props_ConvenientValueCond == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_ConvenientValueCond = cpb.create();
        }
        return props_ConvenientValueCond;
      case LanguageConceptSwitch.DeRefTarget:
        if (props_DeRefTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("navigate from a reference to its target");
          cpb.rawPresentation("deref");
          props_DeRefTarget = cpb.create();
        }
        return props_DeRefTarget;
      case LanguageConceptSwitch.DefaultValueExpression:
        if (props_DefaultValueExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("returns the default/neutral value for a type");
          cpb.rawPresentation("default");
          props_DefaultValueExpression = cpb.create();
        }
        return props_DefaultValueExpression;
      case LanguageConceptSwitch.DivExpression:
        if (props_DivExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("numeric division");
          cpb.rawPresentation("/");
          props_DivExpression = cpb.create();
        }
        return props_DivExpression;
      case LanguageConceptSwitch.DocWordRef:
        if (props_DocWordRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.presentationByReference(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x5a9550a5f5e95978L, 0x5a9550a5f5e9597bL, "node", "", "");
          props_DocWordRef = cpb.create();
        }
        return props_DocWordRef;
      case LanguageConceptSwitch.DotExpression:
        if (props_DotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("DotExpression");
          props_DotExpression = cpb.create();
        }
        return props_DotExpression;
      case LanguageConceptSwitch.EmptyExpression:
        if (props_EmptyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("EmptyExpression");
          props_EmptyExpression = cpb.create();
        }
        return props_EmptyExpression;
      case LanguageConceptSwitch.EmptyValue:
        if (props_EmptyValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("empty");
          props_EmptyValue = cpb.create();
        }
        return props_EmptyValue;
      case LanguageConceptSwitch.EqualsExpression:
        if (props_EqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("compare two values for equality");
          cpb.rawPresentation("==");
          props_EqualsExpression = cpb.create();
        }
        return props_EqualsExpression;
      case LanguageConceptSwitch.ErrorExpression:
        if (props_ErrorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create an error value");
          cpb.rawPresentation("error");
          props_ErrorExpression = cpb.create();
        }
        return props_ErrorExpression;
      case LanguageConceptSwitch.ErrorLiteral:
        if (props_ErrorLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.presentationByName();
          props_ErrorLiteral = cpb.create();
        }
        return props_ErrorLiteral;
      case LanguageConceptSwitch.ErrorTarget:
        if (props_ErrorTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the error literal stored in the validity");
          cpb.rawPresentation("err");
          props_ErrorTarget = cpb.create();
        }
        return props_ErrorTarget;
      case LanguageConceptSwitch.ExprInContract:
        if (props_ExprInContract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_ExprInContract = cpb.create();
        }
        return props_ExprInContract;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.FailExpr:
        if (props_FailExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("terminate computation with a fatal failure");
          cpb.rawPresentation("fail");
          props_FailExpr = cpb.create();
        }
        return props_FailExpr;
      case LanguageConceptSwitch.GenericErrorType:
        if (props_GenericErrorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("generic error");
          cpb.rawPresentation("error");
          props_GenericErrorType = cpb.create();
        }
        return props_GenericErrorType;
      case LanguageConceptSwitch.GreaterEqualsExpression:
        if (props_GreaterEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("greater or equals than");
          cpb.rawPresentation(">=");
          props_GreaterEqualsExpression = cpb.create();
        }
        return props_GreaterEqualsExpression;
      case LanguageConceptSwitch.GreaterExpression:
        if (props_GreaterExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("greater than");
          cpb.rawPresentation(">");
          props_GreaterExpression = cpb.create();
        }
        return props_GreaterExpression;
      case LanguageConceptSwitch.HasValueOp:
        if (props_HasValueOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("hasValue");
          props_HasValueOp = cpb.create();
        }
        return props_HasValueOp;
      case LanguageConceptSwitch.IAllowDeletionOfDot:
        if (props_IAllowDeletionOfDot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAllowDeletionOfDot = cpb.create();
        }
        return props_IAllowDeletionOfDot;
      case LanguageConceptSwitch.IAllowDotOnLeft:
        if (props_IAllowDotOnLeft == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAllowDotOnLeft = cpb.create();
        }
        return props_IAllowDotOnLeft;
      case LanguageConceptSwitch.IAllowsDocInChildExpressions:
        if (props_IAllowsDocInChildExpressions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAllowsDocInChildExpressions = cpb.create();
        }
        return props_IAllowsDocInChildExpressions;
      case LanguageConceptSwitch.IAssertConstraints:
        if (props_IAssertConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAssertConstraints = cpb.create();
        }
        return props_IAssertConstraints;
      case LanguageConceptSwitch.IAttemptType:
        if (props_IAttemptType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAttemptType = cpb.create();
        }
        return props_IAttemptType;
      case LanguageConceptSwitch.IBigExpression:
        if (props_IBigExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IBigExpression = cpb.create();
        }
        return props_IBigExpression;
      case LanguageConceptSwitch.IBlockLike:
        if (props_IBlockLike == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IBlockLike = cpb.create();
        }
        return props_IBlockLike;
      case LanguageConceptSwitch.ICanBeLValue:
        if (props_ICanBeLValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICanBeLValue = cpb.create();
        }
        return props_ICanBeLValue;
      case LanguageConceptSwitch.ICollectionType:
        if (props_ICollectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICollectionType = cpb.create();
        }
        return props_ICollectionType;
      case LanguageConceptSwitch.IContainmentStackMember:
        if (props_IContainmentStackMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContainmentStackMember = cpb.create();
        }
        return props_IContainmentStackMember;
      case LanguageConceptSwitch.IContextAssistantTypeProvider:
        if (props_IContextAssistantTypeProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContextAssistantTypeProvider = cpb.create();
        }
        return props_IContextAssistantTypeProvider;
      case LanguageConceptSwitch.IContextTypeProvider:
        if (props_IContextTypeProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContextTypeProvider = cpb.create();
        }
        return props_IContextTypeProvider;
      case LanguageConceptSwitch.IContextTypedOp:
        if (props_IContextTypedOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContextTypedOp = cpb.create();
        }
        return props_IContextTypedOp;
      case LanguageConceptSwitch.IContracted:
        if (props_IContracted == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContracted = cpb.create();
        }
        return props_IContracted;
      case LanguageConceptSwitch.IControlAdvancedFeatures_old:
        if (props_IControlAdvancedFeatures_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          props_IControlAdvancedFeatures_old = cpb.create();
        }
        return props_IControlAdvancedFeatures_old;
      case LanguageConceptSwitch.IDeclarativelyInterpretable:
        if (props_IDeclarativelyInterpretable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDeclarativelyInterpretable = cpb.create();
        }
        return props_IDeclarativelyInterpretable;
      case LanguageConceptSwitch.IDocumentableWordContainer:
        if (props_IDocumentableWordContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDocumentableWordContainer = cpb.create();
        }
        return props_IDocumentableWordContainer;
      case LanguageConceptSwitch.IDocumentableWordProvider:
        if (props_IDocumentableWordProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDocumentableWordProvider = cpb.create();
        }
        return props_IDocumentableWordProvider;
      case LanguageConceptSwitch.IDotTarget:
        if (props_IDotTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDotTarget = cpb.create();
        }
        return props_IDotTarget;
      case LanguageConceptSwitch.IHasBaseType:
        if (props_IHasBaseType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IHasBaseType = cpb.create();
        }
        return props_IHasBaseType;
      case LanguageConceptSwitch.IIgnoreTrivialErrorsContext:
        if (props_IIgnoreTrivialErrorsContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IIgnoreTrivialErrorsContext = cpb.create();
        }
        return props_IIgnoreTrivialErrorsContext;
      case LanguageConceptSwitch.IIsSingleSymbol:
        if (props_IIsSingleSymbol == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IIsSingleSymbol = cpb.create();
        }
        return props_IIsSingleSymbol;
      case LanguageConceptSwitch.IJoinTypeContext:
        if (props_IJoinTypeContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IJoinTypeContext = cpb.create();
        }
        return props_IJoinTypeContext;
      case LanguageConceptSwitch.ILiteral:
        if (props_ILiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ILiteral = cpb.create();
        }
        return props_ILiteral;
      case LanguageConceptSwitch.IMainSlot:
        if (props_IMainSlot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMainSlot = cpb.create();
        }
        return props_IMainSlot;
      case LanguageConceptSwitch.IMayAllowEffect:
        if (props_IMayAllowEffect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMayAllowEffect = cpb.create();
        }
        return props_IMayAllowEffect;
      case LanguageConceptSwitch.IMayHaveEffect:
        if (props_IMayHaveEffect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMayHaveEffect = cpb.create();
        }
        return props_IMayHaveEffect;
      case LanguageConceptSwitch.IMayReadMutableState:
        if (props_IMayReadMutableState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMayReadMutableState = cpb.create();
        }
        return props_IMayReadMutableState;
      case LanguageConceptSwitch.IMultiTraceRoot:
        if (props_IMultiTraceRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMultiTraceRoot = cpb.create();
        }
        return props_IMultiTraceRoot;
      case LanguageConceptSwitch.INameQualifier:
        if (props_INameQualifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_INameQualifier = cpb.create();
        }
        return props_INameQualifier;
      case LanguageConceptSwitch.INeverAllowDot:
        if (props_INeverAllowDot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_INeverAllowDot = cpb.create();
        }
        return props_INeverAllowDot;
      case LanguageConceptSwitch.IOptionDerefContext:
        if (props_IOptionDerefContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IOptionDerefContext = cpb.create();
        }
        return props_IOptionDerefContext;
      case LanguageConceptSwitch.IOptionallyTyped:
        if (props_IOptionallyTyped == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IOptionallyTyped = cpb.create();
        }
        return props_IOptionallyTyped;
      case LanguageConceptSwitch.IParameterizedTypeSupportsEquals:
        if (props_IParameterizedTypeSupportsEquals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IParameterizedTypeSupportsEquals = cpb.create();
        }
        return props_IParameterizedTypeSupportsEquals;
      case LanguageConceptSwitch.IProgramLocationProvider:
        if (props_IProgramLocationProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IProgramLocationProvider = cpb.create();
        }
        return props_IProgramLocationProvider;
      case LanguageConceptSwitch.IProvidePathConstraints:
        if (props_IProvidePathConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IProvidePathConstraints = cpb.create();
        }
        return props_IProvidePathConstraints;
      case LanguageConceptSwitch.IReducableExpression:
        if (props_IReducableExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IReducableExpression = cpb.create();
        }
        return props_IReducableExpression;
      case LanguageConceptSwitch.IRef:
        if (props_IRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRef = cpb.create();
        }
        return props_IRef;
      case LanguageConceptSwitch.IReferenceableType:
        if (props_IReferenceableType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IReferenceableType = cpb.create();
        }
        return props_IReferenceableType;
      case LanguageConceptSwitch.IRunningInterpreterContext:
        if (props_IRunningInterpreterContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRunningInterpreterContext = cpb.create();
        }
        return props_IRunningInterpreterContext;
      case LanguageConceptSwitch.ISSConstrainedValue:
        if (props_ISSConstrainedValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISSConstrainedValue = cpb.create();
        }
        return props_ISSConstrainedValue;
      case LanguageConceptSwitch.ISSConstrainedValueRef:
        if (props_ISSConstrainedValueRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISSConstrainedValueRef = cpb.create();
        }
        return props_ISSConstrainedValueRef;
      case LanguageConceptSwitch.ISSDelegatingType:
        if (props_ISSDelegatingType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISSDelegatingType = cpb.create();
        }
        return props_ISSDelegatingType;
      case LanguageConceptSwitch.ISSItValueRef:
        if (props_ISSItValueRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISSItValueRef = cpb.create();
        }
        return props_ISSItValueRef;
      case LanguageConceptSwitch.IScopeFilterer:
        if (props_IScopeFilterer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IScopeFilterer = cpb.create();
        }
        return props_IScopeFilterer;
      case LanguageConceptSwitch.ISingleSymbolRef:
        if (props_ISingleSymbolRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISingleSymbolRef = cpb.create();
        }
        return props_ISingleSymbolRef;
      case LanguageConceptSwitch.IStructuredSyntax:
        if (props_IStructuredSyntax == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IStructuredSyntax = cpb.create();
        }
        return props_IStructuredSyntax;
      case LanguageConceptSwitch.ITargetThatCanDealWithNix:
        if (props_ITargetThatCanDealWithNix == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITargetThatCanDealWithNix = cpb.create();
        }
        return props_ITargetThatCanDealWithNix;
      case LanguageConceptSwitch.ITraceRoot:
        if (props_ITraceRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITraceRoot = cpb.create();
        }
        return props_ITraceRoot;
      case LanguageConceptSwitch.ITypeFromMultiple:
        if (props_ITypeFromMultiple == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITypeFromMultiple = cpb.create();
        }
        return props_ITypeFromMultiple;
      case LanguageConceptSwitch.ITypeOverridingContext:
        if (props_ITypeOverridingContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITypeOverridingContext = cpb.create();
        }
        return props_ITypeOverridingContext;
      case LanguageConceptSwitch.ITypeSupportsDefaultValue:
        if (props_ITypeSupportsDefaultValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITypeSupportsDefaultValue = cpb.create();
        }
        return props_ITypeSupportsDefaultValue;
      case LanguageConceptSwitch.ITypeSupportsProposals:
        if (props_ITypeSupportsProposals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITypeSupportsProposals = cpb.create();
        }
        return props_ITypeSupportsProposals;
      case LanguageConceptSwitch.ITypeable:
        if (props_ITypeable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITypeable = cpb.create();
        }
        return props_ITypeable;
      case LanguageConceptSwitch.ITyped:
        if (props_ITyped == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITyped = cpb.create();
        }
        return props_ITyped;
      case LanguageConceptSwitch.IValidOtherwiseContainer:
        if (props_IValidOtherwiseContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IValidOtherwiseContainer = cpb.create();
        }
        return props_IValidOtherwiseContainer;
      case LanguageConceptSwitch.IVoidContext:
        if (props_IVoidContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVoidContext = cpb.create();
        }
        return props_IVoidContext;
      case LanguageConceptSwitch.IWantNewLine:
        if (props_IWantNewLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IWantNewLine = cpb.create();
        }
        return props_IWantNewLine;
      case LanguageConceptSwitch.IfElseSection:
        if (props_IfElseSection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("else part of an if expression");
          cpb.rawPresentation("else");
          props_IfElseSection = cpb.create();
        }
        return props_IfElseSection;
      case LanguageConceptSwitch.IfExpression:
        if (props_IfExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x6cef3d81a56f626aL);
          cpb.deprecateAggregation(0x6cef3d81a56f6270L, "elsePart");
          cpb.shortDesc("conditional value (if-then-else)");
          cpb.rawPresentation("if");
          props_IfExpression = cpb.create();
        }
        return props_IfExpression;
      case LanguageConceptSwitch.ImplicitValidityValExpr:
        if (props_ImplicitValidityValExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a value of the particular type");
          cpb.rawPresentation("it");
          props_ImplicitValidityValExpr = cpb.create();
        }
        return props_ImplicitValidityValExpr;
      case LanguageConceptSwitch.InlineMessage:
        if (props_InlineMessage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("message");
          props_InlineMessage = cpb.create();
        }
        return props_InlineMessage;
      case LanguageConceptSwitch.Invariant:
        if (props_Invariant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a constraint that has to be true all the time");
          cpb.rawPresentation("inv");
          props_Invariant = cpb.create();
        }
        return props_Invariant;
      case LanguageConceptSwitch.IsSomeExpression:
        if (props_IsSomeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("check if an option value contains a value (and not none)");
          cpb.presentationByName();
          props_IsSomeExpression = cpb.create();
        }
        return props_IsSomeExpression;
      case LanguageConceptSwitch.JoinType:
        if (props_JoinType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("join");
          props_JoinType = cpb.create();
        }
        return props_JoinType;
      case LanguageConceptSwitch.LessEqualsExpression:
        if (props_LessEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("less or equal than");
          cpb.rawPresentation("<=");
          props_LessEqualsExpression = cpb.create();
        }
        return props_LessEqualsExpression;
      case LanguageConceptSwitch.LessExpression:
        if (props_LessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("less than");
          cpb.rawPresentation("<");
          props_LessExpression = cpb.create();
        }
        return props_LessExpression;
      case LanguageConceptSwitch.LogicalAndExpression:
        if (props_LogicalAndExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("logical conjunction of two values");
          cpb.rawPresentation("&&");
          props_LogicalAndExpression = cpb.create();
        }
        return props_LogicalAndExpression;
      case LanguageConceptSwitch.LogicalIffExpression:
        if (props_LogicalIffExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("if and only if");
          cpb.rawPresentation("<=>");
          props_LogicalIffExpression = cpb.create();
        }
        return props_LogicalIffExpression;
      case LanguageConceptSwitch.LogicalImpliesExpression:
        if (props_LogicalImpliesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("implies");
          cpb.rawPresentation("=>");
          props_LogicalImpliesExpression = cpb.create();
        }
        return props_LogicalImpliesExpression;
      case LanguageConceptSwitch.LogicalNotExpression:
        if (props_LogicalNotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("logical negation");
          cpb.rawPresentation("!");
          props_LogicalNotExpression = cpb.create();
        }
        return props_LogicalNotExpression;
      case LanguageConceptSwitch.LogicalOrExpression:
        if (props_LogicalOrExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("logical or");
          cpb.rawPresentation("||");
          props_LogicalOrExpression = cpb.create();
        }
        return props_LogicalOrExpression;
      case LanguageConceptSwitch.MakeRefTarget:
        if (props_MakeRefTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create a reference to the entity");
          cpb.rawPresentation("ref");
          props_MakeRefTarget = cpb.create();
        }
        return props_MakeRefTarget;
      case LanguageConceptSwitch.MaxExpression:
        if (props_MaxExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the biggest of a set of values");
          cpb.rawPresentation("max");
          props_MaxExpression = cpb.create();
        }
        return props_MaxExpression;
      case LanguageConceptSwitch.MessageValueType:
        if (props_MessageValueType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("message");
          props_MessageValueType = cpb.create();
        }
        return props_MessageValueType;
      case LanguageConceptSwitch.MinExpression:
        if (props_MinExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the smallest of a set of values");
          cpb.rawPresentation("min");
          props_MinExpression = cpb.create();
        }
        return props_MinExpression;
      case LanguageConceptSwitch.MinusExpression:
        if (props_MinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("numeric minus");
          cpb.rawPresentation("-");
          props_MinusExpression = cpb.create();
        }
        return props_MinusExpression;
      case LanguageConceptSwitch.ModExpression:
        if (props_ModExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("numeric modulus");
          cpb.rawPresentation("mod");
          props_ModExpression = cpb.create();
        }
        return props_ModExpression;
      case LanguageConceptSwitch.MulExpression:
        if (props_MulExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("numeric multiplication");
          cpb.rawPresentation("*");
          props_MulExpression = cpb.create();
        }
        return props_MulExpression;
      case LanguageConceptSwitch.MulTag:
        if (props_MulTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*");
          props_MulTag = cpb.create();
        }
        return props_MulTag;
      case LanguageConceptSwitch.NeverValue:
        if (props_NeverValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("never");
          props_NeverValue = cpb.create();
        }
        return props_NeverValue;
      case LanguageConceptSwitch.NonStrictEqualsExpression:
        if (props_NonStrictEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("non-strict equals (intended for semantic modelling only)");
          cpb.rawPresentation("===");
          props_NonStrictEqualsExpression = cpb.create();
        }
        return props_NonStrictEqualsExpression;
      case LanguageConceptSwitch.NoneLiteral:
        if (props_NoneLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("nothing (in the context of options)");
          cpb.rawPresentation("none");
          props_NoneLiteral = cpb.create();
        }
        return props_NoneLiteral;
      case LanguageConceptSwitch.NoneType:
        if (props_NoneType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the type representing nothing (in the context of options)");
          cpb.rawPresentation("none");
          props_NoneType = cpb.create();
        }
        return props_NoneType;
      case LanguageConceptSwitch.NotEqualsExpression:
        if (props_NotEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("not equals");
          cpb.rawPresentation("!=");
          props_NotEqualsExpression = cpb.create();
        }
        return props_NotEqualsExpression;
      case LanguageConceptSwitch.OkTarget:
        if (props_OkTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("is the validity value valid");
          cpb.rawPresentation("ok");
          props_OkTarget = cpb.create();
        }
        return props_OkTarget;
      case LanguageConceptSwitch.OneOfTarget:
        if (props_OneOfTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("test for membership in a set of values");
          cpb.rawPresentation("oneOf");
          props_OneOfTarget = cpb.create();
        }
        return props_OneOfTarget;
      case LanguageConceptSwitch.OperatorGroup:
        if (props_OperatorGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("join");
          props_OperatorGroup = cpb.create();
        }
        return props_OperatorGroup;
      case LanguageConceptSwitch.OperatorTag:
        if (props_OperatorTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_OperatorTag = cpb.create();
        }
        return props_OperatorTag;
      case LanguageConceptSwitch.OptionOrExpression:
        if (props_OptionOrExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("returns the optioned value, or an alternative");
          cpb.rawPresentation("?:");
          props_OptionOrExpression = cpb.create();
        }
        return props_OptionOrExpression;
      case LanguageConceptSwitch.OptionType:
        if (props_OptionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("optional type (something or none)");
          cpb.rawPresentation("opt");
          props_OptionType = cpb.create();
        }
        return props_OptionType;
      case LanguageConceptSwitch.OrTag:
        if (props_OrTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("||");
          props_OrTag = cpb.create();
        }
        return props_OrTag;
      case LanguageConceptSwitch.ParensExpression:
        if (props_ParensExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("parentheses");
          cpb.rawPresentation("(");
          props_ParensExpression = cpb.create();
        }
        return props_ParensExpression;
      case LanguageConceptSwitch.PlainConstraint:
        if (props_PlainConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a plain constraint");
          cpb.rawPresentation("PlainConstraint");
          props_PlainConstraint = cpb.create();
        }
        return props_PlainConstraint;
      case LanguageConceptSwitch.PlusExpression:
        if (props_PlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("numeric plus");
          cpb.rawPresentation("+");
          props_PlusExpression = cpb.create();
        }
        return props_PlusExpression;
      case LanguageConceptSwitch.PlusTag:
        if (props_PlusTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_PlusTag = cpb.create();
        }
        return props_PlusTag;
      case LanguageConceptSwitch.Postcondition:
        if (props_Postcondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("postcondition (guaranteed after execution)");
          cpb.rawPresentation("post");
          props_Postcondition = cpb.create();
        }
        return props_Postcondition;
      case LanguageConceptSwitch.PragmaDisableCaching:
        if (props_PragmaDisableCaching == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("disables interpreter caching (used in testing)");
          cpb.rawPresentation("§disable-caching-globally");
          props_PragmaDisableCaching = cpb.create();
        }
        return props_PragmaDisableCaching;
      case LanguageConceptSwitch.PragmaExpression:
        if (props_PragmaExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_PragmaExpression = cpb.create();
        }
        return props_PragmaExpression;
      case LanguageConceptSwitch.Precondition:
        if (props_Precondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("assumed to hold before execution");
          cpb.rawPresentation("pre");
          props_Precondition = cpb.create();
        }
        return props_Precondition;
      case LanguageConceptSwitch.PrimitiveLiteral:
        if (props_PrimitiveLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_PrimitiveLiteral = cpb.create();
        }
        return props_PrimitiveLiteral;
      case LanguageConceptSwitch.PrimitiveType:
        if (props_PrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_PrimitiveType = cpb.create();
        }
        return props_PrimitiveType;
      case LanguageConceptSwitch.ProgramLocationOp:
        if (props_ProgramLocationOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ProgramLocationOp = cpb.create();
        }
        return props_ProgramLocationOp;
      case LanguageConceptSwitch.ProgramLocationType:
        if (props_ProgramLocationType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("loc");
          props_ProgramLocationType = cpb.create();
        }
        return props_ProgramLocationType;
      case LanguageConceptSwitch.ProgramLocationUrlOp:
        if (props_ProgramLocationUrlOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("url");
          props_ProgramLocationUrlOp = cpb.create();
        }
        return props_ProgramLocationUrlOp;
      case LanguageConceptSwitch.RangeTarget:
        if (props_RangeTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("checks for within range");
          cpb.rawPresentation("inRange");
          props_RangeTarget = cpb.create();
        }
        return props_RangeTarget;
      case LanguageConceptSwitch.ReductionInspector:
        if (props_ReductionInspector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("ReductionInspector");
          props_ReductionInspector = cpb.create();
        }
        return props_ReductionInspector;
      case LanguageConceptSwitch.ReferenceType:
        if (props_ReferenceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("representes references");
          cpb.rawPresentation("ref");
          props_ReferenceType = cpb.create();
        }
        return props_ReferenceType;
      case LanguageConceptSwitch.Revealer:
        if (props_Revealer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("Revealer");
          props_Revealer = cpb.create();
        }
        return props_Revealer;
      case LanguageConceptSwitch.RevealerThis:
        if (props_RevealerThis == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("revealed");
          props_RevealerThis = cpb.create();
        }
        return props_RevealerThis;
      case LanguageConceptSwitch.SimpleExpressionValueInspector:
        if (props_SimpleExpressionValueInspector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("SimpleExpressionValueInspector");
          props_SimpleExpressionValueInspector = cpb.create();
        }
        return props_SimpleExpressionValueInspector;
      case LanguageConceptSwitch.SomeValExpr:
        if (props_SomeValExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the value inside the option");
          cpb.presentationByReference(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xeb308f771ea15b3L, 0xeb308f771ea15b4L, "someQuery", "", "");
          props_SomeValExpr = cpb.create();
        }
        return props_SomeValExpr;
      case LanguageConceptSwitch.SpecificErrorType:
        if (props_SpecificErrorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a particular error literal");
          cpb.rawPresentation("error[");
          props_SpecificErrorType = cpb.create();
        }
        return props_SpecificErrorType;
      case LanguageConceptSwitch.SuccessExpression:
        if (props_SuccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("success; no error");
          cpb.rawPresentation("success");
          props_SuccessExpression = cpb.create();
        }
        return props_SuccessExpression;
      case LanguageConceptSwitch.SuccessType:
        if (props_SuccessType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("successful case in an attempt");
          cpb.rawPresentation("success");
          props_SuccessType = cpb.create();
        }
        return props_SuccessType;
      case LanguageConceptSwitch.SuccessValueExpr:
        if (props_SuccessValueExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the actual return value (inside an attempt type)");
          cpb.presentationByReference(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1f940d6L, 0x62632b96c1f940d7L, "try", "", "");
          props_SuccessValueExpr = cpb.create();
        }
        return props_SuccessValueExpr;
      case LanguageConceptSwitch.ThisExpression:
        if (props_ThisExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the current context");
          cpb.rawPresentation("this");
          props_ThisExpression = cpb.create();
        }
        return props_ThisExpression;
      case LanguageConceptSwitch.TracerExpression:
        if (props_TracerExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.presentationByReference(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL, 0x704de22bfb6c040aL, "target", "", "");
          props_TracerExpression = cpb.create();
        }
        return props_TracerExpression;
      case LanguageConceptSwitch.TryErrorClause:
        if (props_TryErrorClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("handle errors in an attempt type");
          cpb.rawPresentation("error");
          props_TryErrorClause = cpb.create();
        }
        return props_TryErrorClause;
      case LanguageConceptSwitch.TryExpression:
        if (props_TryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("try to evaluate expression and handle potential errors");
          cpb.presentationByName();
          props_TryExpression = cpb.create();
        }
        return props_TryExpression;
      case LanguageConceptSwitch.TrySuccessClause:
        if (props_TrySuccessClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("handle the succcessful case in a try");
          cpb.rawPresentation("=>");
          props_TrySuccessClause = cpb.create();
        }
        return props_TrySuccessClause;
      case LanguageConceptSwitch.TupleAccessExpr:
        if (props_TupleAccessExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          cpb.rawPresentation("TupleAccessExpr");
          props_TupleAccessExpr = cpb.create();
        }
        return props_TupleAccessExpr;
      case LanguageConceptSwitch.TupleType:
        if (props_TupleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("n-ary tuple");
          cpb.rawPresentation("[");
          props_TupleType = cpb.create();
        }
        return props_TupleType;
      case LanguageConceptSwitch.TupleValue:
        if (props_TupleValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("n-ary tuple value");
          cpb.rawPresentation("[");
          props_TupleValue = cpb.create();
        }
        return props_TupleValue;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.UnaryExpression:
        if (props_UnaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("--");
          props_UnaryExpression = cpb.create();
        }
        return props_UnaryExpression;
      case LanguageConceptSwitch.UnaryMinusExpression:
        if (props_UnaryMinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("numeric negation");
          cpb.rawPresentation("-");
          props_UnaryMinusExpression = cpb.create();
        }
        return props_UnaryMinusExpression;
      case LanguageConceptSwitch.ValidityType:
        if (props_ValidityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("composite type for checking validities");
          cpb.rawPresentation("validity");
          props_ValidityType = cpb.create();
        }
        return props_ValidityType;
      case LanguageConceptSwitch.VoidType:
        if (props_VoidType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("no return value");
          cpb.rawPresentation("void");
          props_VoidType = cpb.create();
        }
        return props_VoidType;
    }
    return null;
  }
}
