package org.iets3.core.expr.base.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.typesystem.inference.SubtypingManager;
import jetbrains.mps.typesystem.inference.TypeChecker;
import org.iets3.core.expr.base.runtime.runtime.PTF;

public abstract class PrimitiveTypeMapper {

  public abstract int getPriorityLevel();
  public abstract SNode createBooleanType();
  public abstract SNode createIntegerType(String value);
  public abstract SNode createGenericIntegerType();
  public abstract SNode createIntegerType(String min, String max);
  public abstract SNode createRealType(String value);
  public abstract SNode createStringType();
  public abstract SNode createNumberLiteral(String value);
  public abstract boolean isOtherwiseLiteral(SNode expr);
  public abstract boolean isTrueLiteral(SNode expr);
  public abstract boolean isFalseLiteral(SNode expr);
  public abstract SNode createFalseLiteral();
  public abstract SNode createTrueLiteral();
  public abstract SNode computerSupertype(List<SNode> types, boolean goToInfinity, SubtypingManager mgr);

  public abstract SNode widenToInfinityIfNumber(SNode type);
  public abstract SNode setInfinitePrecisionIfNotInteger(SNode type);

  public abstract SNode reverseValue(SNode expectedType, Object javaValue);

  public boolean isRealType(SNode type) {
    return TypeChecker.getInstance().getSubtypingManager().isSubtype(type, PTF.createRealType(null));
  }

  public boolean useCommaInsteadOfDotForDecimals() {
    return false;
  }

}
