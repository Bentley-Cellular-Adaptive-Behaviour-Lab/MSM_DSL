package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class IContracted__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e4a3L, "org.iets3.core.expr.base.structure.IContracted");

  public static final SMethod<Boolean> canHaveInvariant_idKaZMgy4IiZ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canHaveInvariant").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgy4IiZ").build();
  public static final SMethod<Boolean> canHavePrecondition_idKaZMgy4IjP = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canHavePrecondition").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgy4IjP").build();
  public static final SMethod<Boolean> canHavePostcondition_idKaZMgy4Iky = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canHavePostcondition").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgy4Iky").build();
  public static final SMethod<Boolean> canHavePlainConstraint_idKaZMgylLn7 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canHavePlainConstraint").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgylLn7").build();
  public static final SMethod<Iterable<SNode>> allContractItems_idKaZMgyh03Y = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("allContractItems").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgyh03Y").build();
  public static final SMethod<Iterable<SNode>> invariants_idKaZMgygZub = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("invariants").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgygZub").build();
  public static final SMethod<Iterable<SNode>> preconditions_idKaZMgyh1or = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("preconditions").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgyh1or").build();
  public static final SMethod<Iterable<SNode>> postconditions_idKaZMgyh1v9 = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("postconditions").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgyh1v9").build();
  public static final SMethod<Iterable<SNode>> plainConstraints_idKaZMgylLvI = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("plainConstraints").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("KaZMgylLvI").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(canHaveInvariant_idKaZMgy4IiZ, canHavePrecondition_idKaZMgy4IjP, canHavePostcondition_idKaZMgy4Iky, canHavePlainConstraint_idKaZMgylLn7, allContractItems_idKaZMgyh03Y, invariants_idKaZMgygZub, preconditions_idKaZMgyh1or, postconditions_idKaZMgyh1v9, plainConstraints_idKaZMgylLvI);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean canHaveInvariant_idKaZMgy4IiZ(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static boolean canHavePrecondition_idKaZMgy4IjP(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static boolean canHavePostcondition_idKaZMgy4Iky(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static boolean canHavePlainConstraint_idKaZMgylLn7(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static Iterable<SNode> allContractItems_idKaZMgyh03Y(@NotNull SNode __thisNode__) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.contract$U1k2), LINKS.items$WD4d);
  }
  /*package*/ static Iterable<SNode> invariants_idKaZMgygZub(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(IContracted__BehaviorDescriptor.allContractItems_idKaZMgyh03Y.invoke(__thisNode__), CONCEPTS.Invariant$I1);
  }
  /*package*/ static Iterable<SNode> preconditions_idKaZMgyh1or(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(IContracted__BehaviorDescriptor.allContractItems_idKaZMgyh03Y.invoke(__thisNode__), CONCEPTS.Precondition$kn);
  }
  /*package*/ static Iterable<SNode> postconditions_idKaZMgyh1v9(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(IContracted__BehaviorDescriptor.allContractItems_idKaZMgyh03Y.invoke(__thisNode__), CONCEPTS.Postcondition$Hy);
  }
  /*package*/ static Iterable<SNode> plainConstraints_idKaZMgylLvI(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(IContracted__BehaviorDescriptor.allContractItems_idKaZMgyh03Y.invoke(__thisNode__), CONCEPTS.PlainConstraint$Xf);
  }

  /*package*/ IContracted__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) canHaveInvariant_idKaZMgy4IiZ(node));
      case 1:
        return (T) ((Boolean) canHavePrecondition_idKaZMgy4IjP(node));
      case 2:
        return (T) ((Boolean) canHavePostcondition_idKaZMgy4Iky(node));
      case 3:
        return (T) ((Boolean) canHavePlainConstraint_idKaZMgylLn7(node));
      case 4:
        return (T) ((Iterable<SNode>) allContractItems_idKaZMgyh03Y(node));
      case 5:
        return (T) ((Iterable<SNode>) invariants_idKaZMgygZub(node));
      case 6:
        return (T) ((Iterable<SNode>) preconditions_idKaZMgyh1or(node));
      case 7:
        return (T) ((Iterable<SNode>) postconditions_idKaZMgyh1v9(node));
      case 8:
        return (T) ((Iterable<SNode>) plainConstraints_idKaZMgylLvI(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink contract$U1k2 = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e4a3L, 0xc0aff242212e562L, "contract");
    /*package*/ static final SContainmentLink items$WD4d = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e561L, 0xc0aff242212e565L, "items");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Invariant$I1 = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5edL, "org.iets3.core.expr.base.structure.Invariant");
    /*package*/ static final SConcept Precondition$kn = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e55dL, "org.iets3.core.expr.base.structure.Precondition");
    /*package*/ static final SConcept Postcondition$Hy = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff242212e5ecL, "org.iets3.core.expr.base.structure.Postcondition");
    /*package*/ static final SConcept PlainConstraint$Xf = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xc0aff2422571594L, "org.iets3.core.expr.base.structure.PlainConstraint");
  }
}
