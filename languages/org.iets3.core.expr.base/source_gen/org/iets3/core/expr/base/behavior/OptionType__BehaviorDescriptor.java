package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class OptionType__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca93310L, "org.iets3.core.expr.base.structure.OptionType");

  public static final SMethod<Boolean> guaranteedToBeSome_id7jlPi2BQ7aR = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("guaranteedToBeSome").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7jlPi2BQ7aR").build();
  public static final SMethod<String> getPresentation_idhEwIMiw = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPresentation").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hEwIMiw").build();
  public static final SMethod<SNode> wrappedType_id6bG6MAFRDvi = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("wrappedType").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6bG6MAFRDvi").build();
  public static final SMethod<SNode> reWrap_id6bG6MAG4Mv3 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("reWrap").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6bG6MAG4Mv3").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> isSameAs_idfIXgjlt4VE = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isSameAs").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("fIXgjlt4VE").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> createDefaultVarExpr_id60Qa1k_nI2O = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("createDefaultVarExpr").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("60Qa1k_nI2O").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(guaranteedToBeSome_id7jlPi2BQ7aR, getPresentation_idhEwIMiw, wrappedType_id6bG6MAFRDvi, reWrap_id6bG6MAG4Mv3, isSameAs_idfIXgjlt4VE, createDefaultVarExpr_id60Qa1k_nI2O);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean guaranteedToBeSome_id7jlPi2BQ7aR(@NotNull SNode __thisNode__) {
    return true;
  }
  /*package*/ static String getPresentation_idhEwIMiw(@NotNull SNode __thisNode__) {
    return "opt<" + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.baseType$Cv_a)) + ">";
  }
  /*package*/ static SNode wrappedType_id6bG6MAFRDvi(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.baseType$Cv_a);
  }
  /*package*/ static SNode reWrap_id6bG6MAG4Mv3(@NotNull SNode __thisNode__, SNode newBaseType, SNode originalWrapper) {
    return createOptionType_cm5g9t_a0a3(SNodeOperations.cast(newBaseType, CONCEPTS.Type$WK));
  }
  /*package*/ static boolean isSameAs_idfIXgjlt4VE(@NotNull SNode __thisNode__, SNode other) {
    if (other == null) {
      return false;
    }
    if (!((SNodeOperations.isInstanceOf(other, CONCEPTS.OptionType$eU)))) {
      return false;
    }
    SNode casted = SNodeOperations.cast(other, CONCEPTS.OptionType$eU);
    return (boolean) Type__BehaviorDescriptor.isSameAs_idfIXgjlt4VE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.baseType$Cv_a), SLinkOperations.getTarget(casted, LINKS.baseType$Cv_a));
  }
  /*package*/ static SNode createDefaultVarExpr_id60Qa1k_nI2O(@NotNull SNode __thisNode__) {
    return createNoneLiteral_cm5g9t_a0a5();
  }

  /*package*/ OptionType__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) guaranteedToBeSome_id7jlPi2BQ7aR(node));
      case 1:
        return (T) ((String) getPresentation_idhEwIMiw(node));
      case 2:
        return (T) ((SNode) wrappedType_id6bG6MAFRDvi(node));
      case 3:
        return (T) ((SNode) reWrap_id6bG6MAG4Mv3(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 4:
        return (T) ((Boolean) isSameAs_idfIXgjlt4VE(node, (SNode) parameters[0]));
      case 5:
        return (T) ((SNode) createDefaultVarExpr_id60Qa1k_nI2O(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createOptionType_cm5g9t_a0a3(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.OptionType$eU);
    n0.forChild(LINKS.baseType$Cv_a).initNode(p0, CONCEPTS.Type$WK, true);
    return n0.getResult();
  }
  private static SNode createNoneLiteral_cm5g9t_a0a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.NoneLiteral$$J);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink baseType$Cv_a = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca93310L, 0x26f4f2a81ca93311L, "baseType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
    /*package*/ static final SConcept OptionType$eU = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81ca93310L, "org.iets3.core.expr.base.structure.OptionType");
    /*package*/ static final SConcept NoneLiteral$$J = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x26f4f2a81cae2cf5L, "org.iets3.core.expr.base.structure.NoneLiteral");
  }
}
