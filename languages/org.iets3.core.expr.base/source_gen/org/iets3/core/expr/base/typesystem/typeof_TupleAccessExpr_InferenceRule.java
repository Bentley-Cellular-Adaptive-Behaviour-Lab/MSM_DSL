package org.iets3.core.expr.base.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class typeof_TupleAccessExpr_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_TupleAccessExpr_InferenceRule() {
  }
  public void applyRule(final SNode tae, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode tt = typeCheckingContext.typeOf(SLinkOperations.getTarget(tae, LINKS.tuple$Aujp), "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2527679671886730886", true);
      typeCheckingContext.whenConcrete(tt, new Runnable() {
        public void run() {
          {
            SNode _nodeToCheck_1029348928467 = tae;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2527679671886715712", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2527679671886715537", true), (SNode) ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(typeCheckingContext.getExpandedNode(tt), CONCEPTS.TupleType$8E), LINKS.elementTypes$gWta)).getElement(SPropertyOperations.getInteger(tae, PROPS.index$ht$G)), _info_12389875345);
          }
        }
      }, "r:80cf2246-750c-4158-9056-a619ebcf894c(org.iets3.core.expr.base.typesystem)", "2527679671886730815", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.TupleAccessExpr$UY;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink tuple$Aujp = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x23141f44f4c5014aL, 0x23141f44f4c50165L, "tuple");
    /*package*/ static final SContainmentLink elementTypes$gWta = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, 0xe247742183174bbL, "elementTypes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TupleType$8E = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xe247742183174baL, "org.iets3.core.expr.base.structure.TupleType");
    /*package*/ static final SConcept TupleAccessExpr$UY = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x23141f44f4c5014aL, "org.iets3.core.expr.base.structure.TupleAccessExpr");
  }

  private static final class PROPS {
    /*package*/ static final SProperty index$ht$G = MetaAdapterFactory.getProperty(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x23141f44f4c5014aL, 0x23141f44f4c675b6L, "index");
  }
}
