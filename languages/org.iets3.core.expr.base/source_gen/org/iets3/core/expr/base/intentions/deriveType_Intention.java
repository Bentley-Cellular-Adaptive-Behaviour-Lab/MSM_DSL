package org.iets3.core.expr.base.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import org.iets3.core.expr.base.behavior.IOptionallyTyped__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.iets3.core.expr.base.behavior.Type__BehaviorDescriptor;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class deriveType_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public deriveType_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:7d06857c-251f-4454-ac9c-c398e5200a04(org.iets3.core.expr.base.intentions)", "7089558164905595697"));
  }
  @Override
  public String getPresentation() {
    return "deriveType";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return !(ListSequence.fromList(SNodeOperations.getNodeDescendants(TypecheckingFacade.getFromContext().getTypeOf(IOptionallyTyped__BehaviorDescriptor.getNodeFromWhichToDeriveType_id5aHkq2w4m8L.invoke(node)), CONCEPTS.Type$WK, true, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) Type__BehaviorDescriptor.isSynthesized_id7_$HJtBs0P$.invoke(it);
      }
    }));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "TYPES: " + ("(Re-)Derive Type");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode tt = SNodeOperations.cast(SNodeOperations.copyNode(TypecheckingFacade.getFromContext().getTypeOf(IOptionallyTyped__BehaviorDescriptor.getNodeFromWhichToDeriveType_id5aHkq2w4m8L.invoke(node))), CONCEPTS.Type$WK);
      Type__BehaviorDescriptor.simplify_id46cplYwxszL.invoke(tt);
      SLinkOperations.setTarget(node, LINKS.type$1eya, tt);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return deriveType_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$WK = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a614L, "org.iets3.core.expr.base.structure.Type");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$1eya = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x62632b96c1ab0b7cL, 0x62632b96c1ab0b7dL, "type");
  }
}
