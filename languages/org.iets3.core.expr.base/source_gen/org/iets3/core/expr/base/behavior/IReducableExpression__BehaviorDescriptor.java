package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class IReducableExpression__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb63e034L, "org.iets3.core.expr.base.structure.IReducableExpression");

  public static final SMethod<SNode> createReducedExpression_id71dSyJVoY1g = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("createReducedExpression").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("71dSyJVoY1g").build();
  public static final SMethod<SNode> trace_id71dSyJVs3bA = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("trace").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("71dSyJVs3bA").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<SNode> traceAndCopy_id71dSyJVs3Md = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("traceAndCopy").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("71dSyJVs3Md").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<SNode> createReducedVersionWithoutTraces_id6kR0qIbx$Vr = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("createReducedVersionWithoutTraces").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6kR0qIbx$Vr").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(createReducedExpression_id71dSyJVoY1g, trace_id71dSyJVs3bA, traceAndCopy_id71dSyJVs3Md, createReducedVersionWithoutTraces_id6kR0qIbx$Vr);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode trace_id71dSyJVs3bA(@NotNull SNode __thisNode__, SNode traced, SNode target, String label) {
    if (SNodeOperations.isInstanceOf(traced, CONCEPTS.TracerExpression$6g) || ListSequence.fromList(SNodeOperations.getNodeDescendants(traced, CONCEPTS.TracerExpression$6g, false, new SAbstractConcept[]{})).isNotEmpty()) {
      return traced;
    }
    return createTracerExpression_v3mk0k_a1a1(target, traced, label);
  }
  /*package*/ static SNode traceAndCopy_id71dSyJVs3Md(@NotNull SNode __thisNode__, SNode traced, String label) {
    if (SNodeOperations.isInstanceOf(traced, CONCEPTS.TracerExpression$6g) || ListSequence.fromList(SNodeOperations.getNodeDescendants(traced, CONCEPTS.TracerExpression$6g, false, new SAbstractConcept[]{})).isNotEmpty()) {
      return traced;
    }
    return createTracerExpression_v3mk0k_a1a2(traced, SNodeOperations.copyNode(traced), label);
  }
  /*package*/ static SNode createReducedVersionWithoutTraces_id6kR0qIbx$Vr(@NotNull SNode __thisNode__) {
    SNode red = IReducableExpression__BehaviorDescriptor.createReducedExpression_id71dSyJVoY1g.invoke(__thisNode__);
    List<SNode> tracers = SNodeOperations.getNodeDescendants(red, CONCEPTS.TracerExpression$6g, false, new SAbstractConcept[]{});
    for (SNode t : ListSequence.fromList(tracers)) {
      SNodeOperations.replaceWithAnother(t, SLinkOperations.getTarget(t, LINKS.traced$TVga));
    }
    return red;
  }

  /*package*/ IReducableExpression__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((SNode) trace_id71dSyJVs3bA(node, (SNode) parameters[0], (SNode) parameters[1], (String) parameters[2]));
      case 2:
        return (T) ((SNode) traceAndCopy_id71dSyJVs3Md(node, (SNode) parameters[0], (String) parameters[1]));
      case 3:
        return (T) ((SNode) createReducedVersionWithoutTraces_id6kR0qIbx$Vr(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createTracerExpression_v3mk0k_a1a1(SNode p0, SNode p1, String p2) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TracerExpression$6g);
    n0.setReferenceTarget(LINKS.target$Iywn, p0);
    n0.forChild(LINKS.traced$TVga).initNode(p1, CONCEPTS.Expression$D_, true);
    n0.setProperty(PROPS.traceLabel$Iy2l, p2);
    return n0.getResult();
  }
  private static SNode createTracerExpression_v3mk0k_a1a2(SNode p0, SNode p1, String p2) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.TracerExpression$6g);
    n0.setReferenceTarget(LINKS.target$Iywn, p0);
    n0.forChild(LINKS.traced$TVga).initNode(p1, CONCEPTS.Expression$D_, true);
    n0.setProperty(PROPS.traceLabel$Iy2l, p2);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TracerExpression$6g = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL, "org.iets3.core.expr.base.structure.TracerExpression");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink traced$TVga = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL, 0x704de22bfb6bfe0fL, "traced");
    /*package*/ static final SReferenceLink target$Iywn = MetaAdapterFactory.getReferenceLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL, 0x704de22bfb6c040aL, "target");
  }

  private static final class PROPS {
    /*package*/ static final SProperty traceLabel$Iy2l = MetaAdapterFactory.getProperty(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x704de22bfb6bfe0eL, 0x704de22bfb6c0408L, "traceLabel");
  }
}
