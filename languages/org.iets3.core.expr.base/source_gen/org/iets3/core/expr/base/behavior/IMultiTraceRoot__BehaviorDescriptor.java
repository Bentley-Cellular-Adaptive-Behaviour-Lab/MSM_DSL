package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import com.mbeddr.mpsutil.traceExplorer.plugin.ITraceRecord;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class IMultiTraceRoot__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0xf4b54f714ba06c9L, "org.iets3.core.expr.base.structure.IMultiTraceRoot");

  public static final SMethod<List<String>> getTraceCategories_idXblfskIwx1 = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("getTraceCategories").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("XblfskIwx1").build();
  public static final SMethod<Boolean> isTraceAvailable_idXblfskIwx7 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isTraceAvailable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("XblfskIwx7").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> getTabTitle_idXblfskIwxh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTabTitle").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("XblfskIwxh").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<ITraceRecord> getRootTrace_idXblfskIwxp = new SMethodBuilder<ITraceRecord>(new SJavaCompoundTypeImpl(ITraceRecord.class)).name("getRootTrace").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("XblfskIwxp").build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getTraceCategories_idXblfskIwx1, isTraceAvailable_idXblfskIwx7, getTabTitle_idXblfskIwxh, getRootTrace_idXblfskIwxp);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isTraceAvailable_idXblfskIwx7(@NotNull SNode __thisNode__, String cat) {
    return IMultiTraceRoot__BehaviorDescriptor.getRootTrace_idXblfskIwxp.invoke(__thisNode__, cat) != null;
  }
  /*package*/ static String getTabTitle_idXblfskIwxh(@NotNull SNode __thisNode__, String cat) {
    return cat + ": " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(__thisNode__);
  }

  /*package*/ IMultiTraceRoot__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((Boolean) isTraceAvailable_idXblfskIwx7(node, (String) parameters[0]));
      case 2:
        return (T) ((String) getTabTitle_idXblfskIwxh(node, (String) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
