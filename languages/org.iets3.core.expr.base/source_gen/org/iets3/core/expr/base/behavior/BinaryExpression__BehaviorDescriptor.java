package org.iets3.core.expr.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.iets3.core.expr.base.plugin.EffectDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class BinaryExpression__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, "org.iets3.core.expr.base.structure.BinaryExpression");

  public static final SMethod<Integer> priority_id4rZeNQ6MpZB = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("priority").modifiers(SModifiersImpl.create(13, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4rZeNQ6MpZB").build();
  public static final SMethod<Boolean> isLeftAssociative_id4rZeNQ6MpZM = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isLeftAssociative").modifiers(SModifiersImpl.create(9, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4rZeNQ6MpZM").build();
  public static final SMethod<String> getPresentation_idhEwIMiw = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPresentation").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hEwIMiw").build();
  public static final SMethod<EffectDescriptor> effectDescriptor_id6GySMNjjWfO = new SMethodBuilder<EffectDescriptor>(new SJavaCompoundTypeImpl(EffectDescriptor.class)).name("effectDescriptor").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6GySMNjjWfO").build();
  public static final SMethod<String> renderReadable_id4Y0vh0cfqjE = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("renderReadable").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Y0vh0cfqjE").build();
  public static final SMethod<Void> addChildToMainSlot_id91pmpwTPqy = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addChildToMainSlot").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("91pmpwTPqy").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Boolean> requiresVerticalLayout_id15gN1OJkoy_ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("requiresVerticalLayout").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("15gN1OJkoy_").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(priority_id4rZeNQ6MpZB, isLeftAssociative_id4rZeNQ6MpZM, getPresentation_idhEwIMiw, effectDescriptor_id6GySMNjjWfO, renderReadable_id4Y0vh0cfqjE, addChildToMainSlot_id91pmpwTPqy, requiresVerticalLayout_id15gN1OJkoy_);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isLeftAssociative_id4rZeNQ6MpZM(@NotNull SAbstractConcept __thisConcept__) {
    return true;
  }
  /*package*/ static String getPresentation_idhEwIMiw(@NotNull SNode __thisNode__) {
    return BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.left$zxUa)) + " " + SConceptOperations.conceptAlias(SNodeOperations.getConcept(__thisNode__)) + " " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.right$zBjx));
  }
  /*package*/ static EffectDescriptor effectDescriptor_id6GySMNjjWfO(@NotNull SNode __thisNode__) {
    return EffectDescriptor.forNodes(SLinkOperations.getTarget(__thisNode__, LINKS.left$zxUa), SLinkOperations.getTarget(__thisNode__, LINKS.right$zBjx));
  }
  /*package*/ static String renderReadable_id4Y0vh0cfqjE(@NotNull SNode __thisNode__) {
    return Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.left$zxUa)) + " " + SConceptOperations.conceptAlias(SNodeOperations.getConcept(__thisNode__)) + " " + Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.right$zBjx));
  }
  /*package*/ static void addChildToMainSlot_id91pmpwTPqy(@NotNull SNode __thisNode__, SNode c, String slot) {
    if (SNodeOperations.isInstanceOf(c, CONCEPTS.Expression$D_)) {
      SLinkOperations.setTarget(__thisNode__, LINKS.left$zxUa, SNodeOperations.cast(c, CONCEPTS.Expression$D_));
    }
  }
  /*package*/ static boolean requiresVerticalLayout_id15gN1OJkoy_(@NotNull SNode __thisNode__) {
    final SConcept c = SNodeOperations.getConcept(__thisNode__);
    List<SNode> allAncestorBinaries = SNodeOperations.getNodeAncestors(__thisNode__, CONCEPTS.BinaryExpression$j$, true);
    boolean allAreSameType = ListSequence.fromList(allAncestorBinaries).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (int) BinaryExpression__BehaviorDescriptor.priority_id4rZeNQ6MpZB.invoke(SNodeOperations.asSConcept(SNodeOperations.getConcept(it))) == (int) BinaryExpression__BehaviorDescriptor.priority_id4rZeNQ6MpZB.invoke(SNodeOperations.asSConcept(c));
      }
    });

    Iterable<SNode> allOfSameType = ListSequence.fromList(allAncestorBinaries).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (int) BinaryExpression__BehaviorDescriptor.priority_id4rZeNQ6MpZB.invoke(SNodeOperations.asSConcept(SNodeOperations.getConcept(it))) == (int) BinaryExpression__BehaviorDescriptor.priority_id4rZeNQ6MpZB.invoke(SNodeOperations.asSConcept(c));
      }
    });
    SNode topSameTypeBinary = Sequence.fromIterable(allOfSameType).last();
    boolean minimumThreeDeep = Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getNodeDescendants(topSameTypeBinary, null, false, new SAbstractConcept[]{}), CONCEPTS.BinaryExpression$j$)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (int) BinaryExpression__BehaviorDescriptor.priority_id4rZeNQ6MpZB.invoke(SNodeOperations.asSConcept(SNodeOperations.getConcept(it))) == (int) BinaryExpression__BehaviorDescriptor.priority_id4rZeNQ6MpZB.invoke(SNodeOperations.asSConcept(c));
      }
    }).count() >= 1;

    Iterable<SNode> allNonBinaries = ListSequence.fromList(SNodeOperations.getNodeDescendants(topSameTypeBinary, null, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), CONCEPTS.BinaryExpression$j$));
      }
    });
    boolean elementIsLong = Sequence.fromIterable(allNonBinaries).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        String renderReadable = Expression__BehaviorDescriptor.renderReadable_id4Y0vh0cfqjE.invoke(SNodeOperations.as(it, CONCEPTS.Expression$D_));
        return (renderReadable != null && renderReadable.length() > 0) && renderReadable.length() > 20;
      }
    });

    return allAreSameType && minimumThreeDeep && elementIsLong;
  }

  /*package*/ BinaryExpression__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 2:
        return (T) ((String) getPresentation_idhEwIMiw(node));
      case 3:
        return (T) ((EffectDescriptor) effectDescriptor_id6GySMNjjWfO(node));
      case 4:
        return (T) ((String) renderReadable_id4Y0vh0cfqjE(node));
      case 5:
        addChildToMainSlot_id91pmpwTPqy(node, (SNode) parameters[0], (String) parameters[1]);
        return null;
      case 6:
        return (T) ((Boolean) requiresVerticalLayout_id15gN1OJkoy_(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((Boolean) isLeftAssociative_id4rZeNQ6MpZM(concept));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink right$zBjx = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, 0x46ff3b3d86c99c18L, "right");
    /*package*/ static final SContainmentLink left$zxUa = MetaAdapterFactory.getContainmentLink(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, 0x46ff3b3d86c99c16L, "left");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
    /*package*/ static final SConcept BinaryExpression$j$ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x46ff3b3d86c99c15L, "org.iets3.core.expr.base.structure.BinaryExpression");
  }
}
