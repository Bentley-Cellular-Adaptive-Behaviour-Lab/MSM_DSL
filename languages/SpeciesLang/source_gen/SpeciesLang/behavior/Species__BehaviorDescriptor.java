package SpeciesLang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import UnitLang.behavior.Amount_Concentration__BehaviorDescriptor;
import UnitLang.behavior.Mass_Concentration__BehaviorDescriptor;
import java.util.ArrayList;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Species__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, "SpeciesLang.structure.Species");

  public static final SMethod<Void> cleanReactionRelations_id1Ch7j$Nakak = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("cleanReactionRelations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1Ch7j$Nakak").build();
  public static final SMethod<Void> cleanModifierRelations_id20T6jFVkZPx = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("cleanModifierRelations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("20T6jFVkZPx").build();
  public static final SMethod<Float> getStartConcentrationValue_id3fk35jmCFN3 = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("getStartConcentrationValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3fk35jmCFN3").build();
  public static final SMethod<Float> getMinConcentrationValue_id1VQO6m$d9Os = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("getMinConcentrationValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1VQO6m$d9Os").build();
  public static final SMethod<Float> getMaxConcentrationValue_id1VQO6m$daTe = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("getMaxConcentrationValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1VQO6m$daTe").build();
  public static final SMethod<Integer> getMaxTranscriptionDelay_id6UPd1r3aEsj = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getMaxTranscriptionDelay").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6UPd1r3aEsj").build();
  public static final SMethod<Boolean> usesCellValue_id3FNuJRrY91G = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("usesCellValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3FNuJRrY91G").build();
  public static final SMethod<Boolean> usesNeighbourValue_id3FNuJRrYw4K = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("usesNeighbourValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3FNuJRrYw4K").build();
  public static final SMethod<List<SNode>> getReactionPartnerSpecies_id3FNuJRsgPNT = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getReactionPartnerSpecies").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3FNuJRsgPNT").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(cleanReactionRelations_id1Ch7j$Nakak, cleanModifierRelations_id20T6jFVkZPx, getStartConcentrationValue_id3fk35jmCFN3, getMinConcentrationValue_id1VQO6m$d9Os, getMaxConcentrationValue_id1VQO6m$daTe, getMaxTranscriptionDelay_id6UPd1r3aEsj, usesCellValue_id3FNuJRrY91G, usesNeighbourValue_id3FNuJRrYw4K, getReactionPartnerSpecies_id3FNuJRsgPNT);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SPropertyOperations.assign(__thisNode__, PROPS.Transcription_Delay$D$oz, 1);
  }

  /*package*/ static void cleanReactionRelations_id1Ch7j$Nakak(@NotNull SNode __thisNode__) {
    // Clean reactions that have been deleted.
    // Clean references where this species is no longer being used as a reactant, or it has been duplicated.
    for (SNode reaction_ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ReactsInProcess$_Wy1))) {
      if ((SLinkOperations.getTarget(reaction_ref, LINKS.ReactionReference$PJYZ) == null)) {
        // Reaction has been deleted, so remove this reference.
        SNodeOperations.deleteNode(reaction_ref);
      } else {
        for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(reaction_ref, LINKS.ReactionReference$PJYZ), LINKS.Reactant_Terms$Wnv9))) {
          // Otherwise, check to see if the species is being used even once as a reactant, keep the reference if so.
          boolean isReactant = false;
          if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), __thisNode__)) {
            isReactant = true;
          }
          if (isReactant) {
            break;
          } else {
            SNodeOperations.deleteNode(reaction_ref);
          }
        }
      }
    }
    // Clean references where this species is no longer a product.
    for (SNode reaction_ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ProductOfProcess$_X03))) {
      if ((SLinkOperations.getTarget(reaction_ref, LINKS.ReactionReference$PJYZ) == null)) {
        // Reaction has been deleted, so remove this reference.
        SNodeOperations.deleteNode(reaction_ref);
      } else {
        for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(reaction_ref, LINKS.ReactionReference$PJYZ), LINKS.Reactant_Terms$Wnv9))) {
          // Otherwise, check to see if the species is being used even once as a product, keep the reference if so.
          boolean isProduct = false;
          if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), __thisNode__)) {
            isProduct = true;
          }
          if (isProduct) {
            break;
          } else {
            SNodeOperations.deleteNode(reaction_ref);
          }
        }
      }
    }
  }
  /*package*/ static void cleanModifierRelations_id20T6jFVkZPx(@NotNull SNode __thisNode__) {
    for (SNode relation : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ModifiesProcess$UMOC))) {
      if (!(Objects.equals(SLinkOperations.getTarget(SLinkOperations.getTarget(relation, LINKS.target$hsJa), LINKS.Source$9HG6), __thisNode__))) {
        SNodeOperations.deleteNode(relation);
      }
    }
    for (SNode relation : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ModifiedByProcess$uVT0))) {
      if (!(Objects.equals(SLinkOperations.getTarget(SLinkOperations.getTarget(relation, LINKS.target$hsJa), LINKS.Target$9C3I), __thisNode__))) {
        SNodeOperations.deleteNode(relation);
      }
    }
  }
  /*package*/ static float getStartConcentrationValue_id3fk35jmCFN3(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(__thisNode__, LINKS.Starting_Concentration$a3uk), CONCEPTS.Amount_Concentration$r2)) {
      return Amount_Concentration__BehaviorDescriptor.get_amountconc_value_decimal_id7Eknuda0RxM.invoke(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.Starting_Concentration$a3uk), CONCEPTS.Amount_Concentration$r2)).floatValue();
    } else {
      return Mass_Concentration__BehaviorDescriptor.get_massconc_value_decimal_id7Eknuda1wme.invoke(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.Starting_Concentration$a3uk), CONCEPTS.Mass_Concentration$qz)).floatValue();
    }
  }
  /*package*/ static float getMinConcentrationValue_id1VQO6m$d9Os(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(__thisNode__, LINKS.Min_Concentration$RVCW), CONCEPTS.Amount_Concentration$r2)) {
      return Amount_Concentration__BehaviorDescriptor.get_amountconc_value_decimal_id7Eknuda0RxM.invoke(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.Min_Concentration$RVCW), CONCEPTS.Amount_Concentration$r2)).floatValue();
    } else {
      return Mass_Concentration__BehaviorDescriptor.get_massconc_value_decimal_id7Eknuda1wme.invoke(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.Min_Concentration$RVCW), CONCEPTS.Mass_Concentration$qz)).floatValue();
    }
  }
  /*package*/ static float getMaxConcentrationValue_id1VQO6m$daTe(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(__thisNode__, LINKS.Max_Concentration$S2Fq), CONCEPTS.Amount_Concentration$r2)) {
      return Amount_Concentration__BehaviorDescriptor.get_amountconc_value_decimal_id7Eknuda0RxM.invoke(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.Max_Concentration$S2Fq), CONCEPTS.Amount_Concentration$r2)).floatValue();
    } else {
      return Mass_Concentration__BehaviorDescriptor.get_massconc_value_decimal_id7Eknuda1wme.invoke(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.Max_Concentration$S2Fq), CONCEPTS.Mass_Concentration$qz)).floatValue();
    }
  }
  /*package*/ static int getMaxTranscriptionDelay_id6UPd1r3aEsj(@NotNull SNode __thisNode__) {
    // Checks over all regulation interactions that affect this species.
    // 1 is the default here i.e. the next timestep.
    int max_transcription_delay = 1;
    // Check over all processes that this species participates in.
    // TODO: Tidy this up.
    for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.SpeciesContainer$Ig), LINKS.Processes$hnPe))) {
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.Regulation$l6)) {
        if (Objects.equals(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Regulation$l6), LINKS.Target$9C3I), __thisNode__)) {
          if (SPropertyOperations.getInteger(SNodeOperations.as(process, CONCEPTS.Regulation$l6), PROPS.TranscriptionDelay$L0UN) > max_transcription_delay) {
            max_transcription_delay = SPropertyOperations.getInteger(SNodeOperations.as(process, CONCEPTS.Regulation$l6), PROPS.TranscriptionDelay$L0UN);
          }
        }
      }
    }
    return max_transcription_delay;
  }
  /*package*/ static boolean usesCellValue_id3FNuJRrY91G(@NotNull SNode __thisNode__) {
    // Check over all reactions in the species container - if one uses this species and has the cell value set to true at any point, return true. Otherwise, return false.
    SNode speciesContainer = SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.SpeciesContainer$Ig);
    boolean usesCellValue = false;
    for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(speciesContainer, LINKS.Processes$hnPe))) {
      // If we find even one term that uses the cell value, we stop looking.
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.Reaction$JH) && (boolean) SpeciesContainer__BehaviorDescriptor.speciesInvolvedInProcess_id2AP3$9HzFVa.invoke(speciesContainer, __thisNode__, process)) {
        SNode currentReaction = SNodeOperations.as(process, CONCEPTS.Reaction$JH);
        for (SNode reactantTerm : ListSequence.fromList(SLinkOperations.getChildren(currentReaction, LINKS.Reactant_Terms$Wnv9))) {
          // If it is not using the neighbour value, then it must use the cell value.
          if (Objects.equals(SLinkOperations.getTarget(reactantTerm, LINKS.Species_Ref$Wnde), __thisNode__) && !(SPropertyOperations.getBoolean(reactantTerm, PROPS.UsesNeighbourValue$$pnR))) {
            usesCellValue = true;
            break;
          }
        }
        if (usesCellValue) {
          break;
        }
        for (SNode productTerm : ListSequence.fromList(SLinkOperations.getChildren(currentReaction, LINKS.Product_Terms$WnXb))) {
          if (Objects.equals(SLinkOperations.getTarget(productTerm, LINKS.Species_Ref$Wnde), __thisNode__) && !(SPropertyOperations.getBoolean(productTerm, PROPS.UsesNeighbourValue$$pnR))) {
            usesCellValue = true;
            break;
          }
        }
        if (usesCellValue) {
          break;
        }
      }
      if (usesCellValue) {
        break;
      }
    }
    return usesCellValue;
  }
  /*package*/ static boolean usesNeighbourValue_id3FNuJRrYw4K(@NotNull SNode __thisNode__) {
    // Check over all reactions in the species container - if one uses this species and has the cell value set to true at any point, return true. Otherwise, return false.
    SNode speciesContainer = SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.SpeciesContainer$Ig);
    boolean usesNeighbourValue = false;
    for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(speciesContainer, LINKS.Processes$hnPe))) {
      // If we find even one term that uses the cell value, we stop looking.
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.Reaction$JH) && (boolean) SpeciesContainer__BehaviorDescriptor.speciesInvolvedInProcess_id2AP3$9HzFVa.invoke(speciesContainer, __thisNode__, process)) {
        SNode currentReaction = SNodeOperations.as(process, CONCEPTS.Reaction$JH);
        for (SNode reactantTerm : ListSequence.fromList(SLinkOperations.getChildren(currentReaction, LINKS.Reactant_Terms$Wnv9))) {
          if (Objects.equals(SLinkOperations.getTarget(reactantTerm, LINKS.Species_Ref$Wnde), __thisNode__) && SPropertyOperations.getBoolean(reactantTerm, PROPS.UsesNeighbourValue$$pnR)) {
            usesNeighbourValue = true;
            break;
          }
        }
        if (usesNeighbourValue) {
          break;
        }
        for (SNode productTerm : ListSequence.fromList(SLinkOperations.getChildren(currentReaction, LINKS.Product_Terms$WnXb))) {
          if (Objects.equals(SLinkOperations.getTarget(productTerm, LINKS.Species_Ref$Wnde), __thisNode__) && SPropertyOperations.getBoolean(productTerm, PROPS.UsesNeighbourValue$$pnR)) {
            usesNeighbourValue = true;
            break;
          }
        }
        if (usesNeighbourValue) {
          break;
        }
      }
      if (usesNeighbourValue) {
        break;
      }
    }
    return usesNeighbourValue;
  }
  /*package*/ static List<SNode> getReactionPartnerSpecies_id3FNuJRsgPNT(@NotNull SNode __thisNode__) {
    // Gets a non-unique list of all species that a species participates in a reaction process with.
    List<SNode> partnerSpecies = ListSequence.fromList(new ArrayList<SNode>());
    SNode container = SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.SpeciesContainer$Ig);

    for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(container, LINKS.Processes$hnPe))) {
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.Reaction$JH)) {
        SNode reaction = SNodeOperations.as(process, CONCEPTS.Reaction$JH);
        if ((boolean) Reaction__BehaviorDescriptor.containsSpecies_id6Hz4f3Dh3F6.invoke(reaction, __thisNode__)) {
          for (SNode reactantTerm : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Reactant_Terms$Wnv9))) {
            if (!(Objects.equals(SLinkOperations.getTarget(reactantTerm, LINKS.Species_Ref$Wnde), __thisNode__))) {
              ListSequence.fromList(partnerSpecies).addElement(SLinkOperations.getTarget(reactantTerm, LINKS.Species_Ref$Wnde));
            }
          }
          for (SNode productTerm : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Product_Terms$WnXb))) {
            if (!(Objects.equals(SLinkOperations.getTarget(productTerm, LINKS.Species_Ref$Wnde), __thisNode__))) {
              ListSequence.fromList(partnerSpecies).addElement(SLinkOperations.getTarget(productTerm, LINKS.Species_Ref$Wnde));
            }
          }
        }
      }
    }

    return partnerSpecies;
  }

  /*package*/ Species__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        cleanReactionRelations_id1Ch7j$Nakak(node);
        return null;
      case 1:
        cleanModifierRelations_id20T6jFVkZPx(node);
        return null;
      case 2:
        return (T) ((Float) getStartConcentrationValue_id3fk35jmCFN3(node));
      case 3:
        return (T) ((Float) getMinConcentrationValue_id1VQO6m$d9Os(node));
      case 4:
        return (T) ((Float) getMaxConcentrationValue_id1VQO6m$daTe(node));
      case 5:
        return (T) ((Integer) getMaxTranscriptionDelay_id6UPd1r3aEsj(node));
      case 6:
        return (T) ((Boolean) usesCellValue_id3FNuJRrY91G(node));
      case 7:
        return (T) ((Boolean) usesNeighbourValue_id3FNuJRrYw4K(node));
      case 8:
        return (T) ((List<SNode>) getReactionPartnerSpecies_id3FNuJRsgPNT(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty Transcription_Delay$D$oz = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x591a634ae235e46bL, "Transcription_Delay");
    /*package*/ static final SProperty TranscriptionDelay$L0UN = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x6eb53416c32b34fbL, "TranscriptionDelay");
    /*package*/ static final SProperty UsesNeighbourValue$$pnR = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2c1a564c7a3af7b1L, "UsesNeighbourValue");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ReactionReference$PJYZ = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x1a111d3933278bf1L, 0x1a111d3933278bf2L, "ReactionReference");
    /*package*/ static final SReferenceLink Species_Ref$Wnde = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2b6159d0ceecf4f7L, "Species_Ref");
    /*package*/ static final SContainmentLink Reactant_Terms$Wnv9 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4f9L, "Reactant_Terms");
    /*package*/ static final SContainmentLink ReactsInProcess$_Wy1 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed142fL, "ReactsInProcess");
    /*package*/ static final SContainmentLink ProductOfProcess$_X03 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed1431L, "ProductOfProcess");
    /*package*/ static final SReferenceLink target$hsJa = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2039193afb4c33c3L, 0x2039193afb4c33c4L, "target");
    /*package*/ static final SReferenceLink Source$9HG6 = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x54e0a6c6049cf06dL, "Source");
    /*package*/ static final SContainmentLink ModifiesProcess$UMOC = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2039193afb4c33c6L, "ModifiesProcess");
    /*package*/ static final SReferenceLink Target$9C3I = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x54e0a6c6049cf06aL, "Target");
    /*package*/ static final SContainmentLink ModifiedByProcess$uVT0 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2039193afb52ddb0L, "ModifiedByProcess");
    /*package*/ static final SContainmentLink Starting_Concentration$a3uk = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x375d1bec6ae084b4L, "Starting_Concentration");
    /*package*/ static final SContainmentLink Min_Concentration$RVCW = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x1ef6d065a427933bL, "Min_Concentration");
    /*package*/ static final SContainmentLink Max_Concentration$S2Fq = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x1ef6d065a4279344L, "Max_Concentration");
    /*package*/ static final SContainmentLink Processes$hnPe = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf742L, "Processes");
    /*package*/ static final SContainmentLink Product_Terms$WnXb = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4fbL, "Product_Terms");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Amount_Concentration$r2 = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b8L, "UnitLang.structure.Amount_Concentration");
    /*package*/ static final SConcept Mass_Concentration$qz = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b7L, "UnitLang.structure.Mass_Concentration");
    /*package*/ static final SConcept Regulation$l6 = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, "SpeciesLang.structure.Regulation");
    /*package*/ static final SConcept SpeciesContainer$Ig = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, "SpeciesLang.structure.SpeciesContainer");
    /*package*/ static final SConcept Reaction$JH = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, "SpeciesLang.structure.Reaction");
  }
}
