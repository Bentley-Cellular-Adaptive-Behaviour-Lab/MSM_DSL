package SpeciesSetup.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class Reaction__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, "SpeciesSetup.structure.Reaction");

  public static final SMethod<Void> update_relations_id6MnwXeKa_yb = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("update_relations").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6MnwXeKa_yb").build();
  public static final SMethod<Void> add_reactant_relations_id2Hxmt3eRVEM = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("add_reactant_relations").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRVEM").build();
  public static final SMethod<Void> add_product_relations_id2Hxmt3eRYoc = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("add_product_relations").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRYoc").build();
  public static final SMethod<Void> add_reactant_relation_id2Hxmt3eRLJY = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("add_reactant_relation").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRLJY").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> add_product_relation_id2Hxmt3eRo0a = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("add_product_relation").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRo0a").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> clean_reactant_references_id2Hxmt3eRQIZ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("clean_reactant_references").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRQIZ").build();
  public static final SMethod<Void> clean_product_references_id2Hxmt3eRShY = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("clean_product_references").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRShY").build();
  public static final SMethod<Boolean> is_species_present_id2Hxmt3eRTBN = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("is_species_present").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2Hxmt3eRTBN").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(update_relations_id6MnwXeKa_yb, add_reactant_relations_id2Hxmt3eRVEM, add_product_relations_id2Hxmt3eRYoc, add_reactant_relation_id2Hxmt3eRLJY, add_product_relation_id2Hxmt3eRo0a, clean_reactant_references_id2Hxmt3eRQIZ, clean_product_references_id2Hxmt3eRShY, is_species_present_id2Hxmt3eRTBN);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void update_relations_id6MnwXeKa_yb(@NotNull SNode __thisNode__) {
    // Check which species are being used in the reaction and add them as references to the relevant species and this reaction. 
    // Adding references in this manner rather than the nodes themselves prevents the graph from becoming acylcic. 
    Reaction__BehaviorDescriptor.add_reactant_relations_id2Hxmt3eRVEM.invoke(__thisNode__);
    Reaction__BehaviorDescriptor.add_product_relations_id2Hxmt3eRYoc.invoke(__thisNode__);

    // Check which species are no longer present in the reaction and remove their references from this reaction, and reaction reference from the associated species. 
    // This prevents redundant or outdated references from being used during ODE definition if a user modifies their reactions. 
    Reaction__BehaviorDescriptor.clean_reactant_references_id2Hxmt3eRQIZ.invoke(__thisNode__);
    Reaction__BehaviorDescriptor.clean_product_references_id2Hxmt3eRShY.invoke(__thisNode__);
  }
  /*package*/ static void add_reactant_relations_id2Hxmt3eRVEM(@NotNull SNode __thisNode__) {
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.left_side$ezJl), LINKS.expr$K4uy)))) {
      if (SNodeOperations.isInstanceOf(child, CONCEPTS.Species_Expression$wd)) {
        Reaction__BehaviorDescriptor.add_reactant_relation_id2Hxmt3eRLJY.invoke(__thisNode__, SNodeOperations.as(child, CONCEPTS.Species_Expression$wd));
      }
    }
  }
  /*package*/ static void add_product_relations_id2Hxmt3eRYoc(@NotNull SNode __thisNode__) {
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.right_side$e$dn), LINKS.expr$K4uy)))) {
      if (SNodeOperations.isInstanceOf(child, CONCEPTS.Species_Expression$wd)) {
        Reaction__BehaviorDescriptor.add_product_relation_id2Hxmt3eRo0a.invoke(__thisNode__, SNodeOperations.as(child, CONCEPTS.Species_Expression$wd));
      }
    }
  }
  /*package*/ static void add_reactant_relation_id2Hxmt3eRLJY(@NotNull SNode __thisNode__, SNode species_exp) {
    SNode reaction_ref = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efbaL, "SpeciesSetup.structure.Reaction_Reference"));
    SLinkOperations.setTarget(reaction_ref, LINKS.Reaction$q6q2, __thisNode__);

    SNode species_ref = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efa3L, "SpeciesSetup.structure.Species_Reference"));
    SLinkOperations.setTarget(species_ref, LINKS.Species$q080, SLinkOperations.getTarget(species_exp, LINKS.Species$8XOa));

    ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(species_exp, LINKS.Species$8XOa), LINKS.reactantIn$IyJZ)).addElement(reaction_ref);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.reactants$nVHZ)).addElement(species_ref);
  }
  /*package*/ static void add_product_relation_id2Hxmt3eRo0a(@NotNull SNode __thisNode__, SNode species_exp) {
    SNode reaction_ref = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efbaL, "SpeciesSetup.structure.Reaction_Reference"));
    SLinkOperations.setTarget(reaction_ref, LINKS.Reaction$q6q2, __thisNode__);

    SNode species_ref = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efa3L, "SpeciesSetup.structure.Species_Reference"));
    SLinkOperations.setTarget(species_ref, LINKS.Species$q080, SLinkOperations.getTarget(species_exp, LINKS.Species$8XOa));

    ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(species_exp, LINKS.Species$8XOa), LINKS.productOf$wo6t)).addElement(reaction_ref);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.products$waJ3)).addElement(species_ref);
  }
  /*package*/ static void clean_reactant_references_id2Hxmt3eRQIZ(@NotNull SNode __thisNode__) {
    for (SNode reactant_ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.reactants$nVHZ))) {
      if (((boolean) Reaction__BehaviorDescriptor.is_species_present_id2Hxmt3eRTBN.invoke(__thisNode__, SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.left_side$ezJl), LINKS.expr$K4uy), reactant_ref))) {
        continue;
      } else {
        // Access the species' list of reaction references, and remove reactant references to this reaction. 
        Species__BehaviorDescriptor.delete_reactant_reference_id2Hxmt3eSq26.invoke(SLinkOperations.getTarget(reactant_ref, LINKS.Species$q080), __thisNode__);
        // Then, remove this reactant reference. 
        SNodeOperations.deleteNode(reactant_ref);
      }
    }
  }
  /*package*/ static void clean_product_references_id2Hxmt3eRShY(@NotNull SNode __thisNode__) {
    for (SNode product_ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.products$waJ3))) {
      if (((boolean) Reaction__BehaviorDescriptor.is_species_present_id2Hxmt3eRTBN.invoke(__thisNode__, SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.left_side$ezJl), LINKS.expr$K4uy), product_ref))) {
        continue;
      } else {
        // Access the species' list of reaction references, and remove product references to this reaction. 
        Species__BehaviorDescriptor.delete_product_reference_id2Hxmt3eSryf.invoke(SLinkOperations.getTarget(product_ref, LINKS.Species$q080), __thisNode__);
        // Then, remove this reactant reference. 
        SNodeOperations.deleteNode(product_ref);
      }
    }

  }
  /*package*/ static boolean is_species_present_id2Hxmt3eRTBN(@NotNull SNode __thisNode__, SNode expr, SNode species_ref) {
    // Set a bool to determine whether the species is present. 
    // We don't care if the species appears more than once, just if it appears at all, so switch this on and leave it if it is found. 
    boolean is_species_present = false;

    // Check over all children in the expression looking for either a species expression or a regular expression. 
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(expr))) {
      if (SNodeOperations.isInstanceOf(child, CONCEPTS.Species_Expression$wd)) {
        // If the species expression matches the desired reference species, set the boolean to true. 
        if (SLinkOperations.getTarget(SNodeOperations.as(child, CONCEPTS.Species_Expression$wd), LINKS.Species$8XOa) == SLinkOperations.getTarget(species_ref, LINKS.Species$q080)) {
          is_species_present = true;
        }
      } else if (SNodeOperations.isInstanceOf(child, CONCEPTS.Expression$D_) && !(SNodeOperations.isInstanceOf(child, CONCEPTS.Species_Expression$wd))) {
        // Otherwise, if another, non-species expression is found, check inside that for species expressions. 
        if (((boolean) Reaction__BehaviorDescriptor.is_species_present_id2Hxmt3eRTBN.invoke(__thisNode__, SNodeOperations.as(child, CONCEPTS.Expression$D_), species_ref))) {
          is_species_present = true;
        }
      }
    }
    return is_species_present;
  }

  /*package*/ Reaction__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        update_relations_id6MnwXeKa_yb(node);
        return null;
      case 1:
        add_reactant_relations_id2Hxmt3eRVEM(node);
        return null;
      case 2:
        add_product_relations_id2Hxmt3eRYoc(node);
        return null;
      case 3:
        add_reactant_relation_id2Hxmt3eRLJY(node, (SNode) parameters[0]);
        return null;
      case 4:
        add_product_relation_id2Hxmt3eRo0a(node, (SNode) parameters[0]);
        return null;
      case 5:
        clean_reactant_references_id2Hxmt3eRQIZ(node);
        return null;
      case 6:
        clean_product_references_id2Hxmt3eRShY(node);
        return null;
      case 7:
        return (T) ((Boolean) is_species_present_id2Hxmt3eRTBN(node, (SNode) parameters[0], (SNode) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Species_Expression$wd = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b12L, "SpeciesSetup.structure.Species_Expression");
    /*package*/ static final SConcept Expression$D_ = MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left_side$ezJl = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, 0x1f9e4166b23d945dL, "left_side");
    /*package*/ static final SContainmentLink expr$K4uy = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x1f9e4166b2564f61L, 0x1f9e4166b2564f62L, "expr");
    /*package*/ static final SContainmentLink right_side$e$dn = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, 0x1f9e4166b23d945fL, "right_side");
    /*package*/ static final SReferenceLink Reaction$q6q2 = MetaAdapterFactory.getReferenceLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efbaL, 0x6f8f49e54f57efbbL, "Reaction");
    /*package*/ static final SReferenceLink Species$q080 = MetaAdapterFactory.getReferenceLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efa3L, 0x6f8f49e54f57efb8L, "Species");
    /*package*/ static final SReferenceLink Species$8XOa = MetaAdapterFactory.getReferenceLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b12L, 0x53941380e02b1b1bL, "Species");
    /*package*/ static final SContainmentLink reactantIn$IyJZ = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510bL, 0x1f9e4166b240432bL, "reactantIn");
    /*package*/ static final SContainmentLink reactants$nVHZ = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, 0x1f9e4166b23fbfa5L, "reactants");
    /*package*/ static final SContainmentLink productOf$wo6t = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510bL, 0x1f9e4166b245327cL, "productOf");
    /*package*/ static final SContainmentLink products$waJ3 = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, 0x1f9e4166b245326dL, "products");
  }
}
