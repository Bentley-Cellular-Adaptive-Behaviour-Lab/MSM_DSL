package SpeciesSetup.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Reaction__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, "SpeciesSetup.structure.Reaction");

  public static final SMethod<Boolean> containsSpecies_id6Hz4f3Dh3F6 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("containsSpecies").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6Hz4f3Dh3F6").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> termsUseCellValue_idxhYrIU0BAr = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("termsUseCellValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("xhYrIU0BAr").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> termsUseNeighbourValue_idxhYrIU13P$ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("termsUseNeighbourValue").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("xhYrIU13P$").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(containsSpecies_id6Hz4f3Dh3F6, termsUseCellValue_idxhYrIU0BAr, termsUseNeighbourValue_idxhYrIU13P$);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean containsSpecies_id6Hz4f3Dh3F6(@NotNull SNode __thisNode__, SNode species) {
    for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Reactant_Terms$Wnv9))) {
      if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), species)) {
        return true;
      }
    }
    for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Product_Terms$WnXb))) {
      if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), species)) {
        return true;
      }
    }
    return false;
  }
  /*package*/ static boolean termsUseCellValue_idxhYrIU0BAr(@NotNull SNode __thisNode__, SNode species) {
    // Check if species is a cellular protein - if yes, then it uses the cell value by default.
    if (SPropertyOperations.getEnum(species, PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39acL, "LOCATION_CELLULAR_INTERIOR"))) {
      return true;
    } else {
      // Check over the reaction terms which have the species in it - if it isn't using the neighbour value, then it must be using the cell value.
      boolean termUsesCellValue = false;
      for (SNode reactantTerm : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Reactant_Terms$Wnv9))) {
        if (!(SPropertyOperations.getBoolean(reactantTerm, PROPS.UsesNeighbourValue$$pnR)) && Objects.equals(SLinkOperations.getTarget(reactantTerm, LINKS.Species_Ref$Wnde), species)) {
          termUsesCellValue = true;
        }
      }
      for (SNode productTerm : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Product_Terms$WnXb))) {
        if (!(SPropertyOperations.getBoolean(productTerm, PROPS.UsesNeighbourValue$$pnR)) && Objects.equals(SLinkOperations.getTarget(productTerm, LINKS.Species_Ref$Wnde), species)) {
          termUsesCellValue = true;
        }
      }
      return termUsesCellValue;
    }
  }
  /*package*/ static boolean termsUseNeighbourValue_idxhYrIU13P$(@NotNull SNode __thisNode__, SNode species) {
    // Check if species is a cellular protein - if yes, then it doesn't use the neighbour value by default.
    if (SPropertyOperations.getEnum(species, PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39acL, "LOCATION_CELLULAR_INTERIOR"))) {
      return false;
    } else {
      // Check over the reaction terms to see if it uses the neighbour value.
      boolean termUsesNeighbourValue = false;
      for (SNode reactantTerm : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Reactant_Terms$Wnv9))) {
        if (SPropertyOperations.getBoolean(reactantTerm, PROPS.UsesNeighbourValue$$pnR) && Objects.equals(SLinkOperations.getTarget(reactantTerm, LINKS.Species_Ref$Wnde), species)) {
          termUsesNeighbourValue = true;
        }
      }
      for (SNode productTerm : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Product_Terms$WnXb))) {
        if (SPropertyOperations.getBoolean(productTerm, PROPS.UsesNeighbourValue$$pnR) && Objects.equals(SLinkOperations.getTarget(productTerm, LINKS.Species_Ref$Wnde), species)) {
          termUsesNeighbourValue = true;
        }
      }
      return termUsesNeighbourValue;
    }
  }

  /*package*/ Reaction__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) containsSpecies_id6Hz4f3Dh3F6(node, (SNode) parameters[0]));
      case 1:
        return (T) ((Boolean) termsUseCellValue_idxhYrIU0BAr(node, (SNode) parameters[0]));
      case 2:
        return (T) ((Boolean) termsUseNeighbourValue_idxhYrIU13P$(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink Species_Ref$Wnde = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2b6159d0ceecf4f7L, "Species_Ref");
    /*package*/ static final SContainmentLink Reactant_Terms$Wnv9 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4f9L, "Reactant_Terms");
    /*package*/ static final SContainmentLink Product_Terms$WnXb = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4fbL, "Product_Terms");
  }

  private static final class PROPS {
    /*package*/ static final SProperty Location$Gx$s = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed5ea1L, "Location");
    /*package*/ static final SProperty UsesNeighbourValue$$pnR = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2c1a564c7a3af7b1L, "UsesNeighbourValue");
  }
}
