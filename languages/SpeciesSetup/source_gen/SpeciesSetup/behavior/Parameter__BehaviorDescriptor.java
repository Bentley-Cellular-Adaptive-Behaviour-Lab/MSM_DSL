package SpeciesSetup.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.math.BigDecimal;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.iets3.core.expr.base.behavior.IETS3ExprEvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.BigInteger;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Parameter__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae05a35L, "SpeciesSetup.structure.Parameter");

  public static final SMethod<Double> get_parameter_value_double_id5ek4S3w7Oxy = new SMethodBuilder<Double>(new SJavaCompoundTypeImpl(Double.TYPE)).name("get_parameter_value_double").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5ek4S3w7Oxy").build();
  public static final SMethod<BigDecimal> get_parameter_value_decimal_id3wWy5vw4PXg = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("get_parameter_value_decimal").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3wWy5vw4PXg").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(get_parameter_value_double_id5ek4S3w7Oxy, get_parameter_value_decimal_id3wWy5vw4PXg);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static double get_parameter_value_double_id5ek4S3w7Oxy(@NotNull SNode __thisNode__) {
    return Parameter__BehaviorDescriptor.get_parameter_value_decimal_id3wWy5vw4PXg.invoke(__thisNode__).doubleValue();
  }
  /*package*/ static BigDecimal get_parameter_value_decimal_id3wWy5vw4PXg(@NotNull SNode __thisNode__) {
    Object value = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(__thisNode__, LINKS.value$2Nrp));
    if (value.getClass() == BigDecimal.class) {
      return ((BigDecimal) value);
    } else if (value.getClass() == BigInteger.class) {
      return new BigDecimal(((BigInteger) value));
    }
    return new BigDecimal(((BigInteger) value));
  }

  /*package*/ Parameter__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Double) get_parameter_value_double_id5ek4S3w7Oxy(node));
      case 1:
        return (T) ((BigDecimal) get_parameter_value_decimal_id3wWy5vw4PXg(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$2Nrp = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae05a35L, 0x375d1bec6ae05a38L, "value");
  }
}
