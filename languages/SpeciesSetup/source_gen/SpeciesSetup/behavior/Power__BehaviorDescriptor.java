package SpeciesSetup.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.iets3.core.expr.base.behavior.IETS3ExprEvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.BigDecimal;
import java.math.BigInteger;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Power__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02cdd12L, "SpeciesSetup.structure.Power");

  public static final SMethod<Double> get_power_exponent_value_id4rNf5SyF6qB = new SMethodBuilder<Double>(new SJavaCompoundTypeImpl(Double.TYPE)).name("get_power_exponent_value").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4rNf5SyF6qB").build();
  public static final SMethod<String> get_power_base_string_id4rNf5SyFc7B = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("get_power_base_string").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4rNf5SyFc7B").build();
  public static final SMethod<Double> get_power_base_value_id4rNf5SyFjKW = new SMethodBuilder<Double>(new SJavaCompoundTypeImpl(Double.TYPE)).name("get_power_base_value").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4rNf5SyFjKW").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(get_power_exponent_value_id4rNf5SyF6qB, get_power_base_string_id4rNf5SyFc7B, get_power_base_value_id4rNf5SyFjKW);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static double get_power_exponent_value_id4rNf5SyF6qB(@NotNull SNode __thisNode__) {
    Object exponent_value = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(__thisNode__, LINKS.exponent$rVo2));
    if (exponent_value.getClass() == BigDecimal.class) {
      return (as_2x6wo3_a0a0a0b0k(exponent_value, BigDecimal.class).doubleValue());
    } else {
      // The exponent has been returned as a BigInteger. 
      return (as_2x6wo3_a0a0b0a1a01(exponent_value, BigInteger.class).doubleValue());
    }
  }
  /*package*/ static String get_power_base_string_id4rNf5SyFc7B(@NotNull SNode __thisNode__) {
    // Used in instances where a species belonging to a power has been defined. 
    Object base_value = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(__thisNode__, LINKS.base$rVQ4));
    if (base_value.getClass() == String.class) {
      return (String) base_value;
    } else {
      return "BASE_STRING_NOT_FOUND";
    }
  }
  /*package*/ static double get_power_base_value_id4rNf5SyFjKW(@NotNull SNode __thisNode__) {
    Object base_value = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(__thisNode__, LINKS.base$rVQ4));
    if (base_value.getClass() == BigDecimal.class) {
      return (as_2x6wo3_a0a0a0b0m(base_value, BigDecimal.class).doubleValue());
    } else {
      return as_2x6wo3_a0a0a0b0m_0(base_value, BigInteger.class).doubleValue();
    }
  }

  /*package*/ Power__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Double) get_power_exponent_value_id4rNf5SyF6qB(node));
      case 1:
        return (T) ((String) get_power_base_string_id4rNf5SyFc7B(node));
      case 2:
        return (T) ((Double) get_power_base_value_id4rNf5SyFjKW(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static <T> T as_2x6wo3_a0a0a0b0k(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_2x6wo3_a0a0b0a1a01(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_2x6wo3_a0a0a0b0m(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_2x6wo3_a0a0a0b0m_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink exponent$rVo2 = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02cdd12L, 0x53941380e02cdd13L, "exponent");
    /*package*/ static final SContainmentLink base$rVQ4 = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02cdd12L, 0x53941380e02cdd15L, "base");
  }
}
