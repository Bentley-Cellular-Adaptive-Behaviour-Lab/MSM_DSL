package SpeciesSetup.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("graphical", "", true, "SpeciesSetup.editor.graphicalSpeciesEditor.graphical"), new ConceptEditorHintImpl("tooltipHint_fjtrzr_a2a", "", false, "SpeciesSetup.editor.GeneratedHints.tooltipHint_fjtrzr_a2a"), new ConceptEditorHintImpl("tooltipHint_fjtrzr_a4a", "", false, "SpeciesSetup.editor.GeneratedHints.tooltipHint_fjtrzr_a4a"), new ConceptEditorHintImpl("tooltipHint_fjtrzr_a6a", "", false, "SpeciesSetup.editor.GeneratedHints.tooltipHint_fjtrzr_a6a"), new ConceptEditorHintImpl("tooltipHint_nkm0p4_b0a", "", false, "SpeciesSetup.editor.GeneratedHints.tooltipHint_nkm0p4_b0a"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Parameter_Expression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Reaction2_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Reaction_NonReversible_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Reaction_Reference_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Reaction_Reversible_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Reaction_Term_Editor());
      case 7:
        return Arrays.asList(new ConceptEditor[]{new Species_Editor(), new Species_tooltipHint_nkm0p4_b0a_Editor()});
      case 8:
        return Arrays.asList(new ConceptEditor[]{new Species_Container_Editor(), new Species_Container_graphical_Editor(), new Species_Container_tooltipHint_fjtrzr_a2a_Editor(), new Species_Container_tooltipHint_fjtrzr_a4a_Editor(), new Species_Container_tooltipHint_fjtrzr_a6a_Editor()});
      case 9:
        return Collections.<ConceptEditor>singletonList(new Species_Expression_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Species_Reference_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Parameter_Expression_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Reaction_Reference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new Species_Reference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae05a35L), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b1fL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x2b6159d0ceea4df1L), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x1f9e4166b23d9462L), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efbaL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x1f9e4166b23d945bL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x2b6159d0ceea4df0L), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510bL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510aL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b12L), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efa3L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b1fL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efbaL), MetaIdFactory.conceptId(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efa3L)).seal();
}
