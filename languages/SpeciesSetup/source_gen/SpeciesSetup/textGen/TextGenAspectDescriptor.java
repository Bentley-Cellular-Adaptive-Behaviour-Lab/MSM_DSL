package SpeciesSetup.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import SpeciesSetup.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Inhibits:
        return new Inhibits_TextGen();
      case LanguageConceptSwitch.IrreversibleReaction:
        return new IrreversibleReaction_TextGen();
      case LanguageConceptSwitch.Modifier:
        return new Modifier_TextGen();
      case LanguageConceptSwitch.ODEDefinitions:
        return new ODEDefinitions_TextGen();
      case LanguageConceptSwitch.ODEStateComponent:
        return new ODEStateComponent_TextGen();
      case LanguageConceptSwitch.ODESystemComponent:
        return new ODESystemComponent_TextGen();
      case LanguageConceptSwitch.Parameter:
        return new Parameter_TextGen();
      case LanguageConceptSwitch.ParameterDefinitionComponent:
        return new ParameterDefinitionComponent_TextGen();
      case LanguageConceptSwitch.ParameterExpression:
        return new ParameterExpression_TextGen();
      case LanguageConceptSwitch.RateDefinition:
        return new RateDefinition_TextGen();
      case LanguageConceptSwitch.RateFunctionsComponent:
        return new RateFunctionsComponent_TextGen();
      case LanguageConceptSwitch.Reaction_Reference:
        return new Reaction_Reference_TextGen();
      case LanguageConceptSwitch.ReversibleReaction:
        return new ReversibleReaction_TextGen();
      case LanguageConceptSwitch.Species:
        return new Species_TextGen();
      case LanguageConceptSwitch.SpeciesContainer:
        return new SpeciesContainer_TextGen();
      case LanguageConceptSwitch.SpeciesDefinitionComponent:
        return new SpeciesDefinitionComponent_TextGen();
      case LanguageConceptSwitch.SpeciesExpression:
        return new SpeciesExpression_TextGen();
      case LanguageConceptSwitch.SpeciesPowerExpression:
        return new SpeciesPowerExpression_TextGen();
      case LanguageConceptSwitch.SpeciesReference:
        return new SpeciesReference_TextGen();
      case LanguageConceptSwitch.Upregulates:
        return new Upregulates_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.SpeciesContainer$Ig)) {
        String fname = getFileName_SpeciesContainer(root);
        String ext = getFileExtension_SpeciesContainer(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_SpeciesContainer(SNode node) {
    return "dsl_Species";
  }
  private static String getFileExtension_SpeciesContainer(SNode node) {
    return "cpp";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpeciesContainer$Ig = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, "SpeciesSetup.structure.SpeciesContainer");
  }
}
