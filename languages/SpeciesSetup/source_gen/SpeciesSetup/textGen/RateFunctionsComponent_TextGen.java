package SpeciesSetup.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import SpeciesSetup.behavior.SpeciesContainer__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class RateFunctionsComponent_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("// Parameter Functions //\n");

    for (SNode parameter : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), LINKS.Parameters$hoyh))) {
      tgs.append("static double calc_");
      tgs.appendNode(parameter);
      tgs.append("_rate(");
      List<SNode> exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), SLinkOperations.getTarget(parameter, LINKS.Expression$Wv16));
      ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), SLinkOperations.getTarget(parameter, LINKS.Expression$Wv16))));
      List<SNode> filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), exprList);

      int count = 0;
      for (SNode expr : ListSequence.fromList(filteredList)) {
        count++;
        if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
          tgs.append("double ");
          tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
        }
        if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
          tgs.append("double ");
          tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
        }
        // Check if we've reached the end of the list of species, if not, add a comma for the next argument. 
        if (count < ListSequence.fromList(filteredList).count()) {
          tgs.append(", ");
        }
      }
      tgs.append(") {\n");
      tgs.append("\treturn ");
      tgs.appendNode(SLinkOperations.getTarget(parameter, LINKS.Expression$Wv16));
      tgs.append(";\n");
      tgs.append("}\n\n");
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpeciesContainer$Ig = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, "SpeciesSetup.structure.SpeciesContainer");
    /*package*/ static final SConcept SpeciesExpression$Vm = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x10098a905c97eb32L, "SpeciesSetup.structure.SpeciesExpression");
    /*package*/ static final SConcept ParameterExpression$CA = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x665d03af898abc61L, "SpeciesSetup.structure.ParameterExpression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink Expression$Wv16 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f1L, 0x2b6159d0ceecf504L, "Expression");
    /*package*/ static final SContainmentLink Parameters$hoyh = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf745L, "Parameters");
  }
}
