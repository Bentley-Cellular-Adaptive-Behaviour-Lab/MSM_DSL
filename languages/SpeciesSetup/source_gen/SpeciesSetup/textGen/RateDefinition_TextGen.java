package SpeciesSetup.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import SpeciesSetup.behavior.SpeciesContainer__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class RateDefinition_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    SNode container = SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.SpeciesContainer$Ig, false, false);
    // Create definitions for each reaction, modifier and production/degradation rate.
    tgs.append("// Rate Definitions //\n");
    for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(container, LINKS.Processes$hnPe))) {
      // Unfortunately, this bit gets quite messy, so I've decided to over-comment rather than under-comment here.
      // We need to include different rate templates depending on whether the reaction is reversible or not.
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.IrreversibleReaction$ja)) {
        // Define the rate and write the first part of the reaction function call.
        tgs.append("\tdouble rate_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh));
        tgs.append(" = calc_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh));
        tgs.append("_rate(");
        // Next, add in the arguments to the function definition.
        // Get all of the unique species and parameters involved in the reaction.
        List<SNode> exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh), LINKS.Expression$Wv16));
        ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh), LINKS.Expression$Wv16))));
        List<SNode> filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(container, exprList);

        int count = 0;
        for (SNode expr : ListSequence.fromList(filteredList)) {
          count++;
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
          }
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
          }
          // Check if we've reached the end of the list, if not, add a comma for the next argument.
          if (count < ListSequence.fromList(filteredList).count()) {
            tgs.append(", ");
          }
        }
        // End the function and start a new line.
        tgs.append(");\n");
      } else if (SNodeOperations.isInstanceOf(process, CONCEPTS.ReversibleReaction$fi)) {
        // Define the forward rate and write the first part of the reaction function call.
        tgs.append("\tdouble rate_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM));
        tgs.append(" = calc_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM));
        tgs.append("_rate(");

        // Next, add in the arguments to the function definition.
        // Get all of the unique species involved and parameters in the forward reaction.
        List<SNode> exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM), LINKS.Expression$Wv16));
        ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM), LINKS.Expression$Wv16))));
        List<SNode> filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(container, exprList);

        int count = 0;
        for (SNode expr : ListSequence.fromList(filteredList)) {
          count++;
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
          }
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
          }
          // Check if we've reached the end of the list of species in the reaction, if not, add a comma for the next argument.
          if (count < ListSequence.fromList(filteredList).count()) {
            tgs.append(", ");
          }
        }
        // End the function and start a new line.
        tgs.append(");\n");

        // Now, do the same for the reverse rate.
        tgs.append("\tdouble rate_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr));
        tgs.append(" = calc_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr));
        tgs.append("_rate(");
        exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr), LINKS.Expression$Wv16));

        ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr), LINKS.Expression$Wv16))));

        filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(container, exprList);

        count = 0;
        for (SNode expr : ListSequence.fromList(filteredList)) {
          count++;
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
          }
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
          }
          if (count < ListSequence.fromList(filteredList).count()) {
            tgs.append(", ");
          }
        }
        // End the function and start a new line.
        tgs.append(");\n");
      } else if (SNodeOperations.isInstanceOf(process, CONCEPTS.Inhibits$am)) {
        // Define the inhibition rate and write the first part of the inhibition function call.
        tgs.append("\tdouble rate_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Inhibits$am), LINKS.Modifier$ZNcM));
        tgs.append(" = calc_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Inhibits$am), LINKS.Modifier$ZNcM));
        tgs.append("_rate(");

        // Next, add in the arguments to the function definition.
        // Get all of the unique species and parameters involved in the inhibition process.
        List<SNode> exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Inhibits$am), LINKS.Modifier$ZNcM), LINKS.Expression$Wv16));

        ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Inhibits$am), LINKS.Modifier$ZNcM), LINKS.Expression$Wv16))));

        List<SNode> filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(container, exprList);

        int count = 0;
        for (SNode expr : ListSequence.fromList(filteredList)) {
          count++;
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
          }
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
          }
          // Check if we've reached the end of the list of species in the inhibition process, if not, add a comma for the next argument.
          if (count < ListSequence.fromList(filteredList).count()) {
            tgs.append(", ");
          }
        }
        // End the function and start a new line.
        tgs.append(");\n");
      } else if (SNodeOperations.isInstanceOf(process, CONCEPTS.Upregulates$aP)) {
        // Define the regulation rate and write the first part of the regulation function call.
        tgs.append("\tdouble rate_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Upregulates$aP), LINKS.Modifier$ZNcM));
        tgs.append(" = calc_");
        tgs.appendNode(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Upregulates$aP), LINKS.Modifier$ZNcM));
        tgs.append("_rate(");

        // Next, add in the arguments to the function definition.
        // Get all of the unique species and parameters involved in the upregulation process.
        List<SNode> exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Upregulates$aP), LINKS.Modifier$ZNcM), LINKS.Expression$Wv16));

        ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(container, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Upregulates$aP), LINKS.Modifier$ZNcM), LINKS.Expression$Wv16))));

        List<SNode> filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(container, exprList);

        int count = 0;
        for (SNode expr : ListSequence.fromList(filteredList)) {
          count++;
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
          }
          if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
            tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
          }
          // Check if we've reached the end of the list of species in the inhibition process, if not, add a comma for the next argument.
          if (count < ListSequence.fromList(filteredList).count()) {
            tgs.append(", ");
          }
        }
        // End the function and start a new line.
        tgs.append(");\n");
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpeciesContainer$Ig = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, "SpeciesSetup.structure.SpeciesContainer");
    /*package*/ static final SConcept IrreversibleReaction$ja = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfaeaL, "SpeciesSetup.structure.IrreversibleReaction");
    /*package*/ static final SConcept SpeciesExpression$Vm = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x10098a905c97eb32L, "SpeciesSetup.structure.SpeciesExpression");
    /*package*/ static final SConcept ParameterExpression$CA = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x665d03af898abc61L, "SpeciesSetup.structure.ParameterExpression");
    /*package*/ static final SConcept ReversibleReaction$fi = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfae2L, "SpeciesSetup.structure.ReversibleReaction");
    /*package*/ static final SConcept Inhibits$am = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c6049ceffcL, "SpeciesSetup.structure.Inhibits");
    /*package*/ static final SConcept Upregulates$aP = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c6049ceffdL, "SpeciesSetup.structure.Upregulates");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink Rate$Otxh = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfaeaL, 0x665d03af898abc5aL, "Rate");
    /*package*/ static final SContainmentLink Expression$Wv16 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f1L, 0x2b6159d0ceecf504L, "Expression");
    /*package*/ static final SReferenceLink ForwardRate$OzkM = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfae2L, 0x665d03af898abc5eL, "ForwardRate");
    /*package*/ static final SReferenceLink ReverseRate$OtVr = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfae2L, 0x665d03af898abc5cL, "ReverseRate");
    /*package*/ static final SReferenceLink Modifier$ZNcM = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x54e0a6c604985a9cL, "Modifier");
    /*package*/ static final SContainmentLink Processes$hnPe = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf742L, "Processes");
  }
}
