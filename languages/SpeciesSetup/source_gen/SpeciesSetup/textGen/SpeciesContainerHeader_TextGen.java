package SpeciesSetup.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import SpeciesSetup.behavior.SpeciesContainer__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class SpeciesContainerHeader_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    SNode tissueContainer = SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.target$JA2H), LINKS.Tissue_Container$Ds8T);
    List<SNode> cellTypes = ListSequence.fromList(SLinkOperations.getChildren(tissueContainer, LINKS.cell_types$$$44)).toListSequence();
    SNode speciesContainer = SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.target$JA2H);

    String nameString = SPropertyOperations.getString(tissueContainer, PROPS.name$MnvL);

    tgs.append("#ifndef SRC_SPRINGAGENT_ODE_H\n");
    tgs.append("#define SRC_SPRINGAGENT_ODE_H\n\n");

    tgs.append("#include <boost/array.hpp>\n");
    tgs.append("#include <boost/numeric/odeint.hpp>\n");
    tgs.append("#include \"memAgents.h\"\n\n");

    tgs.append("namespace odeint = boost::numeric::odeint;\n");


    for (SNode cellType : ListSequence.fromList(cellTypes)) {
      tgs.append("boost::array<double, ");
      tgs.append(String.valueOf(SLinkOperations.getChildren(cellType, LINKS.Owned_Species$sIXq).size()));
      tgs.append("> ");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_ode_states;\n");
    }

    tgs.append("class ODEs {\n");
    tgs.append("private:\n");
    for (SNode cellType : ListSequence.fromList(cellTypes)) {
      tgs.append("\todeint::runge_kutta4< ");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_ode_states >");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_stepper;\n");
    }
    tgs.append("public:\n");
    tgs.append("\tODEs();\n");
    tgs.append("\tvoid check_ODEs(std::string cell_type_name, MemAgent *memAgent);\n");

    for (SNode cellType : ListSequence.fromList(cellTypes)) {
      tgs.append("\tstatic void ");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_system(const ");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_ode_states &x, ");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_ode_states &dxdt, ");
      tgs.append("double t);\n");
      tgs.append("\tvoid ");
      tgs.append(SPropertyOperations.getString(cellType, PROPS.name$MnvL));
      tgs.append("_run_ODEs(MemAgent *memAgent);\n");
    }
    tgs.append("};\n");

    for (SNode parameter : ListSequence.fromList(SLinkOperations.getChildren(speciesContainer, LINKS.Parameters$hoyh))) {
      tgs.append("static double calc_");
      tgs.appendNode(parameter);
      tgs.append("_rate(");
      List<SNode> exprList = SpeciesContainer__BehaviorDescriptor.getExprSpecies_idJ83UdHe8mr.invoke(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), SLinkOperations.getTarget(parameter, LINKS.Expression$Wv16));
      ListSequence.fromList(exprList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getExprParameters_id3eqdKU_qMQ$.invoke(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), SLinkOperations.getTarget(parameter, LINKS.Expression$Wv16))));
      List<SNode> filteredList = SpeciesContainer__BehaviorDescriptor.filterExpressionList_id3eqdKU_H9WR.invoke(SNodeOperations.as(SNodeOperations.getParent(ctx.getPrimaryInput()), CONCEPTS.SpeciesContainer$Ig), exprList);

      int count = 0;
      for (SNode expr : ListSequence.fromList(filteredList)) {
        count++;
        if (SNodeOperations.isInstanceOf(expr, CONCEPTS.SpeciesExpression$Vm)) {
          tgs.append("double ");
          tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.SpeciesExpression$Vm));
        }
        if (SNodeOperations.isInstanceOf(expr, CONCEPTS.ParameterExpression$CA)) {
          tgs.append("double ");
          tgs.appendNode(SNodeOperations.as(expr, CONCEPTS.ParameterExpression$CA));
        }
        // Check if we've reached the end of the list of species, if not, add a comma for the next argument.
        if (count < ListSequence.fromList(filteredList).count()) {
          tgs.append(", ");
        }
      }
      tgs.append(");\n");
    }

    tgs.append("//SRC_SPRINGAGENT_ODE_H");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$JA2H = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x3ac95f984427833dL, 0x3ac95f9844313214L, "target");
    /*package*/ static final SReferenceLink Tissue_Container$Ds8T = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x6f82e96f79a54de4L, "Tissue_Container");
    /*package*/ static final SContainmentLink cell_types$$$44 = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef85L, 0x4369a03b1c6088edL, "cell_types");
    /*package*/ static final SContainmentLink Owned_Species$sIXq = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef8bL, 0x2b13de3ac0e23edfL, "Owned_Species");
    /*package*/ static final SContainmentLink Expression$Wv16 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f1L, 0x2b6159d0ceecf504L, "Expression");
    /*package*/ static final SContainmentLink Parameters$hoyh = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf745L, "Parameters");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpeciesContainer$Ig = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, "SpeciesSetup.structure.SpeciesContainer");
    /*package*/ static final SConcept SpeciesExpression$Vm = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x10098a905c97eb32L, "SpeciesSetup.structure.SpeciesExpression");
    /*package*/ static final SConcept ParameterExpression$CA = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x665d03af898abc61L, "SpeciesSetup.structure.ParameterExpression");
  }
}
