package SpeciesSetup.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Objects;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class checkNoDuplicateReactants_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkNoDuplicateReactants_NonTypesystemRule() {
  }
  public void applyRule(final SNode reaction, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode query_reactant : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.reactants$nVHZ))) {
      String query_name = SPropertyOperations.getString(query_reactant, PROPS.name$MnvL);
      for (SNode target_reactant : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.reactants$nVHZ))) {
        String target_name = SPropertyOperations.getString(target_reactant, PROPS.name$MnvL);
        if (query_name == target_name && !(Objects.equals(query_reactant, target_reactant))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(reaction, query_name + " has been duplicated as a reactant. Please remove one instance from the left-hand side of the reaction.", "r:57433058-d722-40a4-a625-e42cb77ddbdd(SpeciesSetup.typesystem)", "2278330370829611912", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Reaction$lr;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink reactants$nVHZ = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, 0x1f9e4166b23fbfa5L, "reactants");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reaction$lr = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae0510cL, "SpeciesSetup.structure.Reaction");
  }
}
