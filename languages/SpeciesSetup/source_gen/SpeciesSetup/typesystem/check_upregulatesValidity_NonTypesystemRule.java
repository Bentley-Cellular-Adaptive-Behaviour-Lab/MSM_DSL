package SpeciesSetup.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_upregulatesValidity_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_upregulatesValidity_NonTypesystemRule() {
  }
  public void applyRule(final SNode upregulates, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    try {
      // Reactant is an environment protein.
      if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Source$9HG6), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39a8L, "LOCATION_EXTRACELLULAR_ENVIRONMENT"))) {
        // Reactant is an environment protein - check that it isn't interacting with an environment, cellular or junction protein.
        if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39a8L, "LOCATION_EXTRACELLULAR_ENVIRONMENT")) || SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39acL, "LOCATION_CELLULAR_INTERIOR")) || SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39b0L, "LOCATION_CELL_JUNCTION"))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(upregulates, "Environment proteins cannot interact with protein " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + ". Check " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + "'s location is not the environment, the cell interior or cell junction.", "r:9e0fbf2a-b9f3-458b-86a2-82f541ac8497(SpeciesSetup.typesystem)", "665779027268539420", null, errorTarget);
          }
        }
      } else if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Source$9HG6), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39a9L, "LOCATION_MEMBRANE"))) {
        // Reactant is a membrane protein - check that it isn't interacting with a junction protein. 
        if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39b0L, "LOCATION_CELL_JUNCTION"))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(upregulates, "Membrane proteins cannot interact with protein " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + ". Check " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + "'s location is not the cell junction.", "r:9e0fbf2a-b9f3-458b-86a2-82f541ac8497(SpeciesSetup.typesystem)", "665779027268539505", null, errorTarget);
          }
        }
      } else if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Source$9HG6), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39acL, "LOCATION_CELLULAR_INTERIOR"))) {
        // Reactant is a cellular protein - check that it isn't interacting with an environment protein.
        if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39a8L, "LOCATION_EXTRACELLULAR_ENVIRONMENT"))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(upregulates, "Cell interior proteins cannot interact with protein " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + ". Check " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + "'s location is not the environment.", "r:9e0fbf2a-b9f3-458b-86a2-82f541ac8497(SpeciesSetup.typesystem)", "665779027268539567", null, errorTarget);
          }
        }
      } else if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Source$9HG6), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39b0L, "LOCATION_CELL_JUNCTION"))) {
        // Reactant is a junction protein - check that it isn't interacting with an environment or membrane proteins.
        if (SPropertyOperations.getEnum(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39a8L, "LOCATION_EXTRACELLULAR_ENVIRONMENT"))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(upregulates, "Cell junction proteins cannot interact with protein " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + ". Check " + SPropertyOperations.getString(SLinkOperations.getTarget(upregulates, LINKS.Target$9C3I), PROPS.name$MnvL) + "'s location is not the environment or the membrane.", "r:9e0fbf2a-b9f3-458b-86a2-82f541ac8497(SpeciesSetup.typesystem)", "665779027268539631", null, errorTarget);
          }
        }
      } else {
        IllegalArgumentException exception = new IllegalArgumentException();
        throw exception;
      }
    } catch (IllegalArgumentException exception) {
      System.out.println("Error - upregulation validity check called on node with no location.");
      exception.printStackTrace();
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Upregulates$aP;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink Target$9C3I = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x54e0a6c6049cf06aL, "Target");
    /*package*/ static final SReferenceLink Source$9HG6 = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x54e0a6c6049cf06dL, "Source");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty Location$Gx$s = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed5ea1L, "Location");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Upregulates$aP = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c6049ceffdL, "SpeciesSetup.structure.Upregulates");
  }
}
