package SpeciesSetup.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_INode;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_Parameter_Expression;
  private ConceptPresentation props_Power;
  private ConceptPresentation props_Product_Expression;
  private ConceptPresentation props_Rate;
  private ConceptPresentation props_Reactant_Expression;
  private ConceptPresentation props_Reaction;
  private ConceptPresentation props_Reaction2;
  private ConceptPresentation props_Reaction_Expression;
  private ConceptPresentation props_Reaction_NonReversible;
  private ConceptPresentation props_Reaction_Reference;
  private ConceptPresentation props_Reaction_Reversible;
  private ConceptPresentation props_Reaction_Term;
  private ConceptPresentation props_Species;
  private ConceptPresentation props_Species_Container;
  private ConceptPresentation props_Species_Expression;
  private ConceptPresentation props_Species_Reference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.INode:
        if (props_INode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_INode = cpb.create();
        }
        return props_INode;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.Parameter_Expression:
        if (props_Parameter_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter_Expression = cpb.create();
        }
        return props_Parameter_Expression;
      case LanguageConceptSwitch.Power:
        if (props_Power == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Power");
          props_Power = cpb.create();
        }
        return props_Power;
      case LanguageConceptSwitch.Product_Expression:
        if (props_Product_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Product_Expression");
          props_Product_Expression = cpb.create();
        }
        return props_Product_Expression;
      case LanguageConceptSwitch.Rate:
        if (props_Rate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Rate");
          props_Rate = cpb.create();
        }
        return props_Rate;
      case LanguageConceptSwitch.Reactant_Expression:
        if (props_Reactant_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Reactant_Expression");
          props_Reactant_Expression = cpb.create();
        }
        return props_Reactant_Expression;
      case LanguageConceptSwitch.Reaction:
        if (props_Reaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Reaction = cpb.create();
        }
        return props_Reaction;
      case LanguageConceptSwitch.Reaction2:
        if (props_Reaction2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Reaction2 = cpb.create();
        }
        return props_Reaction2;
      case LanguageConceptSwitch.Reaction_Expression:
        if (props_Reaction_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Reaction_Expression = cpb.create();
        }
        return props_Reaction_Expression;
      case LanguageConceptSwitch.Reaction_NonReversible:
        if (props_Reaction_NonReversible == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Reaction_NonReversible = cpb.create();
        }
        return props_Reaction_NonReversible;
      case LanguageConceptSwitch.Reaction_Reference:
        if (props_Reaction_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efbaL, 0x6f8f49e54f57efbbL, "Reaction", "", "");
          props_Reaction_Reference = cpb.create();
        }
        return props_Reaction_Reference;
      case LanguageConceptSwitch.Reaction_Reversible:
        if (props_Reaction_Reversible == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Reaction_Reversible = cpb.create();
        }
        return props_Reaction_Reversible;
      case LanguageConceptSwitch.Reaction_Term:
        if (props_Reaction_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Reaction_Term");
          props_Reaction_Term = cpb.create();
        }
        return props_Reaction_Term;
      case LanguageConceptSwitch.Species:
        if (props_Species == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Species = cpb.create();
        }
        return props_Species;
      case LanguageConceptSwitch.Species_Container:
        if (props_Species_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Species_Container = cpb.create();
        }
        return props_Species_Container;
      case LanguageConceptSwitch.Species_Expression:
        if (props_Species_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Species_Expression = cpb.create();
        }
        return props_Species_Expression;
      case LanguageConceptSwitch.Species_Reference:
        if (props_Species_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x6f8f49e54f57efa3L, 0x6f8f49e54f57efb8L, "Species", "", "");
          props_Species_Reference = cpb.create();
        }
        return props_Species_Reference;
    }
    return null;
  }
}
