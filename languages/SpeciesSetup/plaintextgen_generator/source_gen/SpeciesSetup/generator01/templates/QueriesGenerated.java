package SpeciesSetup.generator01.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import SpeciesSetup.behavior.SpeciesContainer__BehaviorDescriptor;
import SpeciesSetup.behavior.Parameter__BehaviorDescriptor;
import java.util.ArrayList;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.TemplateVarContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import jetbrains.mps.generator.impl.query.VariableValueQuery;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_4(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_5(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_6(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_7(final PropertyMacroContext _context) {
    return String.valueOf(SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$nKRa));
  }
  public static Object propertyMacro_GetValue_1_8(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_9(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_10(final PropertyMacroContext _context) {
    String resultString = "";
    int binIndex = SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$LsIb);
    SNode binExpr = SLinkOperations.getTarget(_context.getNode(), LINKS.target$nTHx);
    if (SNodeOperations.isInstanceOf(binExpr, CONCEPTS.SpeciesExpression$Vm)) {
      resultString += SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(binExpr, CONCEPTS.SpeciesExpression$Vm), LINKS.Species$uQ2a), PROPS.name$MnvL);
    }
    if (SNodeOperations.isInstanceOf(binExpr, CONCEPTS.ParameterExpression$CA)) {
      resultString += SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(binExpr, CONCEPTS.ParameterExpression$CA), LINKS.Parameter$bXmh), PROPS.name$MnvL);
    }
    if (binIndex < ListSequence.fromList(((List<SNode>) _context.getVariable("var:args"))).count() - 1) {
      resultString += ", ";
    }
    return resultString;
  }
  public static Object propertyMacro_GetValue_1_11(final PropertyMacroContext _context) {
    return String.valueOf(SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$nKRa));
  }
  public static Object propertyMacro_GetValue_1_12(final PropertyMacroContext _context) {
    String zeroString = "";
    if (Objects.equals(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.ReactsInProcess$_Wy1)).count(), 0) && Objects.equals(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.ProductOfProcess$_X03)).count(), 0) && (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.Degradation_Term$Cd2S) == null) && (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.Production_Term$Cs3S) == null) && ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.ModifiedByProcess$uVT0)).isEmpty()) {
      zeroString += "0";
    }
    return zeroString;
  }
  public static Object propertyMacro_GetValue_1_13(final PropertyMacroContext _context) {
    String prodString = "";
    if ((SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.Production_Term$Cs3S) != null)) {
      prodString += "+" + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.Production_Term$Cs3S), PROPS.name$MnvL);
    }
    return prodString;
  }
  public static Object propertyMacro_GetValue_1_14(final PropertyMacroContext _context) {
    // Testing reactant terms.
    SNode reaction_Reference = _context.getNode();
    String reactantString = "";
    SNode reaction = SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.Reaction_Reference$_p), LINKS.ReactionReference$PJYZ);
    if (SNodeOperations.isInstanceOf(reaction, CONCEPTS.IrreversibleReaction$ja)) {
      reactantString = "-" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(reaction, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh), PROPS.name$MnvL) + "*";
      for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Reactant_Terms$Wnv9))) {
        if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), SNodeOperations.getParent(_context.getNode()))) {
          reactantString += String.valueOf(SPropertyOperations.getInteger(term, PROPS.Stoichiometry$Wmha));
        }
      }
    }
    if (SNodeOperations.isInstanceOf(reaction, CONCEPTS.ReversibleReaction$fi)) {
      reactantString = "-" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(reaction, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM), PROPS.name$MnvL) + "*";
      for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Reactant_Terms$Wnv9))) {
        if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), SNodeOperations.getParent(_context.getNode()))) {
          reactantString += String.valueOf(SPropertyOperations.getInteger(term, PROPS.Stoichiometry$Wmha));
        }
      }
      reactantString += "+" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(reaction, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr), PROPS.name$MnvL) + "*";
      for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Reactant_Terms$Wnv9))) {
        if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), SNodeOperations.getParent(_context.getNode()))) {
          reactantString += String.valueOf(SPropertyOperations.getInteger(term, PROPS.Stoichiometry$Wmha));
        }
      }
    }
    return reactantString;
  }
  public static Object propertyMacro_GetValue_1_15(final PropertyMacroContext _context) {
    String degString = "";
    if ((SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.Degradation_Term$Cd2S) != null)) {
      degString += "-" + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.Degradation_Term$Cd2S), PROPS.name$MnvL);
    }
    return degString;
  }
  public static Object propertyMacro_GetValue_1_16(final PropertyMacroContext _context) {
    String productString = "";
    SNode reaction = SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.Reaction_Reference$_p), LINKS.ReactionReference$PJYZ);
    if (SNodeOperations.isInstanceOf(reaction, CONCEPTS.IrreversibleReaction$ja)) {
      productString = "+" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(reaction, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh), PROPS.name$MnvL) + "*";
      for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Product_Terms$WnXb))) {
        if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), SNodeOperations.getParent(_context.getNode()))) {
          productString += String.valueOf(SPropertyOperations.getInteger(term, PROPS.Stoichiometry$Wmha));
        }
      }
    }
    if (SNodeOperations.isInstanceOf(reaction, CONCEPTS.ReversibleReaction$fi)) {
      productString = "+" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(reaction, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM), PROPS.name$MnvL) + "*";
      for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Product_Terms$WnXb))) {
        if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), SNodeOperations.getParent(_context.getNode()))) {
          productString += String.valueOf(SPropertyOperations.getInteger(term, PROPS.Stoichiometry$Wmha));
        }
      }
      productString += "_" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(reaction, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr), PROPS.name$MnvL) + "*";
      for (SNode term : ListSequence.fromList(SLinkOperations.getChildren(reaction, LINKS.Product_Terms$WnXb))) {
        if (Objects.equals(SLinkOperations.getTarget(term, LINKS.Species_Ref$Wnde), SNodeOperations.getParent(_context.getNode()))) {
          productString += String.valueOf(SPropertyOperations.getInteger(term, PROPS.Stoichiometry$Wmha));
        }
      }
    }
    return productString;
  }
  public static Object propertyMacro_GetValue_1_17(final PropertyMacroContext _context) {
    String argString = "";
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.ModifierReference$8K), LINKS.target$hsJa), CONCEPTS.Inhibits$am)) {
      argString += "-" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.ModifierReference$8K), LINKS.target$hsJa), PROPS.name$MnvL);
    }
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.ModifierReference$8K), LINKS.target$hsJa), CONCEPTS.Upregulates$aP)) {
      argString += "+" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.ModifierReference$8K), LINKS.target$hsJa), PROPS.name$MnvL);
    }
    return argString;
  }
  public static Object propertyMacro_GetValue_1_18(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_19(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_20(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_21(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_22(final PropertyMacroContext _context) {
    return String.valueOf(SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$nKRa));
  }
  public static Object propertyMacro_GetValue_1_23(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_24(final PropertyMacroContext _context) {
    return String.valueOf(SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$nKRa));
  }
  public static Object propertyMacro_GetValue_1_25(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_26(final PropertyMacroContext _context) {
    return String.valueOf(SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$nKRa));
  }
  public static Object propertyMacro_GetValue_1_27(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_28(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_29(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_30(final PropertyMacroContext _context) {
    return String.valueOf(SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$nKRa));
  }
  public static Object propertyMacro_GetValue_1_31(final PropertyMacroContext _context) {
    if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.UsesValue$4P_Q), 0x54e0e23243ed3234L)) {
      return "true";
    } else if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.UsesValue$4P_Q), 0x54e0e23243ed3235L)) {
      return "false";
    } else {
      return "VALUE_NOT_FOUND";
    }
  }
  public static Object propertyMacro_GetValue_1_32(final PropertyMacroContext _context) {
    if (SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.Location$Gx$s).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceed39a7L, "SpeciesSetup.structure.SpeciesLocation"), 0x2b6159d0ceed39b0L, "LOCATION_CELL_JUNCTION"))) {
      return "true";
    } else {
      return "false";
    }
  }
  public static Object propertyMacro_GetValue_1_33(final PropertyMacroContext _context) {
    return (String) SpeciesContainer__BehaviorDescriptor.fixName_id1IP6pj5_cgV.invoke(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.SpeciesContainer$Ig), SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL));
  }
  public static Object propertyMacro_GetValue_1_34(final PropertyMacroContext _context) {
    String resultString = "";
    int binIndex = SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$LsIb);
    SNode binExpr = SLinkOperations.getTarget(_context.getNode(), LINKS.target$nTHx);
    if (SNodeOperations.isInstanceOf(binExpr, CONCEPTS.SpeciesExpression$Vm)) {
      resultString += "double " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(binExpr, CONCEPTS.SpeciesExpression$Vm), LINKS.Species$uQ2a), PROPS.name$MnvL);
    }
    if (SNodeOperations.isInstanceOf(binExpr, CONCEPTS.ParameterExpression$CA)) {
      resultString += "double " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(binExpr, CONCEPTS.ParameterExpression$CA), LINKS.Parameter$bXmh), PROPS.name$MnvL);
    }
    if (binIndex < ListSequence.fromList(((List<SNode>) _context.getVariable("var:args"))).count() - 1) {
      resultString += ", ";
    }
    return resultString;
  }
  public static Object propertyMacro_GetValue_1_35(final PropertyMacroContext _context) {
    // CONTSTRUCTING EXPRESSION STRING
    return (String) Parameter__BehaviorDescriptor.constructExpressionString_id1IP6pj5tqCR.invoke(_context.getNode());
  }
  public static Object propertyMacro_GetValue_1_36(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    List<SNode> relevantSpecies = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    SNode speciesContainer = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);
    ListSequence.fromList(relevantSpecies).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getSystemSpecies_id2AP3$9HzARu.invoke(speciesContainer, _context.getNode())));
    return String.valueOf(ListSequence.fromList(relevantSpecies).distinct().count());
  }
  public static Object propertyMacro_GetValue_2_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_4(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_5(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_6(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_7(final PropertyMacroContext _context) {
    // TESTING HEADER ARGS
    String resultString = "";
    int binIndex = SPropertyOperations.getInteger(_context.getNode(), PROPS.binIndex$LsIb);
    SNode binExpr = SLinkOperations.getTarget(_context.getNode(), LINKS.target$nTHx);
    if (SNodeOperations.isInstanceOf(binExpr, CONCEPTS.SpeciesExpression$Vm)) {
      resultString += "double " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(binExpr, CONCEPTS.SpeciesExpression$Vm), LINKS.Species$uQ2a), PROPS.name$MnvL);
    }
    if (SNodeOperations.isInstanceOf(binExpr, CONCEPTS.ParameterExpression$CA)) {
      resultString += "double " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(binExpr, CONCEPTS.ParameterExpression$CA), LINKS.Parameter$bXmh), PROPS.name$MnvL);
    }
    if (binIndex < ListSequence.fromList(((List<SNode>) _context.getVariable("var:args"))).count() - 1) {
      resultString += ", ";
    }
    return resultString;
  }
  public static Object propertyMacro_GetValue_2_8(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static boolean ifMacro_Condition_1_0(final IfMacroContext _context) {
    if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.Location$Gx$s), 0x2b6159d0ceed39a8L)) {
      return true;
    } else {
      return false;
    }
  }
  public static boolean ifMacro_Condition_1_1(final IfMacroContext _context) {
    if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.Location$Gx$s), 0x2b6159d0ceed39a9L) || SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.Location$Gx$s), 0x2b6159d0ceed39acL)) {
      return true;
    } else {
      return false;
    }
  }
  public static boolean ifMacro_Condition_1_2(final IfMacroContext _context) {
    if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), PROPS.Location$Gx$s), 0x2b6159d0ceed39b0L)) {
      return true;
    } else {
      return false;
    }
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.Tissue_Container$Ds8T), LINKS.cell_types$$$44);
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> relevantSpecies = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    SNode speciesContainer = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);
    ListSequence.fromList(relevantSpecies).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getSystemSpecies_id2AP3$9HzARu.invoke(speciesContainer, _context.getNode())));
    int count = 0;
    for (SNode species : ListSequence.fromList(relevantSpecies).distinct()) {
      SNode newBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, "SpeciesSetup.structure.SpeciesBin"));
      SLinkOperations.setTarget(newBin, LINKS.target$nL6b, species);
      SPropertyOperations.set(newBin, PROPS.binIndex$nKRa, count);
      ListSequence.fromList(bins).addElement(newBin);
      count++;
    }
    return bins;
  }
  public static Iterable<SNode> sourceNodesQuery_1_2(final SourceSubstituteMacroNodesContext _context) {
    return ((List<SNode>) _context.getVariable("var:args"));
  }
  public static Iterable<SNode> sourceNodesQuery_1_3(final SourceSubstituteMacroNodesContext _context) {
    // TODO: ONLY GET A LIST OF PARAMETERS THAT ARE INVOLVED IN THE REACTIONS.
    List<SNode> paramList = ListSequence.fromList(new ArrayList<SNode>());
    SNode container = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);

    List<SNode> relevantSpecies = ListSequence.fromList(new ArrayList<SNode>());
    SNode speciesContainer = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);
    ListSequence.fromList(relevantSpecies).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getSystemSpecies_id2AP3$9HzARu.invoke(speciesContainer, _context.getNode())));
    ListSequence.fromList(relevantSpecies).distinct();

    for (SNode process : ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getPotentialProcesses_id2AP3$9HzIup.invoke(container, _context.getNode())).distinct()) {
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.Inhibits$am)) {
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Inhibits$am), LINKS.Modifier$ZNcM));
      }
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.Upregulates$aP)) {
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.Upregulates$aP), LINKS.Modifier$ZNcM));
      }
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.IrreversibleReaction$ja)) {
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.IrreversibleReaction$ja), LINKS.Rate$Otxh));
      }
      if (SNodeOperations.isInstanceOf(process, CONCEPTS.ReversibleReaction$fi)) {
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ForwardRate$OzkM));
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(SNodeOperations.as(process, CONCEPTS.ReversibleReaction$fi), LINKS.ReverseRate$OtVr));
      }
    }

    for (SNode species : ListSequence.fromList(relevantSpecies)) {
      if ((SLinkOperations.getTarget(species, LINKS.Degradation_Term$Cd2S) != null)) {
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(species, LINKS.Degradation_Term$Cd2S));
      }
      if ((SLinkOperations.getTarget(species, LINKS.Production_Term$Cs3S) != null)) {
        ListSequence.fromList(paramList).addElement(SLinkOperations.getTarget(species, LINKS.Production_Term$Cs3S));
      }
    }

    List<SNode> sortedList = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(sortedList).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.sortParams_id1MpPQ9imxeo.invoke(container, paramList)));
    return sortedList;
  }
  public static Iterable<SNode> sourceNodesQuery_1_4(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> reactionRefs = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(reactionRefs).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.ReactsInProcess$_Wy1)));
    return reactionRefs;
  }
  public static Iterable<SNode> sourceNodesQuery_1_5(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> productRefs = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(productRefs).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.ProductOfProcess$_X03)));
    return productRefs;
  }
  public static Iterable<SNode> sourceNodesQuery_1_6(final SourceSubstituteMacroNodesContext _context) {
    Iterable<SNode> modifierProcesses = Sequence.fromIterable(Collections.<SNode>emptyList());
    Sequence.fromIterable(modifierProcesses).concat(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$nL6b), LINKS.ModifiedByProcess$uVT0)));
    return Sequence.fromIterable(modifierProcesses).distinct();
  }
  public static Iterable<SNode> sourceNodesQuery_1_7(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> relevantSpecies = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    SNode speciesContainer = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);
    ListSequence.fromList(relevantSpecies).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getSystemSpecies_id2AP3$9HzARu.invoke(speciesContainer, _context.getNode())));
    int count = 0;
    for (SNode species : ListSequence.fromList(relevantSpecies).distinct()) {
      SNode newBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, "SpeciesSetup.structure.SpeciesBin"));
      SLinkOperations.setTarget(newBin, LINKS.target$nL6b, species);
      SPropertyOperations.set(newBin, PROPS.binIndex$nKRa, count);
      ListSequence.fromList(bins).addElement(newBin);
      count++;
    }
    return bins;
  }
  public static Iterable<SNode> sourceNodesQuery_1_8(final SourceSubstituteMacroNodesContext _context) {
    // Testing current states
    List<SNode> relevantSpecies = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    SNode speciesContainer = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);
    ListSequence.fromList(relevantSpecies).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getSystemSpecies_id2AP3$9HzARu.invoke(speciesContainer, _context.getNode())));
    int count = 0;
    for (SNode species : ListSequence.fromList(relevantSpecies).distinct()) {
      SNode newBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, "SpeciesSetup.structure.SpeciesBin"));
      SLinkOperations.setTarget(newBin, LINKS.target$nL6b, species);
      SPropertyOperations.set(newBin, PROPS.binIndex$nKRa, count);
      ListSequence.fromList(bins).addElement(newBin);
      count++;
    }
    return bins;
  }
  public static Iterable<SNode> sourceNodesQuery_1_9(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> relevantSpecies = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    SNode speciesContainer = SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), CONCEPTS.Tissue_And_Cell_Container$ni), LINKS.Species_Container$u7EZ);
    ListSequence.fromList(relevantSpecies).addSequence(ListSequence.fromList(SpeciesContainer__BehaviorDescriptor.getSystemSpecies_id2AP3$9HzARu.invoke(speciesContainer, _context.getNode())));
    int count = 0;
    for (SNode species : ListSequence.fromList(relevantSpecies).distinct()) {
      SNode newBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, "SpeciesSetup.structure.SpeciesBin"));
      SLinkOperations.setTarget(newBin, LINKS.target$nL6b, species);
      SPropertyOperations.set(newBin, PROPS.binIndex$nKRa, count);
      ListSequence.fromList(bins).addElement(newBin);
      count++;
    }
    return bins;
  }
  public static Iterable<SNode> sourceNodesQuery_1_10(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.Tissue_Container$Ds8T), LINKS.cell_types$$$44);
  }
  public static Iterable<SNode> sourceNodesQuery_1_11(final SourceSubstituteMacroNodesContext _context) {
    return ((List<SNode>) _context.getVariable("var:args"));
  }
  public static Iterable<SNode> sourceNodesQuery_1_12(final SourceSubstituteMacroNodesContext _context) {
    // LOOPING OVER PARAMETERS
    List<SNode> params = SLinkOperations.getChildren(_context.getNode(), LINKS.Parameters$hoyh);
    return SLinkOperations.getChildren(_context.getNode(), LINKS.Parameters$hoyh);
  }
  public static Iterable<SNode> sourceNodesQuery_2_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$JA2H), LINKS.Tissue_Container$Ds8T), LINKS.cell_types$$$44);
  }
  public static Iterable<SNode> sourceNodesQuery_2_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.target$JA2H), LINKS.Tissue_Container$Ds8T), LINKS.cell_types$$$44);
  }
  public static Iterable<SNode> sourceNodesQuery_2_2(final SourceSubstituteMacroNodesContext _context) {
    return ((List<SNode>) _context.getVariable("var:args"));
  }
  public static Iterable<SNode> sourceNodesQuery_2_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.target$JA2H), LINKS.Parameters$hoyh);
  }
  public static void mappingScript_CodeBlock_3(final MappingScriptContext _context) {
    // Creates species header nodes for each species container in the model.
    List<SNode> containers = SModelOperations.nodes(_context.getModel(), CONCEPTS.SpeciesContainer$Ig);
    for (SNode container : containers) {
      SNode speciesHeader = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x3ac95f984427833dL, "SpeciesSetup.structure.SpeciesContainerHeader"));
      String name = SPropertyOperations.getString(container, PROPS.name$MnvL) + "_header";
      SPropertyOperations.assign(speciesHeader, PROPS.name$MnvL, name);
      SLinkOperations.setTarget(speciesHeader, LINKS.target$JA2H, container);
      SModelOperations.addRootNode(_context.getModel(), speciesHeader);
    }
  }
  public static void mappingScript_CodeBlock_4(final MappingScriptContext _context) {
    List<SNode> containers = SModelOperations.nodes(_context.getModel(), CONCEPTS.SpeciesContainer$Ig);
    for (SNode container : ListSequence.fromList(containers)) {
      for (SNode species : ListSequence.fromList(SLinkOperations.getChildren(container, LINKS.Species$hnnc))) {
        SpeciesContainer__BehaviorDescriptor.fixName_id1IP6pj5_cgV.invoke(container, SPropertyOperations.getString(species, PROPS.name$MnvL));
      }

      for (SNode parameter : ListSequence.fromList(SLinkOperations.getChildren(container, LINKS.Parameters$hoyh))) {
        SpeciesContainer__BehaviorDescriptor.fixName_id1IP6pj5_cgV.invoke(container, SPropertyOperations.getString(parameter, PROPS.name$MnvL));
      }

      for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(container, LINKS.Processes$hnPe))) {
        SpeciesContainer__BehaviorDescriptor.fixName_id1IP6pj5_cgV.invoke(container, SPropertyOperations.getString(process, PROPS.name$MnvL));
      }
    }
  }
  public static void mappingScript_CodeBlock_5(final MappingScriptContext _context) {
    for (SNode container : ListSequence.fromList(SModelOperations.roots(_context.getModel(), CONCEPTS.SpeciesContainer$Ig))) {
      SpeciesContainer__BehaviorDescriptor.updateSpeciesRelations_idJ83UdHo8mt.invoke(container);
      SpeciesContainer__BehaviorDescriptor.updateParameterRelations_id6UEPGYOxbAr.invoke(container);
      SpeciesContainer__BehaviorDescriptor.updateModifiers_id20T6jFVk_r2.invoke(container);
    }
  }
  public static Object varMacro_Value_1_0(final TemplateVarContext _context) {
    List<SNode> arguments = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(arguments).addSequence(ListSequence.fromList(Parameter__BehaviorDescriptor.getArgumentNodes_id3hjy$RKsTtM.invoke(_context.getNode())));
    int count = 0;
    for (SNode arg : ListSequence.fromList(arguments)) {
      SNode argBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x6f3def580a87b33dL, "SpeciesSetup.structure.ExpressionBin"));
      if (SNodeOperations.isInstanceOf(arg, CONCEPTS.SpeciesExpression$Vm)) {
        SLinkOperations.setTarget(argBin, LINKS.target$nTHx, SNodeOperations.as(arg, CONCEPTS.SpeciesExpression$Vm));
      }
      if (SNodeOperations.isInstanceOf(arg, CONCEPTS.ParameterExpression$CA)) {
        SLinkOperations.setTarget(argBin, LINKS.target$nTHx, SNodeOperations.as(arg, CONCEPTS.ParameterExpression$CA));
      }
      SPropertyOperations.set(argBin, PROPS.binIndex$LsIb, count);
      ListSequence.fromList(bins).addElement(argBin);
      count++;
    }
    return bins;
  }
  public static Object varMacro_Value_1_1(final TemplateVarContext _context) {
    // Using node.index doesn't work for some reason, setting the index this way until a better way is found.
    List<SNode> arguments = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(arguments).addSequence(ListSequence.fromList(Parameter__BehaviorDescriptor.getArgumentNodes_id3hjy$RKsTtM.invoke(_context.getNode())));
    int count = 0;
    for (SNode arg : ListSequence.fromList(arguments)) {
      SNode argBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x6f3def580a87b33dL, "SpeciesSetup.structure.ExpressionBin"));
      if (SNodeOperations.isInstanceOf(arg, CONCEPTS.SpeciesExpression$Vm)) {
        SLinkOperations.setTarget(argBin, LINKS.target$nTHx, SNodeOperations.as(arg, CONCEPTS.SpeciesExpression$Vm));
      }
      if (SNodeOperations.isInstanceOf(arg, CONCEPTS.ParameterExpression$CA)) {
        SLinkOperations.setTarget(argBin, LINKS.target$nTHx, SNodeOperations.as(arg, CONCEPTS.ParameterExpression$CA));
      }
      SPropertyOperations.set(argBin, PROPS.binIndex$LsIb, count);
      ListSequence.fromList(bins).addElement(argBin);
      count++;
    }
    return bins;
  }
  public static Object varMacro_Value_2_0(final TemplateVarContext _context) {
    // TESTING HEADER ARGS
    List<SNode> arguments = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> bins = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(arguments).addSequence(ListSequence.fromList(Parameter__BehaviorDescriptor.getArgumentNodes_id3hjy$RKsTtM.invoke(_context.getNode())).distinct());
    int count = 0;
    for (SNode arg : ListSequence.fromList(arguments)) {
      SNode argBin = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x6f3def580a87b33dL, "SpeciesSetup.structure.ExpressionBin"));
      if (SNodeOperations.isInstanceOf(arg, CONCEPTS.SpeciesExpression$Vm)) {
        SLinkOperations.setTarget(argBin, LINKS.target$nTHx, SNodeOperations.as(arg, CONCEPTS.SpeciesExpression$Vm));
      }
      if (SNodeOperations.isInstanceOf(arg, CONCEPTS.ParameterExpression$CA)) {
        SLinkOperations.setTarget(argBin, LINKS.target$nTHx, SNodeOperations.as(arg, CONCEPTS.ParameterExpression$CA));
      }
      SPropertyOperations.set(argBin, PROPS.binIndex$LsIb, count);
      ListSequence.fromList(bins).addElement(argBin);
      count++;
    }
    return bins;
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("4236022032101766639", new SCB(i++));
    mscbMethods.put("1996530136569367943", new SCB(i++));
    mscbMethods.put("3770509380385218892", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_3(ctx);
          return;
        case 1:
          QueriesGenerated.mappingScript_CodeBlock_4(ctx);
          return;
        case 2:
          QueriesGenerated.mappingScript_CodeBlock_5(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("2487902665577648510", new SNsQ(i++));
    snsqMethods.put("5555094191714771498", new SNsQ(i++));
    snsqMethods.put("4345639229193449834", new SNsQ(i++));
    snsqMethods.put("5555094191714878604", new SNsQ(i++));
    snsqMethods.put("5555094191715294216", new SNsQ(i++));
    snsqMethods.put("5555094191715881952", new SNsQ(i++));
    snsqMethods.put("5555094191719189706", new SNsQ(i++));
    snsqMethods.put("5555094191714880322", new SNsQ(i++));
    snsqMethods.put("3770509380399180522", new SNsQ(i++));
    snsqMethods.put("3770509380388389971", new SNsQ(i++));
    snsqMethods.put("2487902665577935475", new SNsQ(i++));
    snsqMethods.put("1996530136571968754", new SNsQ(i++));
    snsqMethods.put("1996530136567349705", new SNsQ(i++));
    snsqMethods.put("2487902665578411341", new SNsQ(i++));
    snsqMethods.put("2487902665578549368", new SNsQ(i++));
    snsqMethods.put("2487902665578585850", new SNsQ(i++));
    snsqMethods.put("2487902665578576299", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_2(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_3(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_4(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_5(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_6(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_7(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_8(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_9(ctx));
        case 10:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_10(ctx));
        case 11:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_11(ctx));
        case 12:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_12(ctx));
        case 13:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_0(ctx));
        case 14:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_1(ctx));
        case 15:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_2(ctx));
        case 16:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_3(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("2487902665577644310", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "NAME"));
    pvqMethods.put("2487902665577924287", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665577930108", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665577941165", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665577958406", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665577962364", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("5555094191714772392", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "SPECIES_NAME"));
    pvqMethods.put("5555094191714778538", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "INDEX"));
    pvqMethods.put("8015826073197721173", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PARAMETER_NAME"));
    pvqMethods.put("8015826073197743185", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PARAMETER_NAME"));
    pvqMethods.put("4345639229193453032", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ARGS"));
    pvqMethods.put("5555094191715178672", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "INDEX"));
    pvqMethods.put("5555094191718700952", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "0"));
    pvqMethods.put("5555094191715187753", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PRODUCTION_TERM"));
    pvqMethods.put("5555094191715299933", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "REACTANT_TERMS"));
    pvqMethods.put("5555094191715290961", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "DEGRADATION_TERM"));
    pvqMethods.put("5555094191715884289", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PRODUCT_TERMS"));
    pvqMethods.put("5555094191719192973", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "MODIFIER_TERMS"));
    pvqMethods.put("4966106853964501523", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578447944", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578509131", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578456468", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("3770509380399164535", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "INDEX"));
    pvqMethods.put("3770509380399164545", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "SPECIES_NAME"));
    pvqMethods.put("3770509380399164605", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "INDEX"));
    pvqMethods.put("3770509380399164615", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "SPECIES_NAME"));
    pvqMethods.put("3770509380399164682", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "INDEX"));
    pvqMethods.put("3770509380399164692", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "SPECIES_NAME"));
    pvqMethods.put("3770509380389265907", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("3770509380388381712", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PROTEIN_NAME"));
    pvqMethods.put("3770509380388381723", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "INDEX"));
    pvqMethods.put("3770509380388381733", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "AFFECTS_THIS_CELL"));
    pvqMethods.put("3767155488089679159", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "IS_JUNCTION_PROTEIN"));
    pvqMethods.put("1996530136568212513", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PARAMETER_NAME"));
    pvqMethods.put("1996530136572645602", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ARGS"));
    pvqMethods.put("1996530136567350542", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "EXPRESSION"));
    pvqMethods.put("2487902665577459731", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "dsl_species"));
    pvqMethods.put("2487902665578423280", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "SIZE"));
    pvqMethods.put("2487902665578430692", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578549327", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578549336", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578549345", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578549358", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CELL_TYPE_NAME"));
    pvqMethods.put("2487902665578582831", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "PARAMETER_NAME"));
    pvqMethods.put("2487902665578587805", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ARGS"));
    pvqMethods.put("4966106853964098047", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "dsl_species"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_1_3(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_1_4(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_1_5(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_1_6(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_1_7(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_1_8(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_1_9(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_1_10(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_1_11(ctx);
        case 12:
          return QueriesGenerated.propertyMacro_GetValue_1_12(ctx);
        case 13:
          return QueriesGenerated.propertyMacro_GetValue_1_13(ctx);
        case 14:
          return QueriesGenerated.propertyMacro_GetValue_1_14(ctx);
        case 15:
          return QueriesGenerated.propertyMacro_GetValue_1_15(ctx);
        case 16:
          return QueriesGenerated.propertyMacro_GetValue_1_16(ctx);
        case 17:
          return QueriesGenerated.propertyMacro_GetValue_1_17(ctx);
        case 18:
          return QueriesGenerated.propertyMacro_GetValue_1_18(ctx);
        case 19:
          return QueriesGenerated.propertyMacro_GetValue_1_19(ctx);
        case 20:
          return QueriesGenerated.propertyMacro_GetValue_1_20(ctx);
        case 21:
          return QueriesGenerated.propertyMacro_GetValue_1_21(ctx);
        case 22:
          return QueriesGenerated.propertyMacro_GetValue_1_22(ctx);
        case 23:
          return QueriesGenerated.propertyMacro_GetValue_1_23(ctx);
        case 24:
          return QueriesGenerated.propertyMacro_GetValue_1_24(ctx);
        case 25:
          return QueriesGenerated.propertyMacro_GetValue_1_25(ctx);
        case 26:
          return QueriesGenerated.propertyMacro_GetValue_1_26(ctx);
        case 27:
          return QueriesGenerated.propertyMacro_GetValue_1_27(ctx);
        case 28:
          return QueriesGenerated.propertyMacro_GetValue_1_28(ctx);
        case 29:
          return QueriesGenerated.propertyMacro_GetValue_1_29(ctx);
        case 30:
          return QueriesGenerated.propertyMacro_GetValue_1_30(ctx);
        case 31:
          return QueriesGenerated.propertyMacro_GetValue_1_31(ctx);
        case 32:
          return QueriesGenerated.propertyMacro_GetValue_1_32(ctx);
        case 33:
          return QueriesGenerated.propertyMacro_GetValue_1_33(ctx);
        case 34:
          return QueriesGenerated.propertyMacro_GetValue_1_34(ctx);
        case 35:
          return QueriesGenerated.propertyMacro_GetValue_1_35(ctx);
        case 36:
          return QueriesGenerated.propertyMacro_GetValue_1_36(ctx);
        case 37:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        case 38:
          return QueriesGenerated.propertyMacro_GetValue_2_1(ctx);
        case 39:
          return QueriesGenerated.propertyMacro_GetValue_2_2(ctx);
        case 40:
          return QueriesGenerated.propertyMacro_GetValue_2_3(ctx);
        case 41:
          return QueriesGenerated.propertyMacro_GetValue_2_4(ctx);
        case 42:
          return QueriesGenerated.propertyMacro_GetValue_2_5(ctx);
        case 43:
          return QueriesGenerated.propertyMacro_GetValue_2_6(ctx);
        case 44:
          return QueriesGenerated.propertyMacro_GetValue_2_7(ctx);
        case 45:
          return QueriesGenerated.propertyMacro_GetValue_2_8(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("3770509380399164556", new IfMC(i++));
    imcMethods.put("3770509380399164625", new IfMC(i++));
    imcMethods.put("3770509380399164703", new IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    IfMacroCondition query = identity.forTemplateNode(imcMethods);
    return (query != null ? query : super.getIfMacroCondition(identity));
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_1_0(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_1_1(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_1_2(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, VariableValueQuery> vvqMethods = new HashMap<String, VariableValueQuery>();
  {
    vvqMethods.put("4345639229193421344", new VVQ(0));
    vvqMethods.put("3770509380393100362", new VVQ(1));
    vvqMethods.put("3770509380393554894", new VVQ(2));
  }
  @NotNull
  @Override
  public VariableValueQuery getVariableValueQuery(@NotNull QueryKey queryKey) {
    VariableValueQuery query = queryKey.forTemplateNode(vvqMethods);
    return (query != null ? query : super.getVariableValueQuery(queryKey));
  }
  private static class VVQ implements VariableValueQuery {
    private final int methodKey;
    /*package*/ VVQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull TemplateVarContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.varMacro_Value_1_0(ctx);
        case 1:
          return QueriesGenerated.varMacro_Value_1_1(ctx);
        case 2:
          return QueriesGenerated.varMacro_Value_2_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty binIndex$nKRa = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x34479ff5091e5407L, "binIndex");
    /*package*/ static final SProperty binIndex$LsIb = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x6f3def580a87b33dL, 0x6f3def580a87b38cL, "binIndex");
    /*package*/ static final SProperty Stoichiometry$Wmha = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2b6159d0ceecf4f3L, "Stoichiometry");
    /*package*/ static final SProperty UsesValue$4P_Q = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x54e0e23243ed3238L, "UsesValue");
    /*package*/ static final SProperty Location$Gx$s = MetaAdapterFactory.getProperty(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed5ea1L, "Location");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$nL6b = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x34479ff5091e5406L, 0x34479ff5091e5408L, "target");
    /*package*/ static final SReferenceLink target$nTHx = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x6f3def580a87b33dL, 0x3c4ecfdad1ead071L, "target");
    /*package*/ static final SReferenceLink Species$uQ2a = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x10098a905c97eb32L, 0x10098a905c97eb33L, "Species");
    /*package*/ static final SReferenceLink Parameter$bXmh = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x665d03af898abc61L, 0x54e0e23243e71cb1L, "Parameter");
    /*package*/ static final SContainmentLink ModifiedByProcess$uVT0 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2039193afb52ddb0L, "ModifiedByProcess");
    /*package*/ static final SContainmentLink ReactsInProcess$_Wy1 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed142fL, "ReactsInProcess");
    /*package*/ static final SContainmentLink ProductOfProcess$_X03 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed1431L, "ProductOfProcess");
    /*package*/ static final SReferenceLink Degradation_Term$Cd2S = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x665d03af8984818bL, "Degradation_Term");
    /*package*/ static final SReferenceLink Production_Term$Cs3S = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x665d03af898481a1L, "Production_Term");
    /*package*/ static final SReferenceLink ReactionReference$PJYZ = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x1a111d3933278bf1L, 0x1a111d3933278bf2L, "ReactionReference");
    /*package*/ static final SReferenceLink Rate$Otxh = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfaeaL, 0x665d03af898abc5aL, "Rate");
    /*package*/ static final SReferenceLink Species_Ref$Wnde = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2b6159d0ceecf4f7L, "Species_Ref");
    /*package*/ static final SContainmentLink Reactant_Terms$Wnv9 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4f9L, "Reactant_Terms");
    /*package*/ static final SReferenceLink ForwardRate$OzkM = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfae2L, 0x665d03af898abc5eL, "ForwardRate");
    /*package*/ static final SReferenceLink ReverseRate$OtVr = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfae2L, 0x665d03af898abc5cL, "ReverseRate");
    /*package*/ static final SContainmentLink Product_Terms$WnXb = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4fbL, "Product_Terms");
    /*package*/ static final SReferenceLink target$hsJa = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2039193afb4c33c3L, 0x2039193afb4c33c4L, "target");
    /*package*/ static final SReferenceLink Species_Container$u7EZ = MetaAdapterFactory.getReferenceLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef85L, 0x6f82e96f79abed1cL, "Species_Container");
    /*package*/ static final SReferenceLink Tissue_Container$Ds8T = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x6f82e96f79a54de4L, "Tissue_Container");
    /*package*/ static final SContainmentLink cell_types$$$44 = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef85L, 0x4369a03b1c6088edL, "cell_types");
    /*package*/ static final SReferenceLink Modifier$ZNcM = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c604985928L, 0x54e0a6c604985a9cL, "Modifier");
    /*package*/ static final SContainmentLink Parameters$hoyh = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf745L, "Parameters");
    /*package*/ static final SReferenceLink target$JA2H = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x3ac95f984427833dL, 0x3ac95f9844313214L, "target");
    /*package*/ static final SContainmentLink Species$hnnc = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf740L, "Species");
    /*package*/ static final SContainmentLink Processes$hnPe = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, 0x2b6159d0ceecf742L, "Processes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpeciesExpression$Vm = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x10098a905c97eb32L, "SpeciesSetup.structure.SpeciesExpression");
    /*package*/ static final SConcept ParameterExpression$CA = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x665d03af898abc61L, "SpeciesSetup.structure.ParameterExpression");
    /*package*/ static final SConcept Reaction_Reference$_p = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x1a111d3933278bf1L, "SpeciesSetup.structure.Reaction_Reference");
    /*package*/ static final SConcept IrreversibleReaction$ja = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfaeaL, "SpeciesSetup.structure.IrreversibleReaction");
    /*package*/ static final SConcept ReversibleReaction$fi = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecfae2L, "SpeciesSetup.structure.ReversibleReaction");
    /*package*/ static final SConcept ModifierReference$8K = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2039193afb4c33c3L, "SpeciesSetup.structure.ModifierReference");
    /*package*/ static final SConcept Inhibits$am = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c6049ceffcL, "SpeciesSetup.structure.Inhibits");
    /*package*/ static final SConcept Upregulates$aP = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x54e0a6c6049ceffdL, "SpeciesSetup.structure.Upregulates");
    /*package*/ static final SConcept SpeciesContainer$Ig = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4ebL, "SpeciesSetup.structure.SpeciesContainer");
    /*package*/ static final SConcept Tissue_And_Cell_Container$ni = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef85L, "TissueSetup.structure.Tissue_And_Cell_Container");
  }
}
