package Species2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_IrreversibleReaction;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_Rate;
  private ConceptPresentation props_Reaction;
  private ConceptPresentation props_Reaction_Term;
  private ConceptPresentation props_ReversibleReaction;
  private ConceptPresentation props_Species;
  private ConceptPresentation props_Species2Container;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.IrreversibleReaction:
        if (props_IrreversibleReaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IrreversibleReaction = cpb.create();
        }
        return props_IrreversibleReaction;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.Rate:
        if (props_Rate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Rate");
          props_Rate = cpb.create();
        }
        return props_Rate;
      case LanguageConceptSwitch.Reaction:
        if (props_Reaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Reaction = cpb.create();
        }
        return props_Reaction;
      case LanguageConceptSwitch.Reaction_Term:
        if (props_Reaction_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2b6159d0ceecf4f7L, "Species_Ref", "", "");
          props_Reaction_Term = cpb.create();
        }
        return props_Reaction_Term;
      case LanguageConceptSwitch.ReversibleReaction:
        if (props_ReversibleReaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ReversibleReaction = cpb.create();
        }
        return props_ReversibleReaction;
      case LanguageConceptSwitch.Species:
        if (props_Species == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Species = cpb.create();
        }
        return props_Species;
      case LanguageConceptSwitch.Species2Container:
        if (props_Species2Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Species2Container");
          props_Species2Container = cpb.create();
        }
        return props_Species2Container;
    }
    return null;
  }
}
