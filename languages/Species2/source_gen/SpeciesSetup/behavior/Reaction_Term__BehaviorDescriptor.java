package SpeciesSetup.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Reaction_Term__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, "SpeciesSetup.structure.Reaction_Term");

  public static final SMethod<Void> create_relation_id1Ch7j$N9XgT = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("create_relation").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1Ch7j$N9XgT").build();
  public static final SMethod<Boolean> isRelationPresent_id1Ch7j$NgJ_b = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isRelationPresent").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1Ch7j$NgJ_b").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(create_relation_id1Ch7j$N9XgT, isRelationPresent_id1Ch7j$NgJ_b);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void create_relation_id1Ch7j$N9XgT(@NotNull SNode __thisNode__) {
    // Creates a reaction reference node and associates it with the relevant species, but only if it doesn't already exist. 
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.Species_Ref$Wnde) != null) && !(((boolean) Reaction_Term__BehaviorDescriptor.isRelationPresent_id1Ch7j$NgJ_b.invoke(__thisNode__)))) {
      SNode newReactionRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x1a111d3933278bf1L, "SpeciesSetup.structure.Reaction_Reference"));
      SLinkOperations.setTarget(newReactionRef, LINKS.ReactionReference$PJYZ, SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Reaction$JH, false, false));

      // If this is found on the left-hand side of the equation, then let the species know it is a reactant. 
      // Otherwise, it is a product. 
      try {
        if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), CONCEPTS.Reaction$JH), LINKS.Reactant_Terms$Wnv9)).contains(__thisNode__)) {
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.Species_Ref$Wnde), LINKS.ReactsInProcess$_Wy1)).addElement(newReactionRef);
        } else {
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.Species_Ref$Wnde), LINKS.ProductOfProcess$_X03)).addElement(newReactionRef);
        }
      } catch (NullPointerException ex) {
        // Species was not found, so throw an exception. 
        System.err.println("Exception - attempted to assign a reaction to a species which no longer existed : ");
        ex.printStackTrace();
        throw ex;
      }
    }
  }
  /*package*/ static boolean isRelationPresent_id1Ch7j$NgJ_b(@NotNull SNode __thisNode__) {
    // Is this reaction terms on the left or right side of the reaction? 
    boolean isRelationPresent = false;
    if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), CONCEPTS.Reaction$JH), LINKS.Reactant_Terms$Wnv9)).contains(__thisNode__)) {
      // This is a reactant term, then check over the species reactant relations.   
      for (SNode reactantTerm : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.Species_Ref$Wnde), LINKS.ReactsInProcess$_Wy1))) {
        if (Objects.equals(SLinkOperations.getTarget(reactantTerm, LINKS.ReactionReference$PJYZ), SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), CONCEPTS.Reaction$JH))) {
          isRelationPresent = true;
        }
      }
    } else {
      // This is a product term, then check over the species product relations. 
      for (SNode productTerm : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.Species_Ref$Wnde), LINKS.ProductOfProcess$_X03))) {
        if (Objects.equals(SLinkOperations.getTarget(productTerm, LINKS.ReactionReference$PJYZ), SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), CONCEPTS.Reaction$JH))) {
          isRelationPresent = true;
        }
      }
    }
    return isRelationPresent;
  }

  /*package*/ Reaction_Term__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        create_relation_id1Ch7j$N9XgT(node);
        return null;
      case 1:
        return (T) ((Boolean) isRelationPresent_id1Ch7j$NgJ_b(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ReactionReference$PJYZ = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x1a111d3933278bf1L, 0x1a111d3933278bf2L, "ReactionReference");
    /*package*/ static final SReferenceLink Species_Ref$Wnde = MetaAdapterFactory.getReferenceLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4f2L, 0x2b6159d0ceecf4f7L, "Species_Ref");
    /*package*/ static final SContainmentLink ReactsInProcess$_Wy1 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed142fL, "ReactsInProcess");
    /*package*/ static final SContainmentLink Reactant_Terms$Wnv9 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, 0x2b6159d0ceecf4f9L, "Reactant_Terms");
    /*package*/ static final SContainmentLink ProductOfProcess$_X03 = MetaAdapterFactory.getContainmentLink(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4efL, 0x2b6159d0ceed1431L, "ProductOfProcess");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reaction$JH = MetaAdapterFactory.getConcept(0x84970ad9a9644f15L, 0xa393dc0fcd724c0fL, 0x2b6159d0ceecf4eeL, "SpeciesSetup.structure.Reaction");
  }
}
