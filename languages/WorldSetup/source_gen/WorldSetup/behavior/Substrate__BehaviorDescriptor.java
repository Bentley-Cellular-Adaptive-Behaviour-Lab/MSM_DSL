package WorldSetup.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.math.BigDecimal;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Substrate__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x276cd304748c4d5dL, 0xaad04b34e2a42cedL, 0x73ca99e5119b19f2L, "WorldSetup.structure.Substrate");

  public static final SMethod<String> get_adhesiveness_string_id4JVq81Fh9KI = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("get_adhesiveness_string").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("4JVq81Fh9KI").build();
  public static final SMethod<BigDecimal> get_adhesiveness_decimal_id1r0uutBGvvQ = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("get_adhesiveness_decimal").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1r0uutBGvvQ").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(get_adhesiveness_string_id4JVq81Fh9KI, get_adhesiveness_decimal_id1r0uutBGvvQ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String get_adhesiveness_string_id4JVq81Fh9KI(@NotNull SNode __thisNode__) {
    return Substrate__BehaviorDescriptor.get_adhesiveness_decimal_id1r0uutBGvvQ.invoke(__thisNode__).toString();
  }
  /*package*/ static BigDecimal get_adhesiveness_decimal_id1r0uutBGvvQ(@NotNull SNode __thisNode__) {
    return (BigDecimal) Adhesiveness__BehaviorDescriptor.get_adhesiveness_value_decimal_id1r0uutBGt3g.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.Adhesiveness$q9mr));
  }

  /*package*/ Substrate__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) get_adhesiveness_string_id4JVq81Fh9KI(node));
      case 1:
        return (T) ((BigDecimal) get_adhesiveness_decimal_id1r0uutBGvvQ(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink Adhesiveness$q9mr = MetaAdapterFactory.getContainmentLink(0x276cd304748c4d5dL, 0xaad04b34e2a42cedL, 0x73ca99e5119b19f2L, 0x383c8857e006bc76L, "Adhesiveness");
  }
}
