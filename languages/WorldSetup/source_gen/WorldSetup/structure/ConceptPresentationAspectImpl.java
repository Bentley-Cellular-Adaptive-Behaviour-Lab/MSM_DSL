package WorldSetup.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Gradient;
  private ConceptPresentation props_Grid;
  private ConceptPresentation props_Sink;
  private ConceptPresentation props_Source;
  private ConceptPresentation props_Substrate;
  private ConceptPresentation props_Substrate_Shape;
  private ConceptPresentation props_Substrate_Shape_Cuboid;
  private ConceptPresentation props_Substrate_Shape_Triangular;
  private ConceptPresentation props_Vertex;
  private ConceptPresentation props_World_Container;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Gradient:
        if (props_Gradient == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a protein gradient within the simulation world.");
          cpb.presentationByName();
          props_Gradient = cpb.create();
        }
        return props_Gradient;
      case LanguageConceptSwitch.Grid:
        if (props_Grid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the base properties of the simulation world environment.");
          cpb.rawPresentation("Grid");
          props_Grid = cpb.create();
        }
        return props_Grid;
      case LanguageConceptSwitch.Sink:
        if (props_Sink == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the location of where a gradient ends.");
          cpb.rawPresentation("Sink");
          props_Sink = cpb.create();
        }
        return props_Sink;
      case LanguageConceptSwitch.Source:
        if (props_Source == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the source strength and location of a gradient.");
          cpb.rawPresentation("Source");
          props_Source = cpb.create();
        }
        return props_Source;
      case LanguageConceptSwitch.Substrate:
        if (props_Substrate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a cellular substrate that cells can grow on.");
          cpb.presentationByName();
          props_Substrate = cpb.create();
        }
        return props_Substrate;
      case LanguageConceptSwitch.Substrate_Shape:
        if (props_Substrate_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract concept for storing the shape of a substrate.");
          props_Substrate_Shape = cpb.create();
        }
        return props_Substrate_Shape;
      case LanguageConceptSwitch.Substrate_Shape_Cuboid:
        if (props_Substrate_Shape_Cuboid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a cuboidal substrate.");
          cpb.rawPresentation("Substrate_Shape_Cuboid");
          props_Substrate_Shape_Cuboid = cpb.create();
        }
        return props_Substrate_Shape_Cuboid;
      case LanguageConceptSwitch.Substrate_Shape_Triangular:
        if (props_Substrate_Shape_Triangular == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing a substrate in the shape of a triangular prism.");
          cpb.rawPresentation("Substrate_Shape_Triangular");
          props_Substrate_Shape_Triangular = cpb.create();
        }
        return props_Substrate_Shape_Triangular;
      case LanguageConceptSwitch.Vertex:
        if (props_Vertex == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Vertex concept for a triangle.");
          cpb.rawPresentation("Vertex");
          props_Vertex = cpb.create();
        }
        return props_Vertex;
      case LanguageConceptSwitch.World_Container:
        if (props_World_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept for describing the gradients, substrate and properties of a simulation world.");
          cpb.presentationByName();
          props_World_Container = cpb.create();
        }
        return props_World_Container;
    }
    return null;
  }
}
