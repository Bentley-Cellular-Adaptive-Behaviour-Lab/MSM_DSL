package ODE.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new Constant_Reference_Constraints();
      case 1:
        return new Sink_Term_Constraints();
      case 2:
        return new Source_Term_Constraints();
      case 3:
        return new Species_Reference_Constraints();
      case 4:
        return new Term_Component_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7b512b3ee40d4b8aL, 0x826be51031d2e9a0L, 0x64223a10df460f96L), MetaIdFactory.conceptId(0x7b512b3ee40d4b8aL, 0x826be51031d2e9a0L, 0x64223a10df4593c8L), MetaIdFactory.conceptId(0x7b512b3ee40d4b8aL, 0x826be51031d2e9a0L, 0x64223a10df4593c9L), MetaIdFactory.conceptId(0x7b512b3ee40d4b8aL, 0x826be51031d2e9a0L, 0x64223a10df460f91L), MetaIdFactory.conceptId(0x7b512b3ee40d4b8aL, 0x826be51031d2e9a0L, 0x64223a10df4593c6L)).seal();
}
