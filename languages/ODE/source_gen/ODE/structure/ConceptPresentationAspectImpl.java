package ODE.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Constant;
  private ConceptPresentation props_Constant_Reference;
  private ConceptPresentation props_ODE;
  private ConceptPresentation props_ODE_Container;
  private ConceptPresentation props_Sink_Term;
  private ConceptPresentation props_Source_Term;
  private ConceptPresentation props_Species;
  private ConceptPresentation props_Species_Reference;
  private ConceptPresentation props_Term;
  private ConceptPresentation props_Term_Component;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Constant:
        if (props_Constant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Constant = cpb.create();
        }
        return props_Constant;
      case LanguageConceptSwitch.Constant_Reference:
        if (props_Constant_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Constant_Reference = cpb.create();
        }
        return props_Constant_Reference;
      case LanguageConceptSwitch.ODE:
        if (props_ODE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ODE");
          props_ODE = cpb.create();
        }
        return props_ODE;
      case LanguageConceptSwitch.ODE_Container:
        if (props_ODE_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ODE_Container = cpb.create();
        }
        return props_ODE_Container;
      case LanguageConceptSwitch.Sink_Term:
        if (props_Sink_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Sink Term");
          props_Sink_Term = cpb.create();
        }
        return props_Sink_Term;
      case LanguageConceptSwitch.Source_Term:
        if (props_Source_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Source Term");
          props_Source_Term = cpb.create();
        }
        return props_Source_Term;
      case LanguageConceptSwitch.Species:
        if (props_Species == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Species = cpb.create();
        }
        return props_Species;
      case LanguageConceptSwitch.Species_Reference:
        if (props_Species_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Species");
          props_Species_Reference = cpb.create();
        }
        return props_Species_Reference;
      case LanguageConceptSwitch.Term:
        if (props_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Term = cpb.create();
        }
        return props_Term;
      case LanguageConceptSwitch.Term_Component:
        if (props_Term_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Term_Component");
          props_Term_Component = cpb.create();
        }
        return props_Term_Component;
    }
    return null;
  }
}
