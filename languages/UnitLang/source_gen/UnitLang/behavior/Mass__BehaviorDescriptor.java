package UnitLang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.math.BigDecimal;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.iets3.core.expr.base.behavior.IETS3ExprEvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.math.BigInteger;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Mass__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c5L, "UnitLang.structure.Mass");

  public static final SMethod<BigDecimal> convert_from_to_id7Eknud9Yws7 = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("convert_from_to").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("7Eknud9Yws7").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> get_unit_val_id7Eknud9Ywu2 = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.class)).name("get_unit_val").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("7Eknud9Ywu2").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<BigDecimal> get_mass_value_decimal_id7Eknud9YwvD = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("get_mass_value_decimal").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("7Eknud9YwvD").build();
  public static final SMethod<Boolean> is_less_than_zero_id7Eknud9YwvR = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("is_less_than_zero").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("7Eknud9YwvR").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(convert_from_to_id7Eknud9Yws7, get_unit_val_id7Eknud9Ywu2, get_mass_value_decimal_id7Eknud9YwvD, is_less_than_zero_id7Eknud9YwvR);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static BigDecimal convert_from_to_id7Eknud9Yws7(@NotNull SNode __thisNode__, SNode current_unit, SNode target_unit) {
    BigDecimal target_value = Mass__BehaviorDescriptor.get_mass_value_decimal_id7Eknud9YwvD.invoke(__thisNode__);
    int current_unit_val = Mass__BehaviorDescriptor.get_unit_val_id7Eknud9Ywu2.invoke(__thisNode__, current_unit);
    int target_unit_val = Mass__BehaviorDescriptor.get_unit_val_id7Eknud9Ywu2.invoke(__thisNode__, target_unit);

    int conversion_steps = target_unit_val - current_unit_val;

    // When conversion steps is zero, no change is needed. This shouldn't be called in that instance, but just in case.
    if (conversion_steps > 0) {
      // Converting is going up in units, so divide the current value by 1000 for each conversion step.
      for (int i = 0; i < conversion_steps; i++) {
        target_value = target_value.divide(BigDecimal.valueOf(1000));
      }
    } else if (conversion_steps < 0) {
      // Converting is going down in units, so multiply the current value by 1000 for each conversion step.
      for (int i = 0; i < -conversion_steps; i++) {
        target_value = target_value.multiply(BigDecimal.valueOf(1000));
      }
    }
    return target_value;
  }
  /*package*/ static Integer get_unit_val_id7Eknud9Ywu2(@NotNull SNode __thisNode__, SNode unit) {
    int val = -1;
    if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Milligram$eV)) {
      val = 1;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Microgram$q4)) {
      val = 2;
    } else if (SNodeOperations.isInstanceOf(unit, CONCEPTS.Nanogram$80)) {
      val = 3;
    }
    return val;
  }
  /*package*/ static BigDecimal get_mass_value_decimal_id7Eknud9YwvD(@NotNull SNode __thisNode__) {
    Object value = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.value$Xq0C), LINKS.expr$5age));
    if (value.getClass() == BigDecimal.class) {
      return ((BigDecimal) value);
    } else if (value.getClass() == BigInteger.class) {
      return new BigDecimal(((BigInteger) value));
    }
    return new BigDecimal(((BigInteger) value));
  }
  /*package*/ static boolean is_less_than_zero_id7Eknud9YwvR(@NotNull SNode __thisNode__) {
    BigDecimal value = Mass__BehaviorDescriptor.get_mass_value_decimal_id7Eknud9YwvD.invoke(__thisNode__);
    // Is the value less than zero?
    if (value.compareTo(BigDecimal.valueOf(0)) == -1) {
      return true;
    }
    return false;
  }

  /*package*/ Mass__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((BigDecimal) convert_from_to_id7Eknud9Yws7(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 1:
        return (T) ((Integer) get_unit_val_id7Eknud9Ywu2(node, (SNode) parameters[0]));
      case 2:
        return (T) ((BigDecimal) get_mass_value_decimal_id7Eknud9YwvD(node));
      case 3:
        return (T) ((Boolean) is_less_than_zero_id7Eknud9YwvR(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Milligram$eV = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b4L, "UnitLang.structure.Milligram");
    /*package*/ static final SConcept Microgram$q4 = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b6L, "UnitLang.structure.Microgram");
    /*package*/ static final SConcept Nanogram$80 = MetaAdapterFactory.getConcept(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x7a945de349fb5634L, "UnitLang.structure.Nanogram");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$Xq0C = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c5L, 0x622035beb7ca5516L, "value");
    /*package*/ static final SContainmentLink expr$5age = MetaAdapterFactory.getContainmentLink(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c3L, 0xb839ee2c0e6f5c4L, "expr");
  }
}
