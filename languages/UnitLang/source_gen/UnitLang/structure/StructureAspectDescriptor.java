package UnitLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAmount = createDescriptorForAmount();
  /*package*/ final ConceptDescriptor myConceptAmount_Concentration = createDescriptorForAmount_Concentration();
  /*package*/ final ConceptDescriptor myConceptAmount_Expression = createDescriptorForAmount_Expression();
  /*package*/ final ConceptDescriptor myConceptArea = createDescriptorForArea();
  /*package*/ final ConceptDescriptor myConceptArea_Expression = createDescriptorForArea_Expression();
  /*package*/ final ConceptDescriptor myConceptConcentration = createDescriptorForConcentration();
  /*package*/ final ConceptDescriptor myConceptConcentration_Expression = createDescriptorForConcentration_Expression();
  /*package*/ final ConceptDescriptor myConceptDistance = createDescriptorForDistance();
  /*package*/ final ConceptDescriptor myConceptDistance_Expression = createDescriptorForDistance_Expression();
  /*package*/ final ConceptDescriptor myConceptLitre = createDescriptorForLitre();
  /*package*/ final ConceptDescriptor myConceptMass = createDescriptorForMass();
  /*package*/ final ConceptDescriptor myConceptMass_Concentration = createDescriptorForMass_Concentration();
  /*package*/ final ConceptDescriptor myConceptMass_Expression = createDescriptorForMass_Expression();
  /*package*/ final ConceptDescriptor myConceptMetres_Cubed = createDescriptorForMetres_Cubed();
  /*package*/ final ConceptDescriptor myConceptMicrogram = createDescriptorForMicrogram();
  /*package*/ final ConceptDescriptor myConceptMicrolitre = createDescriptorForMicrolitre();
  /*package*/ final ConceptDescriptor myConceptMicrometre = createDescriptorForMicrometre();
  /*package*/ final ConceptDescriptor myConceptMicrometres_Cubed = createDescriptorForMicrometres_Cubed();
  /*package*/ final ConceptDescriptor myConceptMicrometres_Squared = createDescriptorForMicrometres_Squared();
  /*package*/ final ConceptDescriptor myConceptMicromolar = createDescriptorForMicromolar();
  /*package*/ final ConceptDescriptor myConceptMicromoles = createDescriptorForMicromoles();
  /*package*/ final ConceptDescriptor myConceptMilligram = createDescriptorForMilligram();
  /*package*/ final ConceptDescriptor myConceptMillilitre = createDescriptorForMillilitre();
  /*package*/ final ConceptDescriptor myConceptMillimetre = createDescriptorForMillimetre();
  /*package*/ final ConceptDescriptor myConceptMillimetres_Cubed = createDescriptorForMillimetres_Cubed();
  /*package*/ final ConceptDescriptor myConceptMillimetres_Squared = createDescriptorForMillimetres_Squared();
  /*package*/ final ConceptDescriptor myConceptMillimolar = createDescriptorForMillimolar();
  /*package*/ final ConceptDescriptor myConceptMillimoles = createDescriptorForMillimoles();
  /*package*/ final ConceptDescriptor myConceptMolar = createDescriptorForMolar();
  /*package*/ final ConceptDescriptor myConceptMoles = createDescriptorForMoles();
  /*package*/ final ConceptDescriptor myConceptNanogram = createDescriptorForNanogram();
  /*package*/ final ConceptDescriptor myConceptNanolitre = createDescriptorForNanolitre();
  /*package*/ final ConceptDescriptor myConceptNanometre = createDescriptorForNanometre();
  /*package*/ final ConceptDescriptor myConceptNanometres_Cubed = createDescriptorForNanometres_Cubed();
  /*package*/ final ConceptDescriptor myConceptNanometres_Squared = createDescriptorForNanometres_Squared();
  /*package*/ final ConceptDescriptor myConceptNanomolar = createDescriptorForNanomolar();
  /*package*/ final ConceptDescriptor myConceptNanomoles = createDescriptorForNanomoles();
  /*package*/ final ConceptDescriptor myConceptUnit = createDescriptorForUnit();
  /*package*/ final ConceptDescriptor myConceptUnit_Amount = createDescriptorForUnit_Amount();
  /*package*/ final ConceptDescriptor myConceptUnit_Amount_Combined_Concentration = createDescriptorForUnit_Amount_Combined_Concentration();
  /*package*/ final ConceptDescriptor myConceptUnit_Amount_Concentration = createDescriptorForUnit_Amount_Concentration();
  /*package*/ final ConceptDescriptor myConceptUnit_Amount_Molar_Concentration = createDescriptorForUnit_Amount_Molar_Concentration();
  /*package*/ final ConceptDescriptor myConceptUnit_Area = createDescriptorForUnit_Area();
  /*package*/ final ConceptDescriptor myConceptUnit_Concentration = createDescriptorForUnit_Concentration();
  /*package*/ final ConceptDescriptor myConceptUnit_Distance = createDescriptorForUnit_Distance();
  /*package*/ final ConceptDescriptor myConceptUnit_Mass = createDescriptorForUnit_Mass();
  /*package*/ final ConceptDescriptor myConceptUnit_Mass_Concentration = createDescriptorForUnit_Mass_Concentration();
  /*package*/ final ConceptDescriptor myConceptUnit_Volume = createDescriptorForUnit_Volume();
  /*package*/ final ConceptDescriptor myConceptUnit_Volume_Litre = createDescriptorForUnit_Volume_Litre();
  /*package*/ final ConceptDescriptor myConceptUnit_Volume_Metre = createDescriptorForUnit_Volume_Metre();
  /*package*/ final ConceptDescriptor myConceptVolume = createDescriptorForVolume();
  /*package*/ final ConceptDescriptor myConceptVolume_Expression = createDescriptorForVolume_Expression();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.extendedLanguage(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, "org.iets3.core.expr.base");
    deps.aggregatedLanguage(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, "org.iets3.core.expr.base");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAmount, myConceptAmount_Concentration, myConceptAmount_Expression, myConceptArea, myConceptArea_Expression, myConceptConcentration, myConceptConcentration_Expression, myConceptDistance, myConceptDistance_Expression, myConceptLitre, myConceptMass, myConceptMass_Concentration, myConceptMass_Expression, myConceptMetres_Cubed, myConceptMicrogram, myConceptMicrolitre, myConceptMicrometre, myConceptMicrometres_Cubed, myConceptMicrometres_Squared, myConceptMicromolar, myConceptMicromoles, myConceptMilligram, myConceptMillilitre, myConceptMillimetre, myConceptMillimetres_Cubed, myConceptMillimetres_Squared, myConceptMillimolar, myConceptMillimoles, myConceptMolar, myConceptMoles, myConceptNanogram, myConceptNanolitre, myConceptNanometre, myConceptNanometres_Cubed, myConceptNanometres_Squared, myConceptNanomolar, myConceptNanomoles, myConceptUnit, myConceptUnit_Amount, myConceptUnit_Amount_Combined_Concentration, myConceptUnit_Amount_Concentration, myConceptUnit_Amount_Molar_Concentration, myConceptUnit_Area, myConceptUnit_Concentration, myConceptUnit_Distance, myConceptUnit_Mass, myConceptUnit_Mass_Concentration, myConceptUnit_Volume, myConceptUnit_Volume_Litre, myConceptUnit_Volume_Metre, myConceptVolume, myConceptVolume_Expression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Amount:
        return myConceptAmount;
      case LanguageConceptSwitch.Amount_Concentration:
        return myConceptAmount_Concentration;
      case LanguageConceptSwitch.Amount_Expression:
        return myConceptAmount_Expression;
      case LanguageConceptSwitch.Area:
        return myConceptArea;
      case LanguageConceptSwitch.Area_Expression:
        return myConceptArea_Expression;
      case LanguageConceptSwitch.Concentration:
        return myConceptConcentration;
      case LanguageConceptSwitch.Concentration_Expression:
        return myConceptConcentration_Expression;
      case LanguageConceptSwitch.Distance:
        return myConceptDistance;
      case LanguageConceptSwitch.Distance_Expression:
        return myConceptDistance_Expression;
      case LanguageConceptSwitch.Litre:
        return myConceptLitre;
      case LanguageConceptSwitch.Mass:
        return myConceptMass;
      case LanguageConceptSwitch.Mass_Concentration:
        return myConceptMass_Concentration;
      case LanguageConceptSwitch.Mass_Expression:
        return myConceptMass_Expression;
      case LanguageConceptSwitch.Metres_Cubed:
        return myConceptMetres_Cubed;
      case LanguageConceptSwitch.Microgram:
        return myConceptMicrogram;
      case LanguageConceptSwitch.Microlitre:
        return myConceptMicrolitre;
      case LanguageConceptSwitch.Micrometre:
        return myConceptMicrometre;
      case LanguageConceptSwitch.Micrometres_Cubed:
        return myConceptMicrometres_Cubed;
      case LanguageConceptSwitch.Micrometres_Squared:
        return myConceptMicrometres_Squared;
      case LanguageConceptSwitch.Micromolar:
        return myConceptMicromolar;
      case LanguageConceptSwitch.Micromoles:
        return myConceptMicromoles;
      case LanguageConceptSwitch.Milligram:
        return myConceptMilligram;
      case LanguageConceptSwitch.Millilitre:
        return myConceptMillilitre;
      case LanguageConceptSwitch.Millimetre:
        return myConceptMillimetre;
      case LanguageConceptSwitch.Millimetres_Cubed:
        return myConceptMillimetres_Cubed;
      case LanguageConceptSwitch.Millimetres_Squared:
        return myConceptMillimetres_Squared;
      case LanguageConceptSwitch.Millimolar:
        return myConceptMillimolar;
      case LanguageConceptSwitch.Millimoles:
        return myConceptMillimoles;
      case LanguageConceptSwitch.Molar:
        return myConceptMolar;
      case LanguageConceptSwitch.Moles:
        return myConceptMoles;
      case LanguageConceptSwitch.Nanogram:
        return myConceptNanogram;
      case LanguageConceptSwitch.Nanolitre:
        return myConceptNanolitre;
      case LanguageConceptSwitch.Nanometre:
        return myConceptNanometre;
      case LanguageConceptSwitch.Nanometres_Cubed:
        return myConceptNanometres_Cubed;
      case LanguageConceptSwitch.Nanometres_Squared:
        return myConceptNanometres_Squared;
      case LanguageConceptSwitch.Nanomolar:
        return myConceptNanomolar;
      case LanguageConceptSwitch.Nanomoles:
        return myConceptNanomoles;
      case LanguageConceptSwitch.Unit:
        return myConceptUnit;
      case LanguageConceptSwitch.Unit_Amount:
        return myConceptUnit_Amount;
      case LanguageConceptSwitch.Unit_Amount_Combined_Concentration:
        return myConceptUnit_Amount_Combined_Concentration;
      case LanguageConceptSwitch.Unit_Amount_Concentration:
        return myConceptUnit_Amount_Concentration;
      case LanguageConceptSwitch.Unit_Amount_Molar_Concentration:
        return myConceptUnit_Amount_Molar_Concentration;
      case LanguageConceptSwitch.Unit_Area:
        return myConceptUnit_Area;
      case LanguageConceptSwitch.Unit_Concentration:
        return myConceptUnit_Concentration;
      case LanguageConceptSwitch.Unit_Distance:
        return myConceptUnit_Distance;
      case LanguageConceptSwitch.Unit_Mass:
        return myConceptUnit_Mass;
      case LanguageConceptSwitch.Unit_Mass_Concentration:
        return myConceptUnit_Mass_Concentration;
      case LanguageConceptSwitch.Unit_Volume:
        return myConceptUnit_Volume;
      case LanguageConceptSwitch.Unit_Volume_Litre:
        return myConceptUnit_Volume_Litre;
      case LanguageConceptSwitch.Unit_Volume_Metre:
        return myConceptUnit_Volume_Metre;
      case LanguageConceptSwitch.Volume:
        return myConceptVolume;
      case LanguageConceptSwitch.Volume_Expression:
        return myConceptVolume_Expression;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAmount() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Amount", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5abL);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462379");
    b.version(2);
    b.aggregate("value", 0x622035beb7ca54ebL).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f8L).optional(false).ordered(true).multiple(false).origin("7070710508215227627").done();
    b.aggregate("units", 0x622035beb7ca54edL).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L).optional(false).ordered(true).multiple(false).origin("7070710508215227629").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAmount_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Amount_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b8L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b9L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462392");
    b.version(2);
    b.aggregate("value", 0x622035beb7ca5500L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a2L).optional(false).ordered(true).multiple(false).origin("7070710508215227648").done();
    b.aggregate("units", 0x622035beb7ca5502L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca5506L).optional(false).ordered(true).multiple(false).origin("7070710508215227650").done();
    b.alias("Concentration (Amount)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAmount_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Amount_Expression", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f8L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7070710508215227640");
    b.version(2);
    b.aggregate("expr", 0x622035beb7ca54f9L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7070710508215227641").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArea() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Area", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c7L);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462407");
    b.version(2);
    b.aggregate("value", 0x622035beb7ca54f2L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c8L).optional(false).ordered(true).multiple(false).origin("7070710508215227634").done();
    b.aggregate("units", 0x622035beb7ca54f4L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68dfL).optional(false).ordered(true).multiple(false).origin("7070710508215227636").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArea_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Area_Expression", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c8L);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462408");
    b.version(2);
    b.aggregate("expr", 0xb839ee2c0e6f5deL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("829681453102462430").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConcentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b9L);
    b.class_(false, true, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462393");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConcentration_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Concentration_Expression", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a2L);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462370");
    b.version(2);
    b.aggregate("expr", 0x622035beb7ca54fcL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("7070710508215227644").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDistance() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Distance", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c7667L);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768521319");
    b.version(2);
    b.aggregate("value", 0x2f6b1b828a2c7668L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a3784b4L).optional(false).ordered(true).multiple(false).origin("3416854989768521320").done();
    b.aggregate("units", 0x2f6b1b828a2c7ab9L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b0L).optional(false).ordered(true).multiple(false).origin("3416854989768522425").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDistance_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Distance_Expression", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a3784b4L);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989769245876");
    b.version(2);
    b.aggregate("expr", 0x2f6b1b828a3784b5L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("3416854989769245877").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLitre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Litre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5adL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Litre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c9L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462381");
    b.version(2);
    b.alias("L");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMass() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Mass", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c5L);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462405");
    b.version(2);
    b.aggregate("value", 0x622035beb7ca5516L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c3L).optional(false).ordered(true).multiple(false).origin("7070710508215227670").done();
    b.aggregate("units", 0x622035beb7ca5518L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a0L).optional(false).ordered(true).multiple(false).origin("7070710508215227672").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMass_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Mass_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b7L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b9L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462391");
    b.version(2);
    b.aggregate("value", 0x622035beb7ca5511L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a2L).optional(false).ordered(true).multiple(false).origin("7070710508215227665").done();
    b.aggregate("units", 0x622035beb7ca5513L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca5505L).optional(false).ordered(true).multiple(false).origin("7070710508215227667").done();
    b.alias("Concentration (Mass)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMass_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Mass_Expression", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c3L);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462403");
    b.version(2);
    b.aggregate("expr", 0xb839ee2c0e6f5c4L).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("829681453102462404").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMetres_Cubed() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Metres_Cubed", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x7a945de349fcbc4fL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Metre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5caL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/8832787999960644687");
    b.version(2);
    b.alias("m3");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicrogram() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Microgram", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b6L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Mass", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a0L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462390");
    b.version(2);
    b.alias("ug");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicrolitre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Microlitre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5afL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Litre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c9L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462383");
    b.version(2);
    b.alias("uL");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicrometre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Micrometre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d71L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Distance", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b0L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768519025");
    b.version(2);
    b.alias("um");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicrometres_Cubed() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Micrometres_Cubed", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c0L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Metre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5caL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462400");
    b.version(2);
    b.alias("um3");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicrometres_Squared() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Micrometres_Squared", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bcL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Area", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68dfL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462396");
    b.version(2);
    b.alias("um2");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicromolar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Micromolar", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a4L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount_Molar_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x64223a10df51b1ecL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462372");
    b.version(2);
    b.alias("uM");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicromoles() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Micromoles", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f0L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7070710508215227632");
    b.version(2);
    b.alias("micromoles");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMilligram() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Milligram", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b4L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Mass", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a0L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462388");
    b.version(2);
    b.alias("mg");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMillilitre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Millilitre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5aeL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Litre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c9L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462382");
    b.version(2);
    b.alias("mL");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMillimetre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Millimetre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d70L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Distance", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b0L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768519024");
    b.version(2);
    b.alias("mm");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMillimetres_Cubed() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Millimetres_Cubed", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bfL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Metre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5caL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462399");
    b.version(2);
    b.alias("mm3");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMillimetres_Squared() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Millimetres_Squared", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bbL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Area", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68dfL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462395");
    b.version(2);
    b.alias("mm2");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMillimolar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Millimolar", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a5L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount_Molar_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x64223a10df51b1ecL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462373");
    b.version(2);
    b.alias("mM");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMillimoles() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Millimoles", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a9L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462377");
    b.version(2);
    b.alias("millimoles");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMolar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Molar", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a3L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount_Molar_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x64223a10df51b1ecL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462371");
    b.version(2);
    b.alias("M");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMoles() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Moles", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a8L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462376");
    b.version(2);
    b.alias("moles");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanogram() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanogram", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x7a945de349fb5634L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Mass", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a0L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/8832787999960553012");
    b.version(2);
    b.alias("ng");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanolitre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanolitre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5b0L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Litre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c9L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462384");
    b.version(2);
    b.alias("nL");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanometre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanometre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c6d72L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Distance", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b0L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768519026");
    b.version(2);
    b.alias("nm");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanometres_Cubed() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanometres_Cubed", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c1L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Volume_Metre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5caL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462401");
    b.version(2);
    b.alias("nm3");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanometres_Squared() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanometres_Squared", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5bdL);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Area", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68dfL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462397");
    b.version(2);
    b.alias("nm2");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanomolar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanomolar", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a6L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount_Molar_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x64223a10df51b1ecL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462374");
    b.version(2);
    b.alias("nM");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNanomoles() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Nanomoles", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca54f1L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7070710508215227633");
    b.version(2);
    b.alias("nanomoles");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65afL);
    b.class_(false, true, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768517039");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Amount() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Amount", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65afL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462375");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Amount_Combined_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Amount_Combined_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x64223a10df50ecf1L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Amount_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca5506L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7215393397141466353");
    b.version(2);
    b.aggregate("Amount_Unit", 0x64223a10df50ecf2L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a7L).optional(false).ordered(true).multiple(false).origin("7215393397141466354").done();
    b.aggregate("Volume_Unit", 0x64223a10df50ecf3L).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68deL).optional(false).ordered(true).multiple(false).origin("7215393397141466355").done();
    b.alias("Amount / Volume");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Amount_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Amount_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca5506L);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b1L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7070710508215227654");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Amount_Molar_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Amount_Molar_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x64223a10df51b1ecL);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit_Amount_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca5506L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7215393397141516780");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Area() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Area", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68dfL);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65afL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768517855");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b1L);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65afL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768517041");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Distance() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Distance", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b0L);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65afL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768517040");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Mass() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Mass", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a0L);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65afL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462368");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Mass_Concentration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Mass_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x622035beb7ca5505L);
    b.class_(false, false, false);
    b.super_("UnitLang.structure.Unit_Concentration", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c65b1L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/7070710508215227653");
    b.version(2);
    b.aggregate("Mass_Unit", 0x622035beb7ca550cL).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5a0L).optional(false).ordered(true).multiple(false).origin("7070710508215227660").done();
    b.aggregate("Volume_Unit", 0x622035beb7ca550eL).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68deL).optional(false).ordered(true).multiple(false).origin("7070710508215227662").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Volume() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Volume", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68deL);
    b.class_(false, true, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/3416854989768517854");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Volume_Litre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Volume_Litre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5c9L);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit_Volume", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68deL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462409");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnit_Volume_Metre() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Unit_Volume_Metre", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5caL);
    b.class_(false, true, false);
    b.super_("UnitLang.structure.Unit_Volume", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68deL);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462410");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVolume() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Volume", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5cbL);
    b.class_(false, false, false);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462411");
    b.version(2);
    b.aggregate("value", 0x622035beb7ca551bL).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5ccL).optional(false).ordered(true).multiple(false).origin("7070710508215227675").done();
    b.aggregate("unit", 0x622035beb7ca551dL).target(0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0x2f6b1b828a2c68deL).optional(false).ordered(true).multiple(false).origin("7070710508215227677").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVolume_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("UnitLang", "Volume_Expression", 0x3236b0e3fbdf4a71L, 0x8bfb69d9a5a4f1beL, 0xb839ee2c0e6f5ccL);
    b.class_(false, false, false);
    b.super_("org.iets3.core.expr.base.structure.Expression", 0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L);
    b.origin("r:9dfc7f60-2dfb-474a-b564-7f6f97c60f46(UnitLang.structure)/829681453102462412");
    b.version(2);
    b.aggregate("expr", 0xb839ee2c0e6f5cdL).target(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L).optional(false).ordered(true).multiple(false).origin("829681453102462413").done();
    return b.create();
  }
}
