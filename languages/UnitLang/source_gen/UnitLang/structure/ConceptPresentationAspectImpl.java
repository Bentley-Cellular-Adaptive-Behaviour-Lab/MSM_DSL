package UnitLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Amount;
  private ConceptPresentation props_Amount_Concentration;
  private ConceptPresentation props_Amount_Expression;
  private ConceptPresentation props_Area;
  private ConceptPresentation props_Area_Expression;
  private ConceptPresentation props_Concentration;
  private ConceptPresentation props_Concentration_Expression;
  private ConceptPresentation props_Distance;
  private ConceptPresentation props_Distance_Expression;
  private ConceptPresentation props_Litre;
  private ConceptPresentation props_Mass;
  private ConceptPresentation props_Mass_Concentration;
  private ConceptPresentation props_Mass_Expression;
  private ConceptPresentation props_Metres_Cubed;
  private ConceptPresentation props_Microgram;
  private ConceptPresentation props_Microlitre;
  private ConceptPresentation props_Micrometre;
  private ConceptPresentation props_Micrometres_Cubed;
  private ConceptPresentation props_Micrometres_Squared;
  private ConceptPresentation props_Micromolar;
  private ConceptPresentation props_Micromoles;
  private ConceptPresentation props_Milligram;
  private ConceptPresentation props_Millilitre;
  private ConceptPresentation props_Millimetre;
  private ConceptPresentation props_Millimetres_Cubed;
  private ConceptPresentation props_Millimetres_Squared;
  private ConceptPresentation props_Millimolar;
  private ConceptPresentation props_Millimoles;
  private ConceptPresentation props_Molar;
  private ConceptPresentation props_Moles;
  private ConceptPresentation props_Nanogram;
  private ConceptPresentation props_Nanolitre;
  private ConceptPresentation props_Nanometre;
  private ConceptPresentation props_Nanometres_Cubed;
  private ConceptPresentation props_Nanometres_Squared;
  private ConceptPresentation props_Nanomolar;
  private ConceptPresentation props_Nanomoles;
  private ConceptPresentation props_Unit;
  private ConceptPresentation props_Unit_Amount;
  private ConceptPresentation props_Unit_Amount_Combined_Concentration;
  private ConceptPresentation props_Unit_Amount_Concentration;
  private ConceptPresentation props_Unit_Amount_Molar_Concentration;
  private ConceptPresentation props_Unit_Area;
  private ConceptPresentation props_Unit_Concentration;
  private ConceptPresentation props_Unit_Distance;
  private ConceptPresentation props_Unit_Mass;
  private ConceptPresentation props_Unit_Mass_Concentration;
  private ConceptPresentation props_Unit_Volume;
  private ConceptPresentation props_Unit_Volume_Litre;
  private ConceptPresentation props_Unit_Volume_Metre;
  private ConceptPresentation props_Volume;
  private ConceptPresentation props_Volume_Expression;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Amount:
        if (props_Amount == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Amount");
          props_Amount = cpb.create();
        }
        return props_Amount;
      case LanguageConceptSwitch.Amount_Concentration:
        if (props_Amount_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Concentration (Amount)");
          props_Amount_Concentration = cpb.create();
        }
        return props_Amount_Concentration;
      case LanguageConceptSwitch.Amount_Expression:
        if (props_Amount_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Amount_Expression");
          props_Amount_Expression = cpb.create();
        }
        return props_Amount_Expression;
      case LanguageConceptSwitch.Area:
        if (props_Area == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Area");
          props_Area = cpb.create();
        }
        return props_Area;
      case LanguageConceptSwitch.Area_Expression:
        if (props_Area_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Area_Expression");
          props_Area_Expression = cpb.create();
        }
        return props_Area_Expression;
      case LanguageConceptSwitch.Concentration:
        if (props_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Concentration = cpb.create();
        }
        return props_Concentration;
      case LanguageConceptSwitch.Concentration_Expression:
        if (props_Concentration_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Concentration_Expression");
          props_Concentration_Expression = cpb.create();
        }
        return props_Concentration_Expression;
      case LanguageConceptSwitch.Distance:
        if (props_Distance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Distance");
          props_Distance = cpb.create();
        }
        return props_Distance;
      case LanguageConceptSwitch.Distance_Expression:
        if (props_Distance_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Distance_Expression");
          props_Distance_Expression = cpb.create();
        }
        return props_Distance_Expression;
      case LanguageConceptSwitch.Litre:
        if (props_Litre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("L");
          props_Litre = cpb.create();
        }
        return props_Litre;
      case LanguageConceptSwitch.Mass:
        if (props_Mass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Mass");
          props_Mass = cpb.create();
        }
        return props_Mass;
      case LanguageConceptSwitch.Mass_Concentration:
        if (props_Mass_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Concentration (Mass)");
          props_Mass_Concentration = cpb.create();
        }
        return props_Mass_Concentration;
      case LanguageConceptSwitch.Mass_Expression:
        if (props_Mass_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Mass_Expression");
          props_Mass_Expression = cpb.create();
        }
        return props_Mass_Expression;
      case LanguageConceptSwitch.Metres_Cubed:
        if (props_Metres_Cubed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("m3");
          props_Metres_Cubed = cpb.create();
        }
        return props_Metres_Cubed;
      case LanguageConceptSwitch.Microgram:
        if (props_Microgram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ug");
          props_Microgram = cpb.create();
        }
        return props_Microgram;
      case LanguageConceptSwitch.Microlitre:
        if (props_Microlitre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("uL");
          props_Microlitre = cpb.create();
        }
        return props_Microlitre;
      case LanguageConceptSwitch.Micrometre:
        if (props_Micrometre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Micrometres");
          cpb.rawPresentation("um");
          props_Micrometre = cpb.create();
        }
        return props_Micrometre;
      case LanguageConceptSwitch.Micrometres_Cubed:
        if (props_Micrometres_Cubed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("um3");
          props_Micrometres_Cubed = cpb.create();
        }
        return props_Micrometres_Cubed;
      case LanguageConceptSwitch.Micrometres_Squared:
        if (props_Micrometres_Squared == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("um2");
          props_Micrometres_Squared = cpb.create();
        }
        return props_Micrometres_Squared;
      case LanguageConceptSwitch.Micromolar:
        if (props_Micromolar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("uM");
          props_Micromolar = cpb.create();
        }
        return props_Micromolar;
      case LanguageConceptSwitch.Micromoles:
        if (props_Micromoles == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("micromoles");
          props_Micromoles = cpb.create();
        }
        return props_Micromoles;
      case LanguageConceptSwitch.Milligram:
        if (props_Milligram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mg");
          props_Milligram = cpb.create();
        }
        return props_Milligram;
      case LanguageConceptSwitch.Millilitre:
        if (props_Millilitre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mL");
          props_Millilitre = cpb.create();
        }
        return props_Millilitre;
      case LanguageConceptSwitch.Millimetre:
        if (props_Millimetre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Millimetres");
          cpb.rawPresentation("mm");
          props_Millimetre = cpb.create();
        }
        return props_Millimetre;
      case LanguageConceptSwitch.Millimetres_Cubed:
        if (props_Millimetres_Cubed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mm3");
          props_Millimetres_Cubed = cpb.create();
        }
        return props_Millimetres_Cubed;
      case LanguageConceptSwitch.Millimetres_Squared:
        if (props_Millimetres_Squared == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mm2");
          props_Millimetres_Squared = cpb.create();
        }
        return props_Millimetres_Squared;
      case LanguageConceptSwitch.Millimolar:
        if (props_Millimolar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mM");
          props_Millimolar = cpb.create();
        }
        return props_Millimolar;
      case LanguageConceptSwitch.Millimoles:
        if (props_Millimoles == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("millimoles");
          props_Millimoles = cpb.create();
        }
        return props_Millimoles;
      case LanguageConceptSwitch.Molar:
        if (props_Molar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("M");
          props_Molar = cpb.create();
        }
        return props_Molar;
      case LanguageConceptSwitch.Moles:
        if (props_Moles == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("moles");
          props_Moles = cpb.create();
        }
        return props_Moles;
      case LanguageConceptSwitch.Nanogram:
        if (props_Nanogram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ng");
          props_Nanogram = cpb.create();
        }
        return props_Nanogram;
      case LanguageConceptSwitch.Nanolitre:
        if (props_Nanolitre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("nL");
          props_Nanolitre = cpb.create();
        }
        return props_Nanolitre;
      case LanguageConceptSwitch.Nanometre:
        if (props_Nanometre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Nanometres");
          cpb.rawPresentation("nm");
          props_Nanometre = cpb.create();
        }
        return props_Nanometre;
      case LanguageConceptSwitch.Nanometres_Cubed:
        if (props_Nanometres_Cubed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("nm3");
          props_Nanometres_Cubed = cpb.create();
        }
        return props_Nanometres_Cubed;
      case LanguageConceptSwitch.Nanometres_Squared:
        if (props_Nanometres_Squared == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("nm2");
          props_Nanometres_Squared = cpb.create();
        }
        return props_Nanometres_Squared;
      case LanguageConceptSwitch.Nanomolar:
        if (props_Nanomolar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("nM");
          props_Nanomolar = cpb.create();
        }
        return props_Nanomolar;
      case LanguageConceptSwitch.Nanomoles:
        if (props_Nanomoles == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("nanomoles");
          props_Nanomoles = cpb.create();
        }
        return props_Nanomoles;
      case LanguageConceptSwitch.Unit:
        if (props_Unit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit = cpb.create();
        }
        return props_Unit;
      case LanguageConceptSwitch.Unit_Amount:
        if (props_Unit_Amount == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Amount = cpb.create();
        }
        return props_Unit_Amount;
      case LanguageConceptSwitch.Unit_Amount_Combined_Concentration:
        if (props_Unit_Amount_Combined_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Amount / Volume");
          props_Unit_Amount_Combined_Concentration = cpb.create();
        }
        return props_Unit_Amount_Combined_Concentration;
      case LanguageConceptSwitch.Unit_Amount_Concentration:
        if (props_Unit_Amount_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Amount_Concentration = cpb.create();
        }
        return props_Unit_Amount_Concentration;
      case LanguageConceptSwitch.Unit_Amount_Molar_Concentration:
        if (props_Unit_Amount_Molar_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Amount_Molar_Concentration = cpb.create();
        }
        return props_Unit_Amount_Molar_Concentration;
      case LanguageConceptSwitch.Unit_Area:
        if (props_Unit_Area == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Area = cpb.create();
        }
        return props_Unit_Area;
      case LanguageConceptSwitch.Unit_Concentration:
        if (props_Unit_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Concentration = cpb.create();
        }
        return props_Unit_Concentration;
      case LanguageConceptSwitch.Unit_Distance:
        if (props_Unit_Distance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Distance = cpb.create();
        }
        return props_Unit_Distance;
      case LanguageConceptSwitch.Unit_Mass:
        if (props_Unit_Mass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Mass = cpb.create();
        }
        return props_Unit_Mass;
      case LanguageConceptSwitch.Unit_Mass_Concentration:
        if (props_Unit_Mass_Concentration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Unit_Mass_Concentration");
          props_Unit_Mass_Concentration = cpb.create();
        }
        return props_Unit_Mass_Concentration;
      case LanguageConceptSwitch.Unit_Volume:
        if (props_Unit_Volume == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Volume = cpb.create();
        }
        return props_Unit_Volume;
      case LanguageConceptSwitch.Unit_Volume_Litre:
        if (props_Unit_Volume_Litre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Volume_Litre = cpb.create();
        }
        return props_Unit_Volume_Litre;
      case LanguageConceptSwitch.Unit_Volume_Metre:
        if (props_Unit_Volume_Metre == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Unit_Volume_Metre = cpb.create();
        }
        return props_Unit_Volume_Metre;
      case LanguageConceptSwitch.Volume:
        if (props_Volume == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Volume");
          props_Volume = cpb.create();
        }
        return props_Volume;
      case LanguageConceptSwitch.Volume_Expression:
        if (props_Volume_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Volume_Expression");
          props_Volume_Expression = cpb.create();
        }
        return props_Volume_Expression;
    }
    return null;
  }
}
