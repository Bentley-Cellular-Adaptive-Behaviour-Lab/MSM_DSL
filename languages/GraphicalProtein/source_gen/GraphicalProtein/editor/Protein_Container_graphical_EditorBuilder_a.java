package GraphicalProtein.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import de.itemis.mps.editor.diagram.runtime.model.Port;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import de.itemis.mps.editor.diagram.runtime.model.AbstractBoxAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AccessorKey;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import java.util.Collections;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import de.itemis.mps.editor.diagram.runtime.model.AbstractEdgeAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint_Internal;
import de.itemis.mps.editor.diagram.runtime.model.EndpointUtil;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpointReference;
import de.itemis.mps.editor.diagram.runtime.shape.CompositeShape;
import de.itemis.mps.editor.diagram.runtime.shape.ConditionalShape;
import ProteinSetup.behavior.Interaction_TF__BehaviorDescriptor;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.jgraph.TreeLayouter;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import jetbrains.mps.nodeEditor.cellMenu.SPropertySubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class Protein_Container_graphical_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Protein_Container_graphical_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createDiagram_1();
  }

  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, new Runnable() {
      public void run() {
        DiagramCreationContext.createDiagram(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            DiagramContext.withContext(node, new _FunctionTypes._return_P0_E0<BaseDiagramECell>() {
              public BaseDiagramECell invoke() {
                return editorCell.value;
              }
            }, new Runnable() {
              public void run() {
                ContextVariables.withValue("thisNode", node, new Runnable() {
                  public void run() {
                    final ContextVariables _variablesContext = ContextVariables.getCurrent();
                    IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
                      public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                        final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.getChildren(node, LINKS.Cellular_Proteins$pCAK);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell editorCell = new Inline_Builder_335jdl_a0a(editorContext, parameterObject).createCell();

                              final List<Port> ports = new ArrayList<Port>();

                              final IShape shape = new ProteinCellShape();

                              AbstractBoxAccessor accessor = new AbstractBoxAccessor(new AccessorKey(SPropertyOperations.getString(((SNode) _variablesContext.getValue("parameterObject")), PROPS.name$MnvL))) {
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }
                                public void delete() {
                                }
                                @NotNull
                                @Override
                                public List<EditorCell> getContentCells() {
                                  return Collections.singletonList(editorCell);
                                }
                                @NotNull
                                @Override
                                public List<Port> getPorts() {
                                  return ports;
                                }
                                @Override
                                public IShape getShape() {
                                  return shape;
                                }
                              };
                              accessor.setRootCell(editorCell);

                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.getChildren(node, LINKS.Environment_Proteins$b54T);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell editorCell = new Inline_Builder_335jdl_a1a(editorContext, parameterObject).createCell();

                              final List<Port> ports = new ArrayList<Port>();

                              final IShape shape = new ProteinEnvironmentShape();

                              AbstractBoxAccessor accessor = new AbstractBoxAccessor(new AccessorKey(SPropertyOperations.getString(((SNode) _variablesContext.getValue("parameterObject")), PROPS.name$MnvL))) {
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }
                                public void delete() {
                                }
                                @NotNull
                                @Override
                                public List<EditorCell> getContentCells() {
                                  return Collections.singletonList(editorCell);
                                }
                                @NotNull
                                @Override
                                public List<Port> getPorts() {
                                  return ports;
                                }
                                @Override
                                public IShape getShape() {
                                  return shape;
                                }
                              };
                              accessor.setRootCell(editorCell);

                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(node, LINKS.Cellular_Proteins$pCAK), LINKS.Binding_Interactions$c0vO);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_c0" + "." + "InteractionBinding_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));


                              final IShape startShape = null;
                              final IShape endShape = new Arrowhead(1.0, true, 2.0);
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(new AccessorKey("InteractionBinding_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(node, LINKS.Cellular_Proteins$pCAK), LINKS.Phosphorylation_Interactions$c6Pf);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_d0" + "." + "InteractionPhosphorylation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));


                              final IShape startShape = null;
                              final IShape endShape = new Arrowhead(1.0, true, 2.0);
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(new AccessorKey("InteractionPhosphorylation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(node, LINKS.Cellular_Proteins$pCAK), LINKS.Regulation_Interactions$cdpF);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_e0" + "." + "InteractionRegulation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));


                              final IShape startShape = null;
                              final IShape endShape = new CompositeShape(new ConditionalShape(new Arrowhead(1.0, true, 2.0)) {
                                public boolean applicable() {
                                  return (boolean) Interaction_TF__BehaviorDescriptor.isUpregulated_id1RYUCxzPP2O.invoke(((SNode) _variablesContext.getValue("parameterObject")));
                                }
                              }, new ConditionalShape(new BlockedLine(1.0)) {
                                public boolean applicable() {
                                  return !((boolean) Interaction_TF__BehaviorDescriptor.isUpregulated_id1RYUCxzPP2O.invoke(((SNode) _variablesContext.getValue("parameterObject"))));
                                }
                              });
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(new AccessorKey("InteractionRegulation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Cell$GC), PROPS.name$MnvL));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(node, LINKS.Environment_Proteins$b54T), LINKS.Binding_Interactions$c0vO);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_f0" + "." + "InteractionBinding_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));


                              final IShape startShape = null;
                              final IShape endShape = new Arrowhead(1.0, true, 2.0);
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(new AccessorKey("InteractionBinding_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(node, LINKS.Environment_Proteins$b54T), LINKS.Phosphorylation_Interactions$c6Pf);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_g0" + "." + "InteractionPhosphorylation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));


                              final IShape startShape = null;
                              final IShape endShape = new Arrowhead(1.0, true, 2.0);
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(new AccessorKey("InteractionPhosphorylation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(node, LINKS.Environment_Proteins$b54T), LINKS.Regulation_Interactions$cdpF);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_h0" + "." + "InteractionRegulation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));


                              final IShape startShape = null;
                              final IShape endShape = new CompositeShape(new ConditionalShape(new Arrowhead(1.0, true, 2.0)) {
                                public boolean applicable() {
                                  return (boolean) Interaction_TF__BehaviorDescriptor.isUpregulated_id1RYUCxzPP2O.invoke(((SNode) _variablesContext.getValue("parameterObject")));
                                }
                              }, new ConditionalShape(new BlockedLine(1.0)) {
                                public boolean applicable() {
                                  return !((boolean) Interaction_TF__BehaviorDescriptor.isUpregulated_id1RYUCxzPP2O.invoke(((SNode) _variablesContext.getValue("parameterObject"))));
                                }
                              });
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(new AccessorKey("InteractionRegulation_" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL) + "_" + SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))), CONCEPTS.Protein_Environment$Pv), PROPS.name$MnvL));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForIdSafe(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.target_protein$NPAv), PROPS.name$MnvL));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        return elements;
                      }
                      @Override
                      public List<IConnectionType> getConnectionTypes() {
                        List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Binds to";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Protein$rc);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Protein$rc);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode ligandInteraction = SNodeFactoryOperations.createNewNode(CONCEPTS.Interaction_Ligand$Ej, null);
                              ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.Binding_Interactions$c0vO)).addElement(ligandInteraction);
                              SLinkOperations.setTarget(ligandInteraction, LINKS.target_protein$NPAv, toNode);
                              SPropertyOperations.assign(ligandInteraction, PROPS.binding_probability$GaPB, "1.0f");
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Protein$rc);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Protein$rc);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Phosphorylates";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Protein$rc);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Protein$rc);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode kinaseInteraction = SNodeFactoryOperations.createNewNode(CONCEPTS.Interaction_Kinase$Or, null);
                              ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.Phosphorylation_Interactions$c6Pf)).addElement(kinaseInteraction);
                              SLinkOperations.setTarget(kinaseInteraction, LINKS.target_protein$NPAv, toNode);
                              SPropertyOperations.assign(kinaseInteraction, PROPS.binding_probability$GaPB, "1.0f");
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Protein$rc);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Protein$rc);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Regulates";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Protein$rc);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Protein$rc);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode regulationInteraction = SNodeFactoryOperations.createNewNode(CONCEPTS.Interaction_TF$rM, null);
                              ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.Regulation_Interactions$cdpF)).addElement(regulationInteraction);
                              SLinkOperations.setTarget(regulationInteraction, LINKS.target_protein$NPAv, toNode);
                              SPropertyOperations.assign(regulationInteraction, PROPS.regulation_strength$Gnhs, "2.0f");
                              SPropertyOperations.assign(regulationInteraction, PROPS.timestep_delay$Gv0X, 10);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Protein$rc);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Protein$rc);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                        }));
                        return connectionTypes;
                      }

                    };

                    DiagramModel model = DiagramModel.getModel(editorContext, node, "5212054216836328146", accessor);
                    model.setLayouter(new TreeLayouter());

                    IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.Cellular_Proteins$pCAK))), new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.Environment_Proteins$b54T))));
                    model.setPaletteEntryProvider(paletteEntryProvider);

                    if (DiagramCreationContext.isSubdiagram()) {
                      editorCell.value = new SubDiagramECell(editorContext, node, model);
                    } else {
                      editorCell.value = new RootDiagramECell(editorContext, node, model);
                    }
                    editorCell.value.setCellId("Diagram_335jdl_a");
                    editorCell.value.setBig(true);
                    setCellContext(editorCell.value);
                    if (editorCell.value.getContextGraph() != null) {
                      Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
                      if (defaultParent instanceof RootDCell) {
                        ((RootDCell) defaultParent).resetButtonConfig();
                      }
                    }
                  }
                });
              }
            });
          }
        });
      }
    });

    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }
  /*package*/ static class Inline_Builder_335jdl_a0a extends AbstractEditorBuilder {
    @NotNull
    private SNode myNode;

    /*package*/ Inline_Builder_335jdl_a0a(@NotNull EditorContext context, @NotNull SNode node) {
      super(context);
      myNode = node;
    }

    /*package*/ EditorCell createCell() {
      return createCollection_0();
    }

    @NotNull
    @Override
    public SNode getNode() {
      return myNode;
    }

    private EditorCell createCollection_0() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
      editorCell.setCellId("Collection_335jdl_a0a0");
      editorCell.addEditorCell(createConstant_0());
      editorCell.addEditorCell(createCollection_1());
      editorCell.addEditorCell(createCollection_2());
      editorCell.addEditorCell(createCollection_3());
      editorCell.addEditorCell(createCollection_4());
      return editorCell;
    }
    private EditorCell createConstant_0() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "- Cellular Protein -");
      editorCell.setCellId("Constant_335jdl_a0a0a");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createCollection_1() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
      editorCell.setCellId("Collection_335jdl_b0a0a");
      Style style = new StyleImpl();
      style.set(StyleAttributes.SELECTABLE, false);
      editorCell.getStyle().putAll(style);
      editorCell.addEditorCell(createConstant_1());
      editorCell.addEditorCell(createProperty_0());
      return editorCell;
    }
    private EditorCell createConstant_1() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Name: ");
      editorCell.setCellId("Constant_335jdl_a1a0a0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_0() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.name$MnvL;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no name>");
        editorCell.setCellId("property_name");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    private EditorCell createCollection_2() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
      editorCell.setCellId("Collection_335jdl_c0a0a");
      Style style = new StyleImpl();
      style.set(StyleAttributes.SELECTABLE, false);
      editorCell.getStyle().putAll(style);
      editorCell.addEditorCell(createConstant_2());
      editorCell.addEditorCell(createProperty_1());
      return editorCell;
    }
    private EditorCell createConstant_2() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Location: ");
      editorCell.setCellId("Constant_335jdl_a2a0a0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_1() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.location$1fiN;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no location>");
        editorCell.setCellId("property_location");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    private EditorCell createCollection_3() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
      editorCell.setCellId("Collection_335jdl_d0a0a");
      Style style = new StyleImpl();
      style.set(StyleAttributes.SELECTABLE, false);
      editorCell.getStyle().putAll(style);
      editorCell.addEditorCell(createConstant_3());
      editorCell.addEditorCell(createProperty_2());
      editorCell.addEditorCell(createConstant_4());
      editorCell.addEditorCell(createProperty_3());
      editorCell.addEditorCell(createConstant_5());
      editorCell.addEditorCell(createProperty_4());
      return editorCell;
    }
    private EditorCell createConstant_3() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Levels: ");
      editorCell.setCellId("Constant_335jdl_a3a0a0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_2() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.start_level$A6En;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no start_level>");
        editorCell.setCellId("property_start_level");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    private EditorCell createConstant_4() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ";");
      editorCell.setCellId("Constant_335jdl_c3a0a0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_3() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.min_level$JRFZ;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no min_level>");
        editorCell.setCellId("property_min_level");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    private EditorCell createConstant_5() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "-");
      editorCell.setCellId("Constant_335jdl_e3a0a0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_4() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.max_level$KNZ0;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no max_level>");
        editorCell.setCellId("property_max_level");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    private EditorCell createCollection_4() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
      editorCell.setCellId("Collection_335jdl_e0a0a");
      Style style = new StyleImpl();
      style.set(StyleAttributes.SELECTABLE, false);
      editorCell.getStyle().putAll(style);
      editorCell.addEditorCell(createConstant_6());
      editorCell.addEditorCell(createProperty_5());
      return editorCell;
    }
    private EditorCell createConstant_6() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Present for: ");
      editorCell.setCellId("Constant_335jdl_a4a0a0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_5() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.timesteps_active$yHaS;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no timesteps_active>");
        editorCell.setCellId("property_timesteps_active");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
  }
  /*package*/ static class Inline_Builder_335jdl_a1a extends AbstractEditorBuilder {
    @NotNull
    private SNode myNode;

    /*package*/ Inline_Builder_335jdl_a1a(@NotNull EditorContext context, @NotNull SNode node) {
      super(context);
      myNode = node;
    }

    /*package*/ EditorCell createCell() {
      return createCollection_5();
    }

    @NotNull
    @Override
    public SNode getNode() {
      return myNode;
    }

    private EditorCell createCollection_5() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
      editorCell.setCellId("Collection_335jdl_a0b0");
      editorCell.addEditorCell(createConstant_7());
      editorCell.addEditorCell(createCollection_6());
      return editorCell;
    }
    private EditorCell createConstant_7() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "- Extracellular Protein -");
      editorCell.setCellId("Constant_335jdl_a0a1a");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createCollection_6() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
      editorCell.setCellId("Collection_335jdl_b0a1a");
      Style style = new StyleImpl();
      style.set(StyleAttributes.SELECTABLE, false);
      editorCell.getStyle().putAll(style);
      editorCell.addEditorCell(createConstant_8());
      editorCell.addEditorCell(createProperty_6());
      return editorCell;
    }
    private EditorCell createConstant_8() {
      EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Name: ");
      editorCell.setCellId("Constant_335jdl_a1a0b0");
      editorCell.setDefaultText("");
      return editorCell;
    }
    private EditorCell createProperty_6() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.name$MnvL;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no name>");
        editorCell.setCellId("property_name1");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
          }
        });
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty binding_probability$GaPB = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89db2cL, 0x4854efb210adc271L, "binding_probability");
    /*package*/ static final SProperty regulation_strength$Gnhs = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89db2cL, 0x4854efb210adc27cL, "regulation_strength");
    /*package*/ static final SProperty timestep_delay$Gv0X = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89db2cL, 0x4854efb210adc288L, "timestep_delay");
    /*package*/ static final SProperty location$1fiN = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019371L, 0x224f426ac5019792L, "location");
    /*package*/ static final SProperty start_level$A6En = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019371L, 0x224f426ac50195c8L, "start_level");
    /*package*/ static final SProperty min_level$JRFZ = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019371L, 0x224f426ac50196acL, "min_level");
    /*package*/ static final SProperty max_level$KNZ0 = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019371L, 0x224f426ac5019705L, "max_level");
    /*package*/ static final SProperty timesteps_active$yHaS = MetaAdapterFactory.getProperty(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019371L, 0x224f426ac5019571L, "timesteps_active");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink Cellular_Proteins$pCAK = MetaAdapterFactory.getContainmentLink(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac8b6d4dL, 0x2c4f113dac8b6ddaL, "Cellular_Proteins");
    /*package*/ static final SContainmentLink Environment_Proteins$b54T = MetaAdapterFactory.getContainmentLink(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac8b6d4dL, 0x224f426ac508f11fL, "Environment_Proteins");
    /*package*/ static final SReferenceLink target_protein$NPAv = MetaAdapterFactory.getReferenceLink(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89db2cL, 0x2c4f113dac89e3c7L, "target_protein");
    /*package*/ static final SContainmentLink Binding_Interactions$c0vO = MetaAdapterFactory.getContainmentLink(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89d32dL, 0x451b6e6d088aeb5cL, "Binding_Interactions");
    /*package*/ static final SContainmentLink Phosphorylation_Interactions$c6Pf = MetaAdapterFactory.getContainmentLink(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89d32dL, 0x451b6e6d088aeb62L, "Phosphorylation_Interactions");
    /*package*/ static final SContainmentLink Regulation_Interactions$cdpF = MetaAdapterFactory.getContainmentLink(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89d32dL, 0x451b6e6d088aeb69L, "Regulation_Interactions");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Protein_Cell$GC = MetaAdapterFactory.getConcept(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019371L, "ProteinSetup.structure.Protein_Cell");
    /*package*/ static final SConcept Protein_Environment$Pv = MetaAdapterFactory.getConcept(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x224f426ac5019482L, "ProteinSetup.structure.Protein_Environment");
    /*package*/ static final SConcept Protein$rc = MetaAdapterFactory.getConcept(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89d32dL, "ProteinSetup.structure.Protein");
    /*package*/ static final SConcept Interaction_Ligand$Ej = MetaAdapterFactory.getConcept(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89dcd1L, "ProteinSetup.structure.Interaction_Ligand");
    /*package*/ static final SConcept Interaction_Kinase$Or = MetaAdapterFactory.getConcept(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89dc7cL, "ProteinSetup.structure.Interaction_Kinase");
    /*package*/ static final SConcept Interaction_TF$rM = MetaAdapterFactory.getConcept(0xea515ac2fe2e495aL, 0xa1e2243a14826d03L, 0x2c4f113dac89dc43L, "ProteinSetup.structure.Interaction_TF");
    /*package*/ static final SConcept PropertyAttribute$Gb = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
  }
}
