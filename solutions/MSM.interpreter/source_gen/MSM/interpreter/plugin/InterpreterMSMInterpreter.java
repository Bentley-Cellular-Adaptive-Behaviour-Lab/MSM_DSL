package MSM.interpreter.plugin;

/*Generated by MPS */

import com.mbeddr.mpsutil.interpreter.rt.InterpreterBase;
import java.util.List;
import com.mbeddr.mpsutil.interpreter.rt.IEvaluator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.mpsutil.interpreter.rt.ConceptEvaluatorBase;
import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.interpreter.rt.IContext;
import com.mbeddr.mpsutil.interpreter.rt.ICoverageAnalyzer;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.mpsutil.interpreter.rt.StopAndReturnException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterEscapeException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterRuntimeException;
import com.mbeddr.mpsutil.interpreter.rt.EvaluatorInfo;
import org.iets3.core.expr.base.behavior.IETS3ExprEvalHelper;
import java.math.BigDecimal;
import java.math.BigInteger;
import com.mbeddr.mpsutil.interpreter.rt.ITypeMapper;
import com.mbeddr.mpsutil.interpreter.rt.IRelationship;
import com.mbeddr.mpsutil.interpreter.rt.InterpretBeforeRelationshipImpl;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class InterpreterMSMInterpreter extends InterpreterBase {
  public InterpreterMSMInterpreter() {
    init();
  }

  protected void populateEvaluators(List<? extends IEvaluator> evaluators) {
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Species_Expression$wd, "r:9d776f45-8526-4cd2-9bed-df3494ff8a9f(MSM.interpreter.plugin)/2692960861160049520", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.Species$8XOa), PROPS.name$MnvL);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("Species()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Species_Expression");
      }

      @Override
      public String toString() {
        return "Species_Expression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Parameter$4p, "r:9d776f45-8526-4cd2-9bed-df3494ff8a9f(MSM.interpreter.plugin)/2692960861160055505", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SLinkOperations.getTarget(node, LINKS.value$2Nrp);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("Parameter()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Parameter");
      }

      @Override
      public String toString() {
        return "Parameter";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Reactant_Expression$La, "r:9d776f45-8526-4cd2-9bed-df3494ff8a9f(MSM.interpreter.plugin)/2692960861160053415", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          Object eval_result = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(node, LINKS.expr$K4uy));
          if (eval_result.getClass() == BigDecimal.class) {
            return as_t2tsc6_a0a0a4a0a0a0a0a2a2(eval_result, BigDecimal.class).doubleValue();
          } else if (eval_result.getClass() == BigInteger.class) {
            return as_t2tsc6_a0a0a0e0a0a0a0a0c0c(eval_result, BigInteger.class).doubleValue();
          } else {
            return as_t2tsc6_a0a0a4a0a0a0a0a2a2_0(eval_result, String.class);
          }
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("Reactant_Expression()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Reactant_Expression");
      }

      @Override
      public String toString() {
        return "Reactant_Expression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Product_Expression$KF, "r:9d776f45-8526-4cd2-9bed-df3494ff8a9f(MSM.interpreter.plugin)/2692960861160078570", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          Object eval_result = IETS3ExprEvalHelper.evaluate(SLinkOperations.getTarget(node, LINKS.expr$K4uy));
          if (eval_result.getClass() == BigDecimal.class) {
            return as_t2tsc6_a0a0a4a0a0a0a0a3a2(eval_result, BigDecimal.class).doubleValue();
          } else if (eval_result.getClass() == BigInteger.class) {
            return as_t2tsc6_a0a0a0e0a0a0a0a0d0c(eval_result, BigInteger.class).doubleValue();
          } else {
            return as_t2tsc6_a0a0a4a0a0a0a0a3a2_0(eval_result, String.class);
          }
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("Product_Expression()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Product_Expression");
      }

      @Override
      public String toString() {
        return "Product_Expression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
  }


  protected void populateTypeMappers(List<? extends ITypeMapper> typeMappers) {
  }



  protected void populateRelationships(List<? extends IRelationship> relationships) {
    ListSequence.fromList(((List<IRelationship>) relationships)).addElement(new InterpretBeforeRelationshipImpl("MSM.interpreter.plugin.InterpreterMSMInterpreter", "org.iets3.core.expr.base.interpreter.plugin.InterpreterExprBaseInterpreter"));
  }
  private static <T> T as_t2tsc6_a0a0a4a0a0a0a0a2a2(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_t2tsc6_a0a0a0e0a0a0a0a0c0c(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_t2tsc6_a0a0a4a0a0a0a0a2a2_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_t2tsc6_a0a0a4a0a0a0a0a3a2(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_t2tsc6_a0a0a0e0a0a0a0a0d0c(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_t2tsc6_a0a0a4a0a0a0a0a3a2_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink Species$8XOa = MetaAdapterFactory.getReferenceLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b12L, 0x53941380e02b1b1bL, "Species");
    /*package*/ static final SContainmentLink value$2Nrp = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae05a35L, 0x375d1bec6ae05a38L, "value");
    /*package*/ static final SContainmentLink expr$K4uy = MetaAdapterFactory.getContainmentLink(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x1f9e4166b2564f61L, 0x1f9e4166b2564f62L, "expr");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Species_Expression$wd = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x53941380e02b1b12L, "SpeciesSetup.structure.Species_Expression");
    /*package*/ static final SConcept Parameter$4p = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x375d1bec6ae05a35L, "SpeciesSetup.structure.Parameter");
    /*package*/ static final SConcept Reactant_Expression$La = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x1f9e4166b246169cL, "SpeciesSetup.structure.Reactant_Expression");
    /*package*/ static final SConcept Product_Expression$KF = MetaAdapterFactory.getConcept(0xf3f95abcaef14f78L, 0xaa77fb36d4ba916aL, 0x1f9e4166b246169bL, "SpeciesSetup.structure.Product_Expression");
  }
}
