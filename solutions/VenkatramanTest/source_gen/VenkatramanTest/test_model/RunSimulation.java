package VenkatramanTest.test_model;

/*Generated by MPS */

import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.io.File;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.nio.file.Files;

public class RunSimulation {
  public static void main(String[] args) {
    String root_string = System.getProperty("user.dir");
    String output_string = "C:/Users/Tom/MPSProjects/MSM_DSL/solutions/VenkatramanTest/source_gen/VenkatramanTest/test_model";
    boolean doingClusterAnalysis = true;

    System.out.println("Using world: " + "World");
    System.out.println("Using tissues: " + "Tissues");
    System.out.println("Using signalling setup: " + "Signalling");
    System.out.println("Using shape setup: " + "Shapes");

    System.out.println("The current directory is: " + root_string);
    System.out.println("Transferring auto-generated files from: " + output_string);

    // Determine DSL-generated file paths based on operating system and copy the designated files to the source folder.
    copyFiles(root_string, output_string, doingClusterAnalysis);

    if (!(doingClusterAnalysis)) {
      buildLocalSpringAgent();
      runLocalSpringAgent();
    } else {
      fixSweepFilePermissions();
      fixSLURMFilePermissions();
      fixBuildScriptPermissions();
      fixSLURMFileFormatting();
      uploadFilesToCAMP();
      runClusterScript();
    }

  }

  public static void copyFiles(String root_string, String output_string, boolean doingClusterAnalysis) {
    Path old_tissue_path;
    Path old_world_path;
    Path old_speciesSource_path;
    Path old_speciesHeader_path;
    Path old_shape_path;
    Path old_clusterParamsHeader_path;
    Path old_runParameterSweep_path;
    Path old_slurmMSM_path;
    Path old_buildScript_path;

    Path new_tissue_path;
    Path new_world_path;
    Path new_speciesSource_path;
    Path new_speciesHeader_path;
    Path new_shape_path;
    Path new_clusterParamsHeader_path;
    Path new_runParameterSweep_path;
    Path new_slurmMSM_path;
    Path new_buildScript_path;

    // Determine DSL-generated file paths based on operating system and copy the designated files to the source folder.
    switch (utils.getOS()) {
      case WINDOWS:
        old_tissue_path = Paths.get(output_string + "\\" + "Tissues" + ".cpp");
        old_world_path = Paths.get(output_string + "\\" + "World" + ".cpp");
        old_speciesSource_path = Paths.get(output_string + "\\" + "Signalling" + ".cpp");
        old_speciesHeader_path = Paths.get(output_string + "\\" + "Signalling" + "_header.h");
        old_shape_path = Paths.get(output_string + "\\" + "Shapes" + ".cpp");
        old_buildScript_path = Paths.get(output_string + "\\buildSpringAgent.sh");

        new_tissue_path = Paths.get(root_string + "\\src\\generated\\dsl_tissue_gen.cpp");
        new_world_path = Paths.get(root_string + "\\src\\generated\\dsl_world_gen.cpp");
        new_speciesHeader_path = Paths.get(root_string + "\\src\\generated\\dsl_species_gen.cpp");
        new_speciesSource_path = Paths.get(root_string + "\\src\\generated\\dsl_species_gen.h");
        new_shape_path = Paths.get(root_string + "\\src\\generated\\dsl_shape_gen.cpp");
        new_buildScript_path = Paths.get(root_string + "\\src\\buildSpringAgent.sh");

        System.out.println("Copying tissue file " + old_tissue_path + " to " + new_tissue_path);
        System.out.println("Copying world file " + old_world_path + " to " + new_world_path);
        System.out.println("Copying species source file " + old_speciesSource_path + " to " + new_speciesSource_path);
        System.out.println("Copying species header file " + old_speciesHeader_path + " to " + new_speciesHeader_path);
        System.out.println("Copying shape file " + old_shape_path + " to " + new_shape_path);
        System.out.println("Copying build script " + old_buildScript_path + " to " + new_buildScript_path);

        utils.copy_files(old_tissue_path, new_tissue_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_world_path, new_world_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_speciesSource_path, new_speciesSource_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_speciesHeader_path, new_speciesHeader_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_shape_path, new_shape_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_buildScript_path, new_buildScript_path, StandardCopyOption.REPLACE_EXISTING);

        if (doingClusterAnalysis) {
          old_clusterParamsHeader_path = Paths.get(output_string + "\\clusterParams.h");
          old_runParameterSweep_path = Paths.get(output_string + "\\runParameterSweep.sh");
          old_slurmMSM_path = Paths.get(output_string + "\\slurmMSM.sh");

          new_clusterParamsHeader_path = Paths.get(root_string + "\\src\\generated\\clusterParams.h");
          new_runParameterSweep_path = Paths.get(root_string + "\\src\\runParameterSweep.sh");
          new_slurmMSM_path = Paths.get(root_string + "\\src\\slurmMSM.sh");

          System.out.println("Copying parameter sweep header file " + old_clusterParamsHeader_path + " to " + new_clusterParamsHeader_path);
          System.out.println("Copying sweep script " + old_runParameterSweep_path + " to " + new_runParameterSweep_path);
          System.out.println("Copying SLURM path " + old_slurmMSM_path + " to " + new_slurmMSM_path);

          utils.copy_files(old_clusterParamsHeader_path, new_clusterParamsHeader_path, StandardCopyOption.REPLACE_EXISTING);
          utils.copy_files(old_runParameterSweep_path, new_runParameterSweep_path, StandardCopyOption.REPLACE_EXISTING);
          utils.copy_files(old_slurmMSM_path, new_slurmMSM_path, StandardCopyOption.REPLACE_EXISTING);
        }
        break;

      case LINUX:
        old_tissue_path = Paths.get(output_string + "/" + "Tissues" + ".cpp");
        old_world_path = Paths.get(output_string + "/" + "World" + ".cpp");
        old_speciesSource_path = Paths.get(output_string + "/" + "Signalling" + ".cpp");
        old_speciesHeader_path = Paths.get(output_string + "/" + "Signalling" + "_header.h");
        old_shape_path = Paths.get(output_string + "/" + "Shapes" + ".cpp");
        old_buildScript_path = Paths.get(output_string + "/buildSpringAgent.sh");

        new_tissue_path = Paths.get(root_string + "/src/generated/dsl_tissue_gen.cpp");
        new_world_path = Paths.get(root_string + "/src/generated/dsl_world_gen.cpp");
        new_speciesSource_path = Paths.get(root_string + "/src/generated/dsl_species_gen.cpp");
        new_speciesHeader_path = Paths.get(root_string + "/src/generated/dsl_species_gen.h");
        new_shape_path = Paths.get(root_string + "/src/generated/dsl_shape_gen.cpp");
        new_buildScript_path = Paths.get(root_string + "/src/buildSpringAgent.sh");

        System.out.println("Copying tissue file " + old_tissue_path + " to " + new_tissue_path);
        System.out.println("Copying world file " + old_world_path + " to " + new_world_path);
        System.out.println("Copying species source file " + old_speciesSource_path + " to " + new_speciesSource_path);
        System.out.println("Copying species header file " + old_speciesHeader_path + " to " + new_speciesHeader_path);
        System.out.println("Copying shape file " + old_shape_path + " to " + new_shape_path);
        System.out.println("Copying build script " + old_buildScript_path + " to " + new_buildScript_path);

        utils.copy_files(old_tissue_path, new_tissue_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_world_path, new_world_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_speciesSource_path, new_speciesSource_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_speciesHeader_path, new_speciesHeader_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_shape_path, new_shape_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_buildScript_path, new_buildScript_path, StandardCopyOption.REPLACE_EXISTING);

        if (doingClusterAnalysis) {
          old_clusterParamsHeader_path = Paths.get(output_string + "/clusterParams.h");
          old_runParameterSweep_path = Paths.get(output_string + "/runParameterSweep.sh");
          old_slurmMSM_path = Paths.get(output_string + "/slurmMSM.sh");

          new_clusterParamsHeader_path = Paths.get(root_string + "/src/generated/clusterParams.h");
          new_runParameterSweep_path = Paths.get(root_string + "/src/runParameterSweep.sh");
          new_slurmMSM_path = Paths.get(root_string + "/src/slurmMSM.sh");

          System.out.println("Copying parameter sweep header file " + old_clusterParamsHeader_path + " to " + new_clusterParamsHeader_path);
          System.out.println("Copying sweep script " + old_runParameterSweep_path + " to " + new_runParameterSweep_path);
          System.out.println("Copying SLURM path " + old_slurmMSM_path + " to " + new_slurmMSM_path);

          utils.copy_files(old_clusterParamsHeader_path, new_clusterParamsHeader_path, StandardCopyOption.REPLACE_EXISTING);
          utils.copy_files(old_runParameterSweep_path, new_runParameterSweep_path, StandardCopyOption.REPLACE_EXISTING);
          utils.copy_files(old_slurmMSM_path, new_slurmMSM_path, StandardCopyOption.REPLACE_EXISTING);
        }
        break;

      case MAC:
        old_tissue_path = Paths.get(output_string + "/" + "Tissues" + ".cpp");
        old_world_path = Paths.get(output_string + "/" + "World" + ".cpp");
        old_speciesSource_path = Paths.get(output_string + "/" + "Signalling" + ".cpp");
        old_speciesHeader_path = Paths.get(output_string + "/" + "Signalling" + "_header.h");
        old_shape_path = Paths.get(output_string + "/" + "Shapes" + ".cpp");
        old_buildScript_path = Paths.get(output_string + "/buildSpringAgent.sh");

        new_tissue_path = Paths.get(root_string + "/src/generated/dsl_tissue_gen.cpp");
        new_world_path = Paths.get(root_string + "/src/generated/dsl_world_gen.cpp");
        new_speciesSource_path = Paths.get(root_string + "/src/generated/dsl_species_gen.cpp");
        new_speciesHeader_path = Paths.get(root_string + "/src/generated/dsl_species_gen.h");
        new_shape_path = Paths.get(root_string + "/src/generated/dsl_shape_gen.cpp");
        new_buildScript_path = Paths.get(root_string + "/src/buildSpringAgent.sh");

        System.out.println("Copying tissue file " + old_tissue_path + " to " + new_tissue_path);
        System.out.println("Copying world file " + old_world_path + " to " + new_world_path);
        System.out.println("Copying species source file " + old_speciesSource_path + " to " + new_speciesSource_path);
        System.out.println("Copying species header file " + old_speciesHeader_path + " to " + new_speciesHeader_path);
        System.out.println("Copying shape file " + old_shape_path + " to " + new_shape_path);
        System.out.println("Copying build script " + old_buildScript_path + " to " + new_buildScript_path);

        utils.copy_files(old_tissue_path, new_tissue_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_world_path, new_world_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_speciesSource_path, new_speciesSource_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_speciesHeader_path, new_speciesHeader_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_shape_path, new_shape_path, StandardCopyOption.REPLACE_EXISTING);
        utils.copy_files(old_buildScript_path, new_buildScript_path, StandardCopyOption.REPLACE_EXISTING);

        if (doingClusterAnalysis) {
          old_clusterParamsHeader_path = Paths.get(output_string + "/clusterParams.h");
          old_runParameterSweep_path = Paths.get(output_string + "/runParameterSweep.sh");
          old_slurmMSM_path = Paths.get(output_string + "/slurmMSM.sh");

          new_clusterParamsHeader_path = Paths.get(root_string + "/src/generated/clusterParams.h");
          new_runParameterSweep_path = Paths.get(root_string + "/src/runParameterSweep.sh");
          new_slurmMSM_path = Paths.get(root_string + "/src/slurmMSM.sh");

          System.out.println("Copying parameter sweep header file " + old_clusterParamsHeader_path + " to " + new_clusterParamsHeader_path);
          System.out.println("Copying sweep script " + old_runParameterSweep_path + " to " + new_runParameterSweep_path);
          System.out.println("Copying SLURM path " + old_slurmMSM_path + " to " + new_slurmMSM_path);

          utils.copy_files(old_clusterParamsHeader_path, new_clusterParamsHeader_path, StandardCopyOption.REPLACE_EXISTING);
          utils.copy_files(old_runParameterSweep_path, new_runParameterSweep_path, StandardCopyOption.REPLACE_EXISTING);
          utils.copy_files(old_slurmMSM_path, new_slurmMSM_path, StandardCopyOption.REPLACE_EXISTING);
        }
        break;
    }
  }

  public static void uploadFilesToCAMP() {
    try {
      String address = "login.camp.thecrick.org:./CLUSTER_TEST";
      ProcessBuilder pb = new ProcessBuilder("rsync", "-avzh", ".", address);
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public static void fixSLURMFileFormatting() {
    // From https://stackoverflow.com/questions/13741751/modify-the-content-of-a-file-using-java
    List<String> lines = new ArrayList<String>();
    String line = null;
    try {
      File slurmFile = new File("src/slurmMSM.sh");
      FileReader fr = new FileReader(slurmFile);
      BufferedReader br = new BufferedReader(fr);
      //  Remove carriage returns.
      while ((line = br.readLine()) != null) {
        line = line.replace("\r", "");
        lines.add(line);
      }
      br.close();
      fr.close();

      // Write back into file using LF formatting.
      FileWriter fw = new FileWriter(slurmFile);
      BufferedWriter out = new BufferedWriter(fw);
      for (String l : lines) {
        out.write(l);
        out.write('\n');
      }
      out.flush();
      out.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }


  public static void buildLocalSpringAgent() {
    // Attempt to build the MSM using the settings defined in the parent node.
    try {
      System.out.println("Passing build command: " + "sh buildSpringAgent.sh ");
      ProcessBuilder pb = new ProcessBuilder("sh", "buildSpringAgent.sh");
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public static void runLocalSpringAgent() {
    // Attempt to run the MSM with required arguments.
    try {
      ProcessBuilder pb = new ProcessBuilder("./springAgent", "1");
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public static void runClusterScript() {
    // Call the cluster script with the correct arguments.
    try {
      ProcessBuilder pb = new ProcessBuilder("sh", "runParameterSweep.sh");
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }

  }

  public static void fixSLURMFilePermissions() {
    try {
      ProcessBuilder pb = new ProcessBuilder("chmod", "a+x", "slurmMSM.sh");
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public static void fixSweepFilePermissions() {
    try {
      ProcessBuilder pb = new ProcessBuilder("chmod", "a+x", "runParameterSweep.sh");
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public static void fixBuildScriptPermissions() {
    try {
      ProcessBuilder pb = new ProcessBuilder("chmod", "a+x", "buildSpringAgent.sh");
      pb.redirectErrorStream(true);
      pb.directory(new File("src"));
      Process p = pb.start();
      InputStream input_stream = p.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(input_stream));
      String line = null;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      int exit_code = p.waitFor();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }


  public static class utils {
    public enum operating_system {
      WINDOWS(),
      LINUX(),
      MAC()
    }

    private static operating_system os = null;

    public static operating_system getOS() {
      try {
        if (os == null) {
          String operSys = System.getProperty("os.name").toLowerCase();
          if (operSys.contains("win")) {
            os = operating_system.WINDOWS;
          } else if (operSys.contains("nix") || operSys.contains("nux") || operSys.contains("aix")) {
            os = operating_system.LINUX;
          } else if (operSys.contains("mac")) {
            os = operating_system.MAC;
          }
        } else {
          throw new Exception("Operating system not found.");
        }
      } catch (Exception ex) {
        System.out.println("Operating system not found.");
      }
      return os;

    }

    public static void copy_files(Path path_1, Path path_2, StandardCopyOption option) {
      try {
        Files.copy(path_1, path_2, StandardCopyOption.REPLACE_EXISTING);
      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    public static void delete_cpp_files_in_dir(String path) {
      System.out.println("Cleaning files in: " + path);
      File target_dir = new File(path);
      File[] files = target_dir.listFiles();
      if (files != null) {
        for (File file : files) {
          String extension = file.getName().split("\\.")[1];
          if (extension.equals("cpp")) {
            System.out.println("Attempting to remove file: " + file.getName());
            if (file.delete()) {
              System.out.println("File removed successfully.");
            } else {
              System.out.println("Error: File not deleted.");
            }
          }
        }
      }
    }

    public static void delete_temp_files_in_dir(String path) {
      System.out.println("Cleaning files in: " + path);
      File target_dir = new File(path);
      File[] files = target_dir.listFiles();
      if (files != null) {
        for (File file : files) {
          String extension = file.getName().split("\\.")[1];
          if (extension.equals("temp")) {
            System.out.println("Attempting to remove file: " + file.getName());
            if (file.delete()) {
              System.out.println("File removed successfully.");
            } else {
              System.out.println("Error: File not deleted.");
            }
          } else if (extension.equals("o")) {
            System.out.println("Attempting to remove file: " + file.getName());
            if (file.delete()) {
              System.out.println("File removed successfully.");
            } else {
              System.out.println("Error: File not deleted.");
            }
          }
        }
      }
    }

  }
}
