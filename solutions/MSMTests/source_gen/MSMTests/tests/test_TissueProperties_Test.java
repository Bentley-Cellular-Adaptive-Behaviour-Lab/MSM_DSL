package MSMTests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import junit.framework.Assert;
import TissueSetup.behavior.Arrangement__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import TissueSetup.behavior.Arrangement_Cylindrical__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

@MPSLaunch
public class test_TissueProperties_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(test_TissueProperties_Test.class, "${project_home}", "r:60ea73b4-b49e-4115-8d0d-09697412701d(MSMTests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public test_TissueProperties_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_test_VesselCellNumber() throws Throwable {
    new TestBody(this).test_test_VesselCellNumber();
  }
  @Test
  public void test_test_VesselGridpointLength() throws Throwable {
    new TestBody(this).test_test_VesselGridpointLength();
  }
  @Test
  public void test_test_VesselCellCircumference() throws Throwable {
    new TestBody(this).test_test_VesselCellCircumference();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_test_VesselCellNumber() throws Exception {
      addNodeById("599220133721283142");
      addNodeById("599220133721283279");
      addNodeById("599220133721283264");
      Assert.assertEquals(30, (int) Arrangement__BehaviorDescriptor.get_total_cell_number_id4XZPqyVOpH$.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721283848"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
      Assert.assertEquals(10, (int) Arrangement__BehaviorDescriptor.get_total_cell_number_id4XZPqyVOpH$.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721284107"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
      Assert.assertEquals(10, (int) Arrangement__BehaviorDescriptor.get_total_cell_number_id4XZPqyVOpH$.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721296554"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
    }
    public void test_test_VesselGridpointLength() throws Exception {
      addNodeById("599220133721283142");
      addNodeById("599220133721283279");
      addNodeById("599220133721283264");
      Assert.assertEquals(200, (int) Arrangement_Cylindrical__BehaviorDescriptor.get_total_width_gridpoints_id1QpPlI52lcy.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721283848"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
      Assert.assertEquals(400, (int) Arrangement_Cylindrical__BehaviorDescriptor.get_total_width_gridpoints_id1QpPlI52lcy.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721284107"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
      Assert.assertEquals(200, (int) Arrangement_Cylindrical__BehaviorDescriptor.get_total_width_gridpoints_id1QpPlI52lcy.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721296554"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
    }
    public void test_test_VesselCellCircumference() throws Exception {
      addNodeById("599220133721283142");
      addNodeById("599220133721283279");
      addNodeById("599220133721283264");
      Assert.assertEquals(3, (int) Arrangement_Cylindrical__BehaviorDescriptor.calculate_cross_section_cells_id506$KtOAF5K.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721283848"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
      Assert.assertEquals(1, (int) Arrangement_Cylindrical__BehaviorDescriptor.calculate_cross_section_cells_id506$KtOAF5K.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721284107"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
      Assert.assertEquals(1, (int) Arrangement_Cylindrical__BehaviorDescriptor.calculate_cross_section_cells_id506$KtOAF5K.invoke(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(getNodeById("599220133721296554"), LINKS.tissue_type$$cvw), LINKS.arrangement$aAuk), CONCEPTS.Arrangement_Cylindrical$Bh)));
    }


  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink tissue_type$$cvw = MetaAdapterFactory.getReferenceLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef86L, 0x4369a03b1c616655L, "tissue_type");
    /*package*/ static final SContainmentLink arrangement$aAuk = MetaAdapterFactory.getContainmentLink(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x7290577338f6917fL, 0x4369a03b1c61664bL, "arrangement");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Arrangement_Cylindrical$Bh = MetaAdapterFactory.getConcept(0xb1ff4d68a5194928L, 0x8e36de776040fb5aL, 0x56b8f8b9a96cef91L, "TissueSetup.structure.Arrangement_Cylindrical");
  }
}
