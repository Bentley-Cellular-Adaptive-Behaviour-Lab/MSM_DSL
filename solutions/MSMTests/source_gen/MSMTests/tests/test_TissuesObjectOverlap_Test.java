package MSMTests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.CheckExpectedMessageRunnable;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.project.ProjectBase;

@MPSLaunch
public class test_TissuesObjectOverlap_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(test_TissuesObjectOverlap_Test.class, "${project_home}", "r:60ea73b4-b49e-4115-8d0d-09697412701d(MSMTests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public test_TissuesObjectOverlap_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_NodeTissueOverlapsWithAnotherCheck4110814406055051538() throws Throwable {
    new TestBody(this).test_NodeTissueOverlapsWithAnotherCheck4110814406055051538();
  }
  @Test
  public void test_NodeTissueOverlapsWithAnotherCheck4110814406055051567() throws Throwable {
    new TestBody(this).test_NodeTissueOverlapsWithAnotherCheck4110814406055051567();
  }
  @Test
  public void test_NodeTissueOverlapsWithAnotherCheck4110814406055079979() throws Throwable {
    new TestBody(this).test_NodeTissueOverlapsWithAnotherCheck4110814406055079979();
  }
  @Test
  public void test_NodeTissueOverlapsWithAnotherCheck4110814406055080002() throws Throwable {
    new TestBody(this).test_NodeTissueOverlapsWithAnotherCheck4110814406055080002();
  }
  @Test
  public void test_NodeThisCellOverlapsWithAnotherCheck4110814406055050375() throws Throwable {
    new TestBody(this).test_NodeThisCellOverlapsWithAnotherCheck4110814406055050375();
  }
  @Test
  public void test_NodeThisCellOverlapsWithAnotherCheck4110814406055049790() throws Throwable {
    new TestBody(this).test_NodeThisCellOverlapsWithAnotherCheck4110814406055049790();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }


    public void test_NodeTissueOverlapsWithAnotherCheck4110814406055051538() throws Exception {
      SNode nodeToCheck = getRealNodeById("4110814406055050591");
      SNode operation = getRealNodeById("4110814406055051538");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "4122658121470114194"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeTissueOverlapsWithAnotherCheck4110814406055051567() throws Exception {
      SNode nodeToCheck = getRealNodeById("4110814406055050866");
      SNode operation = getRealNodeById("4110814406055051567");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "4122658121470114194"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeTissueOverlapsWithAnotherCheck4110814406055079979() throws Exception {
      SNode nodeToCheck = getRealNodeById("4110814406055051608");
      SNode operation = getRealNodeById("4110814406055079979");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "4122658121470114194"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeTissueOverlapsWithAnotherCheck4110814406055080002() throws Exception {
      SNode nodeToCheck = getRealNodeById("4110814406055079522");
      SNode operation = getRealNodeById("4110814406055080002");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "4122658121470114194"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeThisCellOverlapsWithAnotherCheck4110814406055050375() throws Exception {
      SNode nodeToCheck = getRealNodeById("4110814406055049122");
      SNode operation = getRealNodeById("4110814406055050375");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "4122658121470112435"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeThisCellOverlapsWithAnotherCheck4110814406055049790() throws Exception {
      SNode nodeToCheck = getRealNodeById("4110814406055049549");
      SNode operation = getRealNodeById("4110814406055049790");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:583b5986-f053-4561-9682-b6e844b2b168(TissueSetup.typesystem)", "4122658121470112435"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }

  }
}
